{"version":3,"sources":["components/Payoff.js","store/actions/stockData.js","components/StockData.js","utility/constants.js","utility/Option.js","utility/options.js","utility/DS/ColorPicker.js","hooks/useUpdateEffect.js","components/Panel.js","context/liveData.js","components/Navigation/DropDownBtn.js","components/Navigation/Navigation.js","components/Search.js","App.js","store/reducers/stockData.js","index.js"],"names":["Payoff","data","d3","remove","useEffect","myData","Ydomain","nv","newChart","lineChart","margin","left","useInteractiveGuideline","duration","showLegend","showYAxis","showXAxis","xAxis","axisLabel","tickFormat","d","yAxis","forceY","datum","call","windowResize","update","drawChart","console","log","className","id","updatePrice","price","type","StockData","liveMode","stockData","useSelector","state","dispatch","useDispatch","placeholder","value","currentPrice","disabled","onChange","e","stockActions","target","volatility","interest","BUY","SELL","CALL","PUT","CASH","date","moment","Date","now","format","initialPortfolio","initialPortfolioId","amount","contractName","direction","strike","longCondor","firstId","secondId","thirdId","fourthId","shortCondor","bullCallSpread","bearPutSpread","longStraddle","shortStraddle","longButterfly","shortButterfly","Option","this","cts","evaluatePayoffFunc","option","cost","Math","max","parseInt","min","BlackScholes","optionType","S","X","T","r","v","d1","sqrt","d2","CND","exp","x","k","PI","ColorPicker","colors","index","result","length","useUpdateEffect","effect","dependencies","isInitialMount","useRef","current","Contract","props","removeContract","optionData","updateContract","useState","expirationDates","setExpirationDates","selectedDate","setSelectedDate","strikePrices","setStrikePrices","selectedStrike","setSelectedStrike","selectedDirection","setSelectedDirection","selectedType","setSelectedType","dateDiff","diff","setPrice","util","toFixed","map","item","expirationDate","apiContract","find","toUpperCase","contract","options","ask","bid","strikesAtDate","cashContract","class","isNaN","style","verticalAlign","aria-label","onClick","aria-hidden","Panel","portfolio","setPortfolio","visualize","property","newPortfolio","toISOString","push","key","renderContracts","liveDataContext","React","createContext","setLiveMode","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","DropDownBtn","open","setOpen","anchorRef","handleClose","event","contains","handleListKeyDown","preventDefault","prevOpen","focus","Button","ref","aria-controls","undefined","aria-haspopup","color","Popper","anchorEl","role","transition","disablePortal","TransitionProps","placement","Grow","transformOrigin","Paper","ClickAwayListener","onClickAway","MenuList","autoFocusItem","onKeyDown","MenuItem","flexGrow","menuButton","title","navbar","marginBottom","position","zIndex","MenuAppBar","classes","useContext","AppBar","Toolbar","IconButton","edge","Typography","variant","FormGroup","FormControlLabel","control","Switch","checked","prev","label","height","widht","Search","searchFunc","inputValue","setInputValue","Container","Row","Col","md","Autocomplete","symbols","getOptionLabel","displaySymbol","description","filterOptions","query","filter","o","includes","renderInput","params","TextField","noOptionsText","App","setData","errors","setErrors","setOptionData","setErrs","useCallback","message","data-dismiss","removeErrs","updateData","Object","keys","strikes","maxStrike","minStrike","Infinity","values","theoretical","average","floor","change","i","sort","a","b","getColor","minProfit","maxProfit","profitSum","theoreticalPL","profitAtStrike","blackScholesValue","y","strategyData","strategyTheoretical","ticker","axios","get","process","REACT_APP_API_KEY","actions","lastTradePrice","Provider","initialState","rootReducer","combineReducers","action","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.30b2dbd9.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport * as nv from \"nvd3\";\n\nconst Payoff = ({ data }) => {\n  // Clear the Charts\n  d3.selectAll(\"svg > *\").remove();\n\n  const drawChart = ({ data: myData, Ydomain }) => {\n    /*These lines are all chart setup.  Pick and choose which chart features you want to utilize. */\n    nv.addGraph(() => {\n      const newChart = nv.models\n        .lineChart()\n        .margin({ left: 100 }) //Adjust chart margins to give the x-axis some breathing room.\n        .useInteractiveGuideline(false) //We want nice looking tooltips and a guideline!\n        .duration(1500) //how fast do you want the lines to transition?\n        .showLegend(true) //Show the legend, allowing users to turn on/off line series.\n        .showYAxis(true) //Show the y-axis\n        .showXAxis(true); //Show the x-axis\n\n      newChart.xAxis //Chart x-axis settings\n        .axisLabel(\"Price ($)\")\n        .tickFormat((d) => d);\n\n      newChart.yAxis //Chart y-axis settings\n        .axisLabel(\"Profit ($)\")\n        .tickFormat((d) => d);\n\n      newChart.forceY(Ydomain);\n\n      d3.select(\"#chart svg\") //Select the <svg> element you want to render the chart in.\n        .datum(myData) //Populate the <svg> element with chart data...\n        .call(newChart); //Finally, render the chart!\n\n      // Update the chart when window resizes.\n      nv.utils.windowResize(newChart.update);\n\n      return newChart;\n    });\n  };\n\n  // UseEffect with no deps so that a chart is always rendered\n  useEffect(() => {\n    data && drawChart(data);\n  })\n\n  console.log(\"Payoff Rendered\")\n\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col-sm-12\">\n          <div className=\"panel panel-primary\">\n            <div className=\"panel-heading\">Option Payoff</div>\n            <div className=\"panel-body\">\n              <div id=\"chart\">\n                <svg></svg>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Payoff;\n","export const UPDATE_PRICE = \"UPDATE_PRICE\";\nexport const UPDATE_VOLATILITY = \"UPDATE_VOLATILITY\";\nexport const UPDATE_INTEREST = \"UPDATE_INTEREST\";\n\nexport const updatePrice = (price) => {\n  return {\n    type: UPDATE_PRICE,\n    price,\n  };\n};\n\nexport const updateVolatility = (volatility) => {\n  return {\n    type: UPDATE_VOLATILITY,\n    volatility,\n  };\n};\n\nexport const updateInterest = (interest) => {\n  return {\n    type: UPDATE_INTEREST,\n    interest,\n  };\n};\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as stockActions from \"../store/actions/stockData\";\n\nconst StockData = ({ liveMode }) => {\n  const stockData = useSelector((state) => state.stockData);\n  const dispatch = useDispatch();\n\n  console.log(\"Stock Data rendered\")\n\n  return (\n    <div className=\"panel panel-primary\">\n      <div className=\"panel-heading\">Underlying stock</div>\n      <div className=\"panel-body\">\n        <form className=\"form-horizontal\">\n          <div className=\"form-group\">\n            <label className=\"col-sm-5 control-label\">Current price ($)</label>\n            <div className=\"col-sm-7\">\n              <input\n                type=\"number\"\n                placeholder=\"CurrentPrice\"\n                className=\"form-control\"\n                value={stockData.currentPrice}\n                disabled={liveMode}\n                onChange={(e) =>\n                  dispatch(stockActions.updatePrice(e.target.value))\n                }\n              />\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <label className=\"col-sm-5 control-label\">Volatility (%)</label>\n            <div className=\"col-sm-7\">\n              <input\n                type=\"number\"\n                placeholder=\"Volatility\"\n                className=\"form-control\"\n                value={stockData.volatility}\n                onChange={(e) =>\n                  dispatch(stockActions.updateVolatility(e.target.value))\n                }\n              />\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <label className=\"col-sm-5 control-label\">Interest Rate (%)</label>\n            <div className=\"col-sm-7\">\n              <input\n                type=\"number\"\n                placeholder=\"Interest Rate\"\n                className=\"form-control\"\n                value={stockData.interest}\n                onChange={(e) =>\n                  dispatch(stockActions.updateInterest(e.target.value))\n                }\n              />\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default StockData;\n","import moment from \"moment\";\nexport const BUY = \"Buy\";\nexport const SELL = \"Sell\";\nexport const CALL = \"Call\";\nexport const PUT = \"Put\";\nexport const CASH = \"Cash\";\n\nexport const stockDataInitialState = {\n  currentPrice: \"100\",\n  volatility: \"30\",\n  interest: \"2\",\n};\n\nconst date = moment(new Date(Date.now() + 604800000)).format(\"YYYY-MM-DD\");\n\nexport const initialPortfolio = {\n  initialPortfolioId: {\n    amount: 1,\n    contractName: \"initialPortfolioId\",\n    date,\n    direction: BUY,\n    price: \"\", // To be calculated in the Contract Component\n    strike: 100,\n    type: CALL,\n  },\n};\n\nexport const longCondor = {\n  firstId: {\n    amount: 1,\n    contractName: \"firstId\",\n    date,\n    direction: BUY,\n    price: \"\", // To be calculated in the Contract Component\n    strike: 80,\n    type: CALL,\n  },\n  secondId: {\n    amount: 1,\n    contractName: \"secondId\",\n    date,\n    direction: SELL,\n    price: \"\",\n    strike: 90,\n    type: CALL,\n  },\n  thirdId: {\n    amount: 1,\n    contractName: \"thirdId\",\n    date,\n    direction: SELL,\n    price: \"\",\n    strike: 110,\n    type: CALL,\n  },\n  fourthId: {\n    amount: 1,\n    contractName: \"fourthId\",\n    date,\n    direction: BUY,\n    price: \"\",\n    strike: 120,\n    type: CALL,\n  },\n};\n\nexport const shortCondor = {\n  firstId: {\n    amount: 1,\n    contractName: \"firstId\",\n    date,\n    direction: BUY,\n    price: \"\", // To be calculated in the Contract Component\n    strike: 110,\n    type: CALL,\n  },\n  secondId: {\n    amount: 1,\n    contractName: \"secondId\",\n    date,\n    direction: SELL,\n    price: \"\",\n    strike: 120,\n    type: CALL,\n  },\n  thirdId: {\n    amount: 1,\n    contractName: \"thirdId\",\n    date,\n    direction: BUY,\n    price: \"\",\n    strike: 90,\n    type: PUT,\n  },\n  fourthId: {\n    amount: 1,\n    contractName: \"fourthId\",\n    date,\n    direction: SELL,\n    price: \"\",\n    strike: 80,\n    type: PUT,\n  }, \n}\n\nexport const bullCallSpread = {\n  firstId: {\n    amount: 1,\n    contractName: \"firstId\",\n    date,\n    direction: BUY,\n    price: \"\",\n    strike: 100,\n    type: CALL,\n  },\n  secondId: {\n    amount: 1,\n    contractName: \"secondId\",\n    date,\n    direction: SELL,\n    price: \"\",\n    strike: 110,\n    type: CALL,\n  },\n};\n\nexport const bearPutSpread = {\n  firstId: {\n    amount: 1,\n    contractName: \"firstId\",\n    date,\n    direction: BUY,\n    price: \"\",\n    strike: 100,\n    type: PUT,\n  },\n  secondId: {\n    amount: 1,\n    contractName: \"secondId\",\n    date,\n    direction: SELL,\n    price: \"\",\n    strike: 90,\n    type: PUT,\n  },\n};\n\nexport const longStraddle = {\n  firstId: {\n    amount: 1,\n    contractName: \"firstId\",\n    date,\n    direction: BUY,\n    price: \"\",\n    strike: 100,\n    type: CALL,\n  },\n  secondId: {\n    amount: 1,\n    contractName: \"secondId\",\n    date,\n    direction: BUY,\n    price: \"\",\n    strike: 100,\n    type: PUT,\n  },\n};\n\nexport const shortStraddle = {\n  firstId: {\n    amount: 1,\n    contractName: \"firstId\",\n    date,\n    direction: SELL,\n    price: \"\",\n    strike: 100,\n    type: CALL,\n  },\n  secondId: {\n    amount: 1,\n    contractName: \"secondId\",\n    date,\n    direction: SELL,\n    price: \"\",\n    strike: 100,\n    type: PUT,\n  },\n};\n\nexport const longStrangle = {\n  firstId: {\n    amount: 1,\n    contractName: \"firstId\",\n    date,\n    direction: BUY,\n    price: \"\",\n    strike: 110,\n    type: CALL,\n  },\n  secondId: {\n    amount: 1,\n    contractName: \"secondId\",\n    date,\n    direction: BUY,\n    price: \"\",\n    strike: 90,\n    type: PUT,\n  },\n};\n\nexport const shortStrangle = {\n  firstId: {\n    amount: 1,\n    contractName: \"firstId\",\n    date,\n    direction: SELL,\n    price: \"\",\n    strike: 110,\n    type: CALL,\n  },\n  secondId: {\n    amount: 1,\n    contractName: \"secondId\",\n    date,\n    direction: SELL,\n    price: \"\",\n    strike: 90,\n    type: PUT,\n  },\n};\n\nexport const longButterfly = {\n  firstId: {\n    amount: 1,\n    contractName: \"firstId\",\n    date,\n    direction: BUY,\n    price: \"\",\n    strike: 90,\n    type: CALL,\n  },\n  secondId: {\n    amount: 2,\n    contractName: \"secondId\",\n    date,\n    direction: SELL,\n    price: \"\",\n    strike: 100,\n    type: CALL,\n  },\n  thirdId: {\n    amount: 1,\n    contractName: \"thirdId\",\n    date,\n    direction: BUY,\n    price: \"\",\n    strike: 110,\n    type: CALL,\n  },\n};\n\nexport const shortButterfly = {\n  firstId: {\n    amount: 1,\n    contractName: \"firstId\",\n    date,\n    direction: BUY,\n    price: \"\",\n    strike: 100,\n    type: CALL,\n  },\n  secondId: {\n    amount: 1,\n    contractName: \"secondId\",\n    date,\n    direction: SELL,\n    price: \"\",\n    strike: 110,\n    type: CALL,\n  },\n  thirdId: {\n    amount: 1,\n    contractName: \"thirdId\",\n    date,\n    direction: BUY,\n    price: \"\",\n    strike: 100,\n    type: PUT,\n  },\n  fourthId: {\n    amount: 1,\n    contractName: \"fourthId\",\n    date,\n    direction: SELL,\n    price: \"\",\n    strike: 90,\n    type: PUT\n  }\n};\n","import * as cts from \"./constants\";\n\n// Option definition class\nexport default class Option {\n  constructor(contractName) {\n    this.contractName = contractName;\n    this.strike = \"\";\n    this.date = \"\";\n    this.direction = cts.BUY;\n    this.type = cts.CALL;\n    this.amount = 1;\n  }\n}\n","import * as cts from \"./constants\";\n\n// Takes in option object and evaluates the payoff given the input price\nexport const evaluatePayoffFunc = (option, price, stockData) => {\n  const cost = option.price * option.amount;\n  if (option.type === cts.CALL) {\n    // A call Option\n    if (option.direction === cts.BUY) {\n      // Long Call\n      return (\n        Math.max(price - parseInt(option.strike), 0) * option.amount - cost\n      );\n    }\n    // Short Call\n    return Math.min(0, option.strike - price) * option.amount + cost;\n  } else if (option.type === cts.PUT) {\n    // A Put Option\n    if (option.direction === cts.BUY) {\n      // Long Put\n      return (\n        Math.max(parseInt(option.strike) - price, 0) * option.amount - cost\n      );\n    }\n    // Short Put\n    return Math.min(0, price - option.strike) * option.amount + cost;\n  } else if (option.type === cts.CASH) {\n    // Stock\n    if (option.direction === cts.BUY) {\n      // Long Stock\n      return (price - stockData.currentPrice) * option.amount;\n    }\n    // Short Stock\n    return (stockData.currentPrice - price) * option.amount;\n  }\n};\n\n/*\n  S = Current Stock Price\n  X = Exercise Price (Strike)\n  r = Short-term risk free interest rate\n  T = Time remaining to the expiration Date (in years)\n  v = Standard deviation of stock price (implied volatility)\n */\n\nexport function BlackScholes(optionType, S, X, T, r, v) {\n  // Unit adjustment\n  v = v / 100;\n  r = r / 100;\n  var d1 = (Math.log(S / X) + (r + (v * v) / 2) * T) / (v * Math.sqrt(T));\n  var d2 = d1 - v * Math.sqrt(T);\n  if (optionType === cts.CALL) {\n    return S * CND(d1) - X * Math.exp(-r * T) * CND(d2);\n  } else {\n    return X * Math.exp(-r * T) * CND(-d2) - S * CND(-d1);\n  }\n}\n\n/* The cummulative Normal distribution function: */\nfunction CND(x) {\n  if (x < 0) {\n    return 1 - CND(-x);\n  } else {\n    let k = 1 / (1 + 0.2316419 * x);\n    return (\n      1 -\n      (Math.exp((-x * x) / 2) / Math.sqrt(2 * Math.PI)) *\n        k *\n        (0.31938153 +\n          k *\n            (-0.356563782 +\n              k * (1.781477937 + k * (-1.821255978 + k * 1.330274429))))\n    );\n  }\n}\n","// Color Picker Structure to help select color on graph\nexport default class ColorPicker {\n    // Available colors, more can be added\n    colors = [\n        \"blue\",\n        \"red\",\n        \"yellow\",\n        \"purple\",\n        \"orange\",\n        \"black\",\n    ]\n\n    constructor() {\n        this.index = 0;\n    }\n\n    // Get the Next Color\n    getColor(){\n        const result =  this.colors[this.index];\n        // Adjust the index;\n        if(this.index >= this.colors.length){\n            // We have reached the end reset to zero\n            this.index = 0;\n        }else{\n            // Not at end just add one to index\n            this.index++;\n        }\n        return result;\n    }\n}","/**\n * A custom useEffect hook that only triggers on updates, not on initial mount\n * Idea stolen from: https://stackoverflow.com/a/55075818/1526448\n * @param {Function} effect\n * @param {Array<any>} dependencies\n */\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useUpdateEffect(effect, dependencies = []) {\n  const isInitialMount = useRef(true);\n\n  useEffect(() => {\n    if (isInitialMount.current) {\n      isInitialMount.current = false;\n    } else {\n      effect();\n    }\n  }, dependencies);\n}\n","import React, { useEffect, useState } from \"react\";\nimport Option from \"../utility/Option\";\nimport { BlackScholes } from \"../utility\";\nimport { useSelector } from \"react-redux\";\nimport moment from \"moment\";\nimport * as util from \"../utility\";\nimport useUpdateEffect from \"../hooks/useUpdateEffect\";\n\nconst Contract = (props) => {\n  const { removeContract, data, optionData } = props;\n  const { updateContract } = props;\n\n  /*\n   If optionData is defined then the strike prices must adjust to the\n   Expiration date\n   */\n  const [expirationDates, setExpirationDates] = useState([]);\n  const [selectedDate, setSelectedDate] = useState(null);\n\n  const [strikePrices, setStrikePrices] = useState([\n    \"Please Select Expiration Date\",\n  ]);\n  const [selectedStrike, setSelectedStrike] = useState();\n  const [selectedDirection, setSelectedDirection] = useState(\"Buy\");\n  const [selectedType, setSelectedType] = useState(\"Call\");\n\n  // Stock data from redux\n  const stockData = useSelector((state) => state.stockData);\n\n  // Calculate dateDifference in years, used in theoretical black scholes\n  const dateDiff = -moment().diff(data.date, \"years\", true);\n\n  // Calculate the price based on Black-Scholes model\n  const [price, setPrice] = useState();\n\n  // Update the current price every time something changes\n  useEffect(() => {\n    if (optionData) {\n    } else if (!optionData && selectedType !== util.CASH) {\n      setPrice(\n        BlackScholes(\n          data.type,\n          +stockData.currentPrice,\n          +data.strike,\n          +dateDiff,\n          +stockData.interest,\n          +stockData.volatility\n        ).toFixed(2)\n      );\n    }\n  });\n\n  // Update the price every time it changes\n  useUpdateEffect(() => {\n    updateContract(data.contractName, \"price\", price);\n  }, [price]);\n\n  // Set expiration Dates when component mounts\n  useEffect(() => {\n    if (optionData) {\n      const expirationDates = optionData.data.map(\n        (item) => item.expirationDate\n      );\n      setExpirationDates(expirationDates);\n    }\n  }, []);\n\n  // Update strike and price at change\n  useUpdateEffect(() => {\n    if (optionData) {\n      // Find the element with same date\n      const apiContract = optionData.data.find(\n        (item) => item.expirationDate === selectedDate\n      );\n\n      if (!apiContract) return;\n\n      // Find the type of option this is\n      const type = data.type.toUpperCase();\n\n      // Extract the contracts given the date\n      const contractsAtDate = apiContract.options[type];\n\n      // Find the contract with the selected Strike\n      const contract = contractsAtDate.find(\n        (item) => +item.strike === +selectedStrike\n      );\n\n      // Set the price depending if we are short or long\n      if (data.direction === \"Buy\") {\n        setPrice(contract.ask);\n      } else {\n        setPrice(contract.bid);\n      }\n    }\n\n    updateContract(data.contractName, \"strike\", selectedStrike);\n  }, [selectedStrike, setPrice]);\n\n  useUpdateEffect(() => {\n    if (optionData) {\n      // Find the element with same date\n      const apiContract = optionData.data.find(\n        (item) => item.expirationDate === selectedDate\n      );\n\n      // If none found return\n      if (!apiContract) return;\n\n      // Find the type of option this is\n      const type = data.type.toUpperCase();\n\n      // Extract the contracts given the date\n      const contractsAtDate = apiContract.options[type];\n\n      // Make an array of strikes at the current date\n      const strikesAtDate = contractsAtDate.map((item) => item.strike);\n\n      // Update strikeprices\n      setStrikePrices(strikesAtDate);\n    }\n\n    updateContract(data.contractName, \"date\", selectedDate);\n  }, [selectedDate]);\n\n  // Update Direction\n  useUpdateEffect(() => {\n    updateContract(data.contractName, \"direction\", selectedDirection);\n  }, [selectedDirection]);\n\n  // Update type\n  useUpdateEffect(() => {\n    updateContract(data.contractName, \"type\", selectedType);\n\n    // If we just changed to cash\n    if (selectedType === util.CASH) {\n      // Set Debit/Credit equal to the stock price\n      setPrice(stockData.currentPrice);\n    }\n  }, [selectedType]);\n\n  const cashContract = selectedType === util.CASH;\n\n  return (\n    <tr>\n      {/* Direction */}\n      <td>\n        <select\n          id=\"direction\"\n          className=\"form-control\"\n          value={selectedDirection}\n          onChange={(e) => setSelectedDirection(e.target.value)}\n        >\n          <option>Buy</option>\n          <option>Sell</option>\n        </select>\n      </td>\n      {/* Amount */}\n      <td>\n        <input\n          type=\"number\"\n          placeholder=\"Amount\"\n          className=\"form-control form-control-inline\"\n          onChange={(e) =>\n            updateContract(data.contractName, \"amount\", e.target.value)\n          }\n          value={data.amount}\n        />\n      </td>\n      {/* Kind */}\n      <td>\n        <select\n          className=\"form-control\"\n          onChange={(e) => setSelectedType(e.target.value)}\n          value={selectedType}\n        >\n          <option>Call</option>\n          <option>Put</option>\n          <option>Cash</option>\n        </select>\n      </td>\n      {/* Strike Price */}\n      <td>\n        {!cashContract &&\n          (optionData ? (\n            <div class=\"form-group\">\n              <select\n                class=\"form-control\"\n                id=\"exampleFormControlSelect1\"\n                onChange={(e) => setSelectedStrike(e.target.value)}\n              >\n                {strikePrices.map((price) => (\n                  <option>{isNaN(price) ? null : price}</option>\n                ))}\n              </select>\n            </div>\n          ) : (\n            <input\n              type=\"number\"\n              placeholder=\"Strike\"\n              className=\"form-control form-control-inline\"\n              onChange={(e) =>\n                updateContract(data.contractName, \"strike\", e.target.value)\n              }\n              value={data.strike}\n            />\n          ))}\n      </td>\n      {/* Expiry Date */}\n      <td>\n        {!cashContract &&\n          (!optionData ? (\n            <input\n              type=\"date\"\n              placeholder=\"Expiry\"\n              className=\"form-control form-control-inline\"\n              onChange={(e) =>\n                updateContract(data.contractName, \"date\", e.target.value)\n              }\n              value={data.date}\n            />\n          ) : (\n            <div class=\"form-group\">\n              <select\n                class=\"form-control\"\n                id=\"exampleFormControlSelect1\"\n                onChange={(e) => setSelectedDate(e.target.value)}\n              >\n                {expirationDates.map((date) => (\n                  <option>{date}</option>\n                ))}\n              </select>\n            </div>\n          ))}\n      </td>\n      {/* Contract Price */}\n      <td style={{ verticalAlign: \"middle\" }}>\n        <b>{price}</b>\n      </td>\n      {/* Remove Button */}\n      <td style={{ verticalAlign: \"middle\" }}>\n        <button\n          type=\"button\"\n          aria-label=\"Left Align\"\n          className=\"btn btn-danger btn-s\"\n          onClick={() => removeContract(data.contractName)}\n        >\n          <span aria-hidden=\"true\">Remove</span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n\nconst Panel = (props) => {\n  const { portfolio, setPortfolio, visualize, optionData } = props;\n\n  const addContract = () => {\n    const newPortfolio = { ...portfolio };\n    const id = new Date().toISOString();\n    newPortfolio[id] = new Option(id);\n    setPortfolio(newPortfolio);\n  };\n\n  const renderContracts = () => {\n    const result = [];\n    for (let id in portfolio) {\n      result.push(\n        <Contract\n          optionData={optionData}\n          removeContract={removeContract}\n          updateContract={updateContract}\n          data={portfolio[id]}\n          key={id}\n        />\n      );\n    }\n    return result;\n  };\n\n  const updateContract = (id, property, value) => {\n    const newPortfolio = { ...portfolio };\n    newPortfolio[id][property] = value;\n    setPortfolio(newPortfolio);\n  };\n\n  const removeContract = (id) => {\n    const newPortfolio = { ...portfolio };\n    delete newPortfolio[id];\n    setPortfolio(newPortfolio);\n  };\n\n  console.log(\"Panel Rendered\");\n\n  return (\n    <div className=\"panel panel-primary\">\n      <div className=\"panel-heading\">Option Portfolio</div>\n      <div className=\"panel-body\">\n        <table className=\"table table-condensed\">\n          <thead>\n            <tr>\n              <th>Direction</th>\n              <th>Amount</th>\n              <th>Kind</th>\n              <th>Strike</th>\n              <th>Expiry</th>\n              <th>Debit/Credit</th>\n              <th>\n                <button\n                  type=\"submit\"\n                  className=\"btn btn-success btn-s\"\n                  onClick={addContract}\n                >\n                  Add Leg\n                </button>\n              </th>\n            </tr>\n          </thead>\n          <tbody>{renderContracts()}</tbody>\n        </table>\n        <div className=\"pull-right\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-success btn-s\"\n            onClick={visualize}\n          >\n            Generate Payoff\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Panel;\n","import React from \"react\";\n\nconst defaultValue = {\n  liveMode: false,\n  setLiveMode: () => {},\n};\n\nexport const liveDataContext = React.createContext(defaultValue);\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\nimport Grow from \"@material-ui/core/Grow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Popper from \"@material-ui/core/Popper\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport MenuList from \"@material-ui/core/MenuList\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport * as util from \"../../utility\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n}));\n\nconst DropDownBtn = ({ setPortfolio }) => {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const anchorRef = React.useRef(null);\n\n  const handleToggle = () => {\n    setOpen((prevOpen) => !prevOpen);\n  };\n\n  const handleClose = (event, newPortfolio) => {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n    newPortfolio && setPortfolio(newPortfolio);\n    setOpen(false);\n  };\n\n  function handleListKeyDown(event) {\n    if (event.key === \"Tab\") {\n      event.preventDefault();\n      setOpen(false);\n    }\n  }\n\n  // return focus to the button when we transitioned from !open -> open\n  const prevOpen = React.useRef(open);\n  React.useEffect(() => {\n    if (prevOpen.current === true && open === false) {\n      anchorRef.current.focus();\n    }\n\n    prevOpen.current = open;\n  }, [open]);\n\n  return (\n    <div>\n      <Button\n        ref={anchorRef}\n        aria-controls={open ? \"menu-list-grow\" : undefined}\n        aria-haspopup=\"true\"\n        onClick={handleToggle}\n        color=\"inherit\"\n      >\n        View Sample Strategies\n      </Button>\n      <Popper\n        open={open}\n        anchorEl={anchorRef.current}\n        role={undefined}\n        transition\n        disablePortal\n      >\n        {({ TransitionProps, placement }) => (\n          <Grow\n            {...TransitionProps}\n            style={{\n              transformOrigin:\n                placement === \"bottom\" ? \"center top\" : \"center bottom\",\n            }}\n          >\n            <Paper>\n              <ClickAwayListener onClickAway={handleClose}>\n                <MenuList\n                  autoFocusItem={open}\n                  id=\"menu-list-grow\"\n                  onKeyDown={handleListKeyDown}\n                >\n                  <MenuItem\n                    onClick={(e) => handleClose(e, util.bullCallSpread)}\n                  >\n                    Bull Call Spread\n                  </MenuItem>\n                  <MenuItem onClick={(e) => handleClose(e, util.bearPutSpread)}>\n                    Bear Put Spread\n                  </MenuItem>\n                  <MenuItem onClick={(e) => handleClose(e, util.longStraddle)}>\n                    Long Straddle\n                  </MenuItem>\n                  <MenuItem onClick={(e) => handleClose(e, util.shortStraddle)}>\n                    Short Straddle\n                  </MenuItem>\n                  <MenuItem onClick={(e) => handleClose(e, util.longButterfly)}>\n                    Long Butterfly\n                  </MenuItem>\n                  <MenuItem onClick={(e) => handleClose(e, util.shortButterfly)}>\n                    Short Butterfly\n                  </MenuItem>\n                  <MenuItem onClick={(e) => handleClose(e, util.longCondor)}>\n                    Long Condor\n                  </MenuItem>\n                  <MenuItem onClick={(e) => handleClose(e, util.shortCondor)}>\n                    Short Condor\n                  </MenuItem>\n                </MenuList>\n              </ClickAwayListener>\n            </Paper>\n          </Grow>\n        )}\n      </Popper>\n    </div>\n  );\n};\nexport default DropDownBtn;\n","import React, { useContext } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { liveDataContext } from \"../../context/liveData\";\nimport Switch from \"@material-ui/core/Switch\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport DropDownBtn from \"./DropDownBtn\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  navbar: {\n    marginBottom: \"40px\",\n    position: \"relative\",\n    zIndex: \"10\",\n  },\n}));\n\nexport default function MenuAppBar({ setPortfolio }) {\n  const classes = useStyles();\n  const { liveMode, setLiveMode } = useContext(liveDataContext);\n\n  return (\n    <AppBar position=\"static\" className={classes.navbar}>\n      <Toolbar>\n        <IconButton\n          edge=\"start\"\n          className={classes.menuButton}\n          color=\"inherit\"\n          aria-label=\"menu\"\n        >\n          <MenuIcon />\n        </IconButton>\n        <Typography variant=\"h3\" className={classes.title}>\n          Option Strategy Builder\n        </Typography>\n        <DropDownBtn setPortfolio={setPortfolio} />\n        <FormGroup>\n          <FormControlLabel\n            control={\n              <Switch\n                checked={liveMode}\n                onChange={() => setLiveMode((prev) => !prev)}\n                aria-label=\"live mode switch\"\n              />\n            }\n            label={\"Live Data Mode\"}\n          />\n        </FormGroup>\n      </Toolbar>\n    </AppBar>\n  );\n}\n","import React, { useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport symbols from \"../symbols.json\";\nimport { Button } from \"@material-ui/core\";\nimport { Container, Col, Row } from \"react-bootstrap\";\nimport { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n  item: {\n    // No Effect\n    height: \"100%\",\n    widht: \"100%\",\n  },\n});\n\nconst Search = ({ searchFunc }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n  const classes = useStyles();\n\n  const filterOptions = (options, state) => {\n    // Extract the inputValue\n    const query = state.inputValue.toUpperCase();\n    // Update state\n    setInputValue(query);\n    // If short query return nothing (improves performance)\n    if (query.length <= 1) return [];\n\n    // Filter out the options\n    return options.filter((o) => o.displaySymbol.includes(query));\n  };\n\n  console.log(\"Search Rendered\")\n\n  return (\n    <>\n      {/* A Warning message is outputed in console: Fix later */}\n      <Container>\n        <Row>\n          <Col md={10}>\n            <Autocomplete\n              id=\"combo-box-demo\"\n              options={symbols}\n              getOptionLabel={(option) =>\n                option.displaySymbol + \": \" + option.description\n              }\n              filterOptions={(options, state) => filterOptions(options, state)}\n              className={classes.item}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label=\"Search Ticker\"\n                  variant=\"outlined\"\n                />\n              )}\n              noOptionsText={\n                inputValue.length <= 1\n                  ? \"Type a Ticker Symbol\"\n                  : \"No Symbols Found\"\n              }\n            />\n          </Col>\n          <Col md={2}>\n            <Button\n              color=\"primary\"\n              variant=\"contained\"\n              onClick={() => searchFunc(inputValue)}\n              className={classes.item}\n            >\n              Submit\n            </Button>\n          </Col>\n        </Row>\n      </Container>\n    </>\n  );\n};\n\nexport default Search;\n","import React, { useEffect, useState, useCallback, useRef } from \"react\";\nimport Payoff from \"./components/Payoff\";\nimport StockData from \"./components/StockData\";\nimport Panel from \"./components/Panel\";\nimport * as util from \"./utility\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Navigation from \"./components/Navigation/Navigation\";\nimport moment from \"moment\";\nimport { liveDataContext } from \"./context/liveData\";\nimport Search from \"./components/Search\";\nimport axios from \"axios\";\nimport ColorPicker from \"./utility/DS/ColorPicker\";\nimport * as actions from \"./store/actions/stockData\";\nimport { Row, Col, Container } from \"react-bootstrap\";\nimport useUpdateEffect from \"./hooks/useUpdateEffect\";\n\nconst App = () => {\n  const [portfolio, setPortfolio] = useState(util.initialPortfolio);\n  const [data, setData] = useState(null);\n  const [errors, setErrors] = useState(null);\n  const stockData = useSelector((state) => state.stockData);\n  const [liveMode, setLiveMode] = useState(false);\n  const [optionData, setOptionData] = useState();\n  const value = { liveMode, setLiveMode };\n  const dispatch = useDispatch();\n\n  // Set Error Message as JSX\n  const setErrs = useCallback((message) => {\n    setErrors(\n      <div className=\"alert alert-danger \" role=\"alert\">\n        <strong>{message}</strong>\n        <button\n          type=\"button\"\n          className=\"close\"\n          data-dismiss=\"alert\"\n          aria-label=\"Close\"\n          onClick={removeErrs}\n        >\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n    );\n  }, []);\n\n  // Update and Validate User Input Data\n  const updateData = useCallback(() => {\n    // Validate Empty Portfolio\n    if (Object.keys(portfolio).length === 0)\n      return setErrs(\"Add contracts to Visualize\");\n\n    // Validate Stock Price\n    if (+stockData.currentPrice <= 0)\n      return setErrs(\"Please Enter a Valid Stock Price\");\n\n    // Validate Interest\n    if (+stockData.interest <= 0)\n      return setErrs(\"Please Enter a Valid Interest Rate\");\n\n    const strikes = [];\n    let maxStrike = 0;\n    let minStrike = Infinity;\n\n    const values = [];\n    const theoretical = [];\n\n    // Get the Critical strikes to plot\n    for (let id in portfolio) {\n      const contract = portfolio[id];\n      const cashContract = contract.type === util.CASH;\n      const strike = cashContract ? +stockData.currentPrice : +contract.strike;\n      const date = contract.date;\n      const amount = contract.amount;\n\n      // Always Validate Amount\n      if (amount <= 0) return setErrs(\"Please Enter a Valid Amount\");\n\n      // If not a Cash Contract the validate the following fields\n      if (!cashContract) {\n        // Validate Strike prices\n        if (strike <= 0) return setErrs(\"Please Enter A Valid Strike Price\");\n\n        // Validate the Date (Check if it is defined and in the future)\n        if (!date || moment().diff(date) > 0)\n          return setErrs(\"Please Enter a Valid Date\");\n      }\n\n      // Apply To Fixed\n      strikes.push(strike.toFixed(2));\n\n      // Update the maxStrike\n      if (strike > maxStrike) maxStrike = strike;\n      if (strike < minStrike) minStrike = strike;\n    }\n    const average = (maxStrike + minStrike) / 2;\n    const max = Math.floor(average * 1.2);\n    const min = Math.floor(average * 0.8);\n    const change = (max - min) / 35;\n\n    // Add domain limits\n    strikes.push(min);\n    strikes.push(max);\n\n    let i = min;\n    // Add The rest of the strikes for continuous feel\n    while (i < max) {\n      strikes.push(i);\n      i += change;\n    }\n\n    // Sort the strikes so the graph can be displayed properly\n    strikes.sort((a, b) => a - b);\n\n    const result = [];\n\n    // Helper DS to fetch colors\n    const colors = new ColorPicker();\n\n    // We want our plot to have N lines (N is the number of contracts in portfolio)\n    for (let id in portfolio) {\n      const contract = portfolio[id];\n      let key =\n        contract.direction + \" \" + contract.type + \" \" + contract.strike;\n      // Adjust title if cash contract\n      if (contract.type === util.CASH) {\n        key =\n          contract.direction +\n          \" \" +\n          contract.type +\n          \"  \" +\n          stockData.currentPrice;\n      }\n\n      result.push({\n        values: [],\n        key,\n        color: colors.getColor(),\n        disabled: true,\n      });\n    }\n\n    // Keey track of min/max for Ydomain\n    let minProfit = Infinity;\n    let maxProfit = -Infinity;\n\n    // For each strike, calculate the payoff and add it to values\n    for (let strike of strikes) {\n      let profitSum = 0;\n      let theoreticalPL = 0;\n      // Keep track of the index we are at\n      let i = 0;\n      for (let id in portfolio) {\n        const contract = portfolio[id];\n\n        // Calculate profit at given Strike (at Expiration)\n        const profitAtStrike = +util\n          .evaluatePayoffFunc(contract, strike, stockData)\n          .toFixed(2);\n\n        // Calculate dateDifference in years, used in theoretical black scholes\n        const dateDiff = -moment().diff(contract.date, \"years\", true);\n\n        const blackScholesValue = util.BlackScholes(\n          contract.type,\n          +strike,\n          +contract.strike,\n          +dateDiff,\n          +stockData.interest,\n          +stockData.volatility\n        );\n\n        // If the contract is Cash\n        if (contract.type === util.CASH) {\n          // Just add the profit at Strike\n          theoreticalPL += profitAtStrike;\n        } else {\n          // Calculate depending on Buy/Sell\n          if (contract.direction === util.BUY) {\n            // Calculate Theoretical P/L\n            theoreticalPL +=\n              (blackScholesValue - contract.price) * contract.amount;\n          } else {\n            theoreticalPL +=\n              (contract.price - blackScholesValue) * contract.amount;\n          }\n        }\n\n        // Update min and max Profits\n        if (profitAtStrike > maxProfit) maxProfit = profitAtStrike;\n\n        if (profitAtStrike < minProfit) minProfit = profitAtStrike;\n\n        // Push the point at the specified strategy\n        result[i].values.push({\n          x: strike,\n          y: profitAtStrike,\n        });\n\n        // Evaluate each contract in portfolio and add it to the y value\n        profitSum += profitAtStrike;\n        i++;\n      }\n\n      // Add the point to the data\n      values.push({ x: strike, y: profitSum });\n      theoretical.push({ x: strike, y: theoreticalPL.toFixed(2) });\n    }\n\n    const Ydomain = [Math.floor(minProfit * 1.2), Math.floor(maxProfit * 1.2)];\n\n    // The overall strategy plot data\n    const strategyData = {\n      values,\n      key: \"Strategy\",\n      color: \"green\",\n      disabled: false,\n    };\n\n    // The Theoretical strategy plot data\n    const strategyTheoretical = {\n      values: theoretical,\n      key: \"Today\",\n      color: \"pink\",\n      disabled: false,\n    };\n\n    result.push(strategyTheoretical);\n\n    result.push(strategyData);\n\n    setData({ data: result, Ydomain });\n  }, [portfolio, stockData, setErrs]);\n\n  // Custom hook used to Reset Portfolio only when liveMode is Toggled\n  useUpdateEffect(() => {\n    // To be run on update\n    setErrors(null);\n    setPortfolio({});\n    setData(null);\n    setOptionData(null);\n  }, [liveMode]);\n\n  // Custom hook used to Reset Porfolio only when optionData changes\n  useUpdateEffect(() => {\n    setPortfolio({});\n  }, [optionData]);\n\n  // Custom hook used to Update/Validate portfolio whenever changed\n  useUpdateEffect(() => {\n    setErrors(null);\n    updateData();\n  }, [portfolio, updateData]);\n\n  // Remove Errors Helper Function\n  const removeErrs = () => {\n    setErrors(null);\n  };\n\n  // Fetch the option Data when Search is Clicked\n  const searchFunc = async (ticker) => {\n    const { data } = await axios.get(\n      `https://finnhub.io/api/v1/stock/option-chain?symbol=${ticker}&token=` +\n        process.env.REACT_APP_API_KEY\n    );\n    setOptionData(data);\n    dispatch(actions.updatePrice(data.lastTradePrice));\n  };\n\n  console.log(\"App Rendered\");\n  console.log(data);\n\n  return (\n    <liveDataContext.Provider value={value}>\n      <Navigation setPortfolio={setPortfolio} />\n      <Container>\n        <Row>\n          <Col md={12}>{liveMode && <Search searchFunc={searchFunc} />}</Col>\n        </Row>\n        <Row>\n          <Col md={12}>\n            <Panel\n              optionData={optionData}\n              portfolio={portfolio}\n              setPortfolio={setPortfolio}\n              visualize={updateData}\n              currentPrice={100}\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col md={3}>\n            <StockData liveMode={liveMode} />\n          </Col>\n          <Col md={9}>\n            {errors ? errors : null}\n            <Payoff data={data} />\n          </Col>\n        </Row>\n      </Container>\n    </liveDataContext.Provider>\n  );\n};\n\nexport default App;\n","import {\n  UPDATE_PRICE,\n  UPDATE_INTEREST,\n  UPDATE_VOLATILITY,\n} from \"../actions/stockData\";\nimport { stockDataInitialState } from \"../../utility/constants\";\n\nexport const initialState = { ...stockDataInitialState };\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case UPDATE_PRICE:\n      return { ...state, currentPrice: action.price };\n    case UPDATE_VOLATILITY:\n      return { ...state, volatility: action.volatility };\n    case UPDATE_INTEREST:\n      return { ...state, interest: action.interest };\n    default:\n      // Will be run initially\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport stockDataReducer from \"./store/reducers/stockData\";\nimport { createStore, combineReducers } from \"redux\";\n\nconst rootReducer = combineReducers({\n  stockData: stockDataReducer,\n});\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n        <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}