{"version":3,"sources":["components/Payoff.js","components/StockData.js","store/actions/stockData.js","utility/Option.js","utility/constants.js","utility/options.js","components/Panel.js","store/reducers/stockData.js","App.js","serviceWorker.js","index.js"],"names":["Payoff","data","errors","d3","remove","console","log","useEffect","myData","Ydomain","nv","newChart","lineChart","margin","left","useInteractiveGuideline","duration","showLegend","showYAxis","showXAxis","xAxis","axisLabel","tickFormat","d","yAxis","forceY","datum","call","windowResize","update","drawChart","className","id","StockData","props","stockData","useSelector","state","dispatch","useDispatch","type","placeholder","value","currentPrice","onChange","e","price","target","volatility","interest","Option","contractName","this","strike","date","direction","amount","evaluatePayoffFunc","option","cost","Math","max","parseInt","min","CND","x","k","exp","sqrt","PI","Contract","removeContract","updateContract","dateDiff","moment","diff","optionType","S","X","T","r","v","d1","d2","BlackScholes","toFixed","style","verticalAlign","aria-label","onClick","aria-hidden","Panel","portfolio","setPortfolio","visualize","property","newPortfolio","Date","toISOString","result","push","key","renderContracts","initialState","initialPortfolio","App","useState","setData","setErrors","fetchData","a","updateData","Object","keys","length","setErrs","strikes","maxStrike","minStrike","Infinity","values","contract","floor","sort","b","color","minProfit","maxProfit","profitSum","i","profitAtStrike","util","y","strategyData","message","class","role","changeData","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.444bc853.chunk.js","sourcesContent":["import React from \"react\";\nimport { useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport * as nv from \"nvd3\";\n\nconst Payoff = ({ data, errors }) => {\n  // Clear the Charts\n  d3.selectAll(\"svg > *\").remove();\n\n  const drawChart = ({ data: myData, Ydomain }) => {\n    /*These lines are all chart setup.  Pick and choose which chart features you want to utilize. */\n    nv.addGraph(() => {\n      const newChart = nv.models\n        .lineChart()\n        .margin({ left: 100 }) //Adjust chart margins to give the x-axis some breathing room.\n        .useInteractiveGuideline(false) //We want nice looking tooltips and a guideline!\n        .duration(1500) //how fast do you want the lines to transition?\n        .showLegend(true) //Show the legend, allowing users to turn on/off line series.\n        .showYAxis(true) //Show the y-axis\n        .showXAxis(true); //Show the x-axis\n\n      newChart.xAxis //Chart x-axis settings\n        .axisLabel(\"Price ($)\")\n        .tickFormat((d) => d);\n\n      newChart.yAxis //Chart y-axis settings\n        .axisLabel(\"Profit ($)\")\n        .tickFormat((d) => d);\n\n      newChart.forceY(Ydomain);\n\n      d3.select(\"#chart svg\") //Select the <svg> element you want to render the chart in.\n        .datum(myData) //Populate the <svg> element with chart data...\n        .call(newChart); //Finally, render the chart!\n\n      // Update the chart when window resizes.\n      nv.utils.windowResize(newChart.update);\n\n      return newChart;\n    });\n  };\n  console.log(data)\n  useEffect(() => {\n    data && drawChart(data);\n  }, [data]);\n\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col-sm-12\">\n          <div className=\"panel panel-primary\">\n            <div className=\"panel-heading\">Option Payoff</div>\n            <div className=\"panel-body\">\n              {!errors ? (\n                <div id=\"chart\">\n                  <svg></svg>\n                </div>\n              ) : (\n                <h1>Enter Valid Data To View Chart</h1>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Payoff;\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as stockActions from \"../store/actions/stockData\";\n\nconst StockData = (props) => {\n  const stockData = useSelector((state) => state.stockData);\n  const dispatch = useDispatch();\n\n  console.log(stockData);\n\n  return (\n    <div className=\"panel panel-primary\">\n      <div className=\"panel-heading\">Underlying stock</div>\n\n      {/* <select id=\"direction\" className=\"form-control\">\n        {data.tickers.map((ticker) => (\n          <option key={ticker.value}>{ticker.value}</option>\n        ))}\n      </select> */}\n\n      <div className=\"panel-body\">\n        <form className=\"form-horizontal\">\n          <div className=\"form-group\">\n            <label className=\"col-sm-5 control-label\">Current price ($)</label>\n            <div className=\"col-sm-7\">\n              <input\n                type=\"number\"\n                placeholder=\"CurrentPrice\"\n                className=\"form-control\"\n                value={stockData.currentPrice}\n                onChange={(e) =>\n                  dispatch(stockActions.updatePrice(e.target.value))\n                }\n              />\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <label className=\"col-sm-5 control-label\">Volatility (%)</label>\n            <div className=\"col-sm-7\">\n              <input\n                type=\"number\"\n                placeholder=\"Volatility\"\n                className=\"form-control\"\n                value={stockData.volatility}\n                onChange={(e) =>\n                  dispatch(stockActions.updateVolatility(e.target.value))\n                }\n              />\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <label className=\"col-sm-5 control-label\">Interest Rate (%)</label>\n            <div className=\"col-sm-7\">\n              <input\n                type=\"number\"\n                placeholder=\"Interest Rate\"\n                className=\"form-control\"\n                value={stockData.interest}\n                onChange={(e) =>\n                  dispatch(stockActions.updateInterest(e.target.value))\n                }\n              />\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default StockData;\n","export const UPDATE_PRICE = \"UPDATE_PRICE\";\nexport const UPDATE_VOLATILITY = \"UPDATE_VOLATILITY\";\nexport const UPDATE_INTEREST = \"UPDATE_INTEREST\";\n\nexport const updatePrice = (price) => {\n  return {\n    type: UPDATE_PRICE,\n    price,\n  };\n};\n\nexport const updateVolatility = (volatility) => {\n  return {\n    type: UPDATE_VOLATILITY,\n    volatility,\n  };\n};\n\nexport const updateInterest = (interest) => {\n  return {\n    type: UPDATE_INTEREST,\n    interest,\n  };\n};\n","import * as cts from \"./constants\";\n\nexport default class Option {\n  constructor(contractName) {\n    this.contractName = contractName;\n    this.strike = \"\";\n    this.date = \"\";\n    this.direction = cts.BUY;\n    this.type = cts.CALL;\n    this.amount = 1;\n  }\n}\n","export const BUY = \"Buy\"\nexport const SELL = \"Sell\"\nexport const CALL = \"Call\"\nexport const PUT = \"Put\"\nexport const CASH = \"Cash\"","import * as cts from \"./constants\";\n\nexport const getPayoffData = (options) => {\n  const maxStrike = getMaxStrike(options);\n  const length = Math.floor(maxStrike * 1.25);\n  const keys = Object.keys(options);\n  const data = new Array(length).fill(0);\n  const labels = [];\n  const cost = getTotalCost(options);\n\n  for (let i = 0; i < data.length; i++) {\n    labels.push(i);\n    fillPayoffArray(data, i, options, keys, cost);\n  }\n\n  return { data, labels };\n};\n\nexport const evaluatePayoffFunc = (option, price) => {\n  const cost = option.price * option.amount;\n  if (option.type === cts.CALL) {\n    // A call Option\n    if (option.direction === cts.BUY) {\n      // Long Call\n      return (\n        Math.max(price - parseInt(option.strike), 0) * option.amount - cost\n      );\n    }\n    // Short Call\n    return Math.min(0, option.strike - price) * option.amount + cost;\n  } else if (option.type === cts.PUT) {\n    // A Put Option\n    if (option.direction === cts.BUY) {\n      // Long Put\n      return Math.max(parseInt(option.strike) - price, 0) * option.amount - cost;\n    }\n    // Short Put\n    return Math.min(0, price - option.strike) * option.amount + cost\n  } else if (option.type === cts.CASH) {\n    // Stock \n    if (option.direction === cts.BUY) {\n      // Long Stock\n      return (price - option.strike) * option.amount;\n    }\n    // Short Stock\n    return (option.strike - price) * option.amount;\n  }\n};\n\nexport const getMaxStrike = (options) => {\n  const keys = Object.keys(options);\n  let max = 0;\n  keys.forEach((key) => {\n    if (options[key].strike > max) {\n      max = options[key].strike;\n    }\n  });\n  return max;\n};\n\nconst fillPayoffArray = (matrix, index, options, keys, cost) => {\n  for (let i = 0; i < keys.length; i++) {\n    matrix[index] += evaluatePayoffFunc(options[keys[i]], index) - cost;\n  }\n};\n\nconst getTotalCost = (options) => {\n  const keys = Object.keys(options);\n  let cost = 0;\n  keys.forEach((key) => {\n    if (options[key].contractName.includes(\"SHORT\")) {\n      cost -= options[key].bid * options[key].amount;\n    } else {\n      cost += options[key].ask * options[key].amount;\n    }\n  });\n  return cost;\n};\n\n/* Idea behind displaying the graph\n\n 1. Get the Critical X values in the graph\n 2. Evaluate the critical X values and add them to the proper format\n 3. Update the state and render the result\n\n 1. How to find critical x values\n  - x = 0 will always be a critical value\n  - x = strike prices will always be c.v\n  - x = maxStrike * 1.2 will always be critical value\n\n2. We have defined a evaluatePayoffFunc above and use it in all critical points\n\n */\n\n/*\n  S = Current Stock Price\n  X = Exercise Price (Strike)\n  r = Short-term risk free interest rate\n  T = Time remaining to the expiration Date (in years)\n  v = Standard deviation of stock price (implied volatility)\n */\n\nexport function BlackScholes(optionType, S, X, T, r, v) {\n  var d1 = (Math.log(S / X) + (r + (v * v) / 2) * T) / (v * Math.sqrt(T));\n  var d2 = d1 - v * Math.sqrt(T);\n  if (optionType === cts.CALL) {\n    return S * CND(d1) - X * Math.exp(-r * T) * CND(d2);\n  } else {\n    return X * Math.exp(-r * T) * CND(-d2) - S * CND(-d1);\n  }\n}\n\n/* The cummulative Normal distribution function: */\nfunction CND(x) {\n  if (x < 0) {\n    return 1 - CND(-x);\n  } else {\n    let k = 1 / (1 + 0.2316419 * x);\n    return (\n      1 -\n      (Math.exp((-x * x) / 2) / Math.sqrt(2 * Math.PI)) *\n        k *\n        (0.31938153 +\n          k *\n            (-0.356563782 +\n              k * (1.781477937 + k * (-1.821255978 + k * 1.330274429))))\n    );\n  }\n}\n","import React, { useEffect } from \"react\";\nimport Option from \"../utility/Option\";\nimport { BlackScholes } from \"../utility\";\nimport { useSelector } from \"react-redux\";\nimport moment from \"moment\";\n\nconst Contract = (props) => {\n  const { removeContract, data, updateContract, currentPrice } = props;\n  const stockData = useSelector((state) => state.stockData);\n\n  const dateDiff = -moment().diff(data.date, \"years\", true);\n\n  // Calculate the price based on Black-Scholes model\n  const price = BlackScholes(\n    data.type,\n    +stockData.currentPrice,\n    +data.strike,\n    dateDiff,\n    +stockData.interest,\n    +stockData.volatility\n  ).toFixed(2);\n\n  // Update the price every time it changes\n  useEffect(() => {\n    updateContract(data.contractName, \"price\", price);\n  }, [price]);\n\n  return (\n    <tr>\n      <td>\n        <select\n          id=\"direction\"\n          className=\"form-control\"\n          onChange={(e) =>\n            updateContract(data.contractName, \"direction\", e.target.value)\n          }\n        >\n          <option>Buy</option>\n          <option>Sell</option>\n        </select>\n      </td>\n      <td>\n        <input\n          type=\"number\"\n          placeholder=\"Amount\"\n          className=\"form-control form-control-inline\"\n          onChange={(e) =>\n            updateContract(data.contractName, \"amount\", e.target.value)\n          }\n          value={data.amount}\n        />\n      </td>\n      <td>\n        <select\n          className=\"form-control\"\n          onChange={(e) =>\n            updateContract(data.contractName, \"type\", e.target.value)\n          }\n        >\n          <option>Call</option>\n          <option>Put</option>\n          <option>Cash</option>\n        </select>\n      </td>\n      <td>\n        <input\n          type=\"number\"\n          placeholder=\"Strike\"\n          className=\"form-control form-control-inline\"\n          onChange={(e) =>\n            updateContract(data.contractName, \"strike\", e.target.value)\n          }\n          value={data.strike}\n        />\n      </td>\n      <td>\n        <input\n          type=\"date\"\n          placeholder=\"Expiry\"\n          className=\"form-control form-control-inline\"\n          onChange={(e) =>\n            updateContract(data.contractName, \"date\", e.target.value)\n          }\n          value={data.date}\n        />\n      </td>\n      <td style={{ verticalAlign: \"middle\" }}>\n        {console.log(data.type, +currentPrice, +data.strike)}\n        <b>{price}</b>\n      </td>\n      <td style={{ verticalAlign: \"middle\" }}>\n        <b>1.00</b>\n      </td>\n      <td style={{ verticalAlign: \"middle\" }}>\n        <button\n          type=\"button\"\n          aria-label=\"Left Align\"\n          className=\"btn btn-danger btn-s\"\n          onClick={() => removeContract(data.contractName)}\n        >\n          <span aria-hidden=\"true\">Remove</span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n\nconst DUMMY_DATA = [1, 2, 3, 4];\n\nconst Panel = (props) => {\n  const { portfolio, setPortfolio, visualize, currentPrice } = props;\n\n  const addOption = () => {\n    const newPortfolio = { ...portfolio };\n    const id = new Date().toISOString();\n    newPortfolio[id] = new Option(id);\n    setPortfolio(newPortfolio);\n  };\n\n  const renderContracts = () => {\n    const result = [];\n    for (let id in portfolio) {\n      result.push(\n        <Contract\n          removeContract={removeContract}\n          updateContract={updateContract}\n          currentPrice={currentPrice}\n          data={portfolio[id]}\n          key={id}\n        />\n      );\n    }\n    return result;\n  };\n\n  const updateContract = (id, property, value) => {\n    const newPortfolio = { ...portfolio };\n    newPortfolio[id][property] = value;\n    setPortfolio(newPortfolio);\n  };\n\n  const removeContract = (id) => {\n    const newPortfolio = { ...portfolio };\n    delete newPortfolio[id];\n    setPortfolio(newPortfolio);\n  };\n\n  return (\n    <div className=\"panel panel-primary\">\n      <div className=\"panel-heading\">Panel</div>\n      <div className=\"panel-body\">\n        <table className=\"table table-condensed\">\n          <thead>\n            <tr>\n              <th>Direction</th>\n              <th>Amount</th>\n              <th>Kind</th>\n              <th>Strike</th>\n              <th>Expiry</th>\n              <th>Price</th>\n              <th>\n                <button\n                  type=\"submit\"\n                  className=\"btn btn-success btn-xs\"\n                  onClick={addOption}\n                >\n                  Add Leg\n                </button>\n              </th>\n            </tr>\n          </thead>\n          <tbody>{renderContracts()}</tbody>\n        </table>\n        <div className=\"pull-right\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-success btn-xs\"\n            onClick={visualize}\n          >\n            Generate Payoff\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Panel;\n","import {\n  UPDATE_PRICE,\n  UPDATE_INTEREST,\n  UPDATE_VOLATILITY,\n} from \"../actions/stockData\";\n\nconst initialState = {\n  currentPrice: \"1300\",\n  volatility: \"0.2\",\n  interest: \"0.05\",\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case UPDATE_PRICE:\n      return { ...state, currentPrice: action.price };\n    case UPDATE_VOLATILITY:\n      return { ...state, volatility: action.volatility };\n    case UPDATE_INTEREST:\n      return { ...state, interest: action.interest };\n  }\n\n  // Will be run initially\n  return state;\n};\n","import React, { useEffect, useState } from \"react\";\nimport Payoff from \"./components/Payoff\";\nimport \"./App.css\";\nimport StockData from \"./components/StockData\";\nimport Panel from \"./components/Panel\";\nimport * as util from \"./utility\";\nimport { Provider, useSelector } from \"react-redux\";\nimport Navigation from \"./components/Navigation\";\nimport moment from \"moment\";\nimport stockData from \"./store/reducers/stockData\";\n\n// const optionData = await axios.get(\n//   \"https://finnhub.io/api/v1/stock/option-chain?symbol=AAPL&token=\" +\n//     process.env.REACT_APP_API_KEY\n// );\n\nconst initialPortfolio = {\n  \"2020-08-12T19:58:01.033Z\": {\n    amount: 1,\n    contractName: \"2020-08-12T19:58:01.033Z\",\n    date: \"2020-08-12\",\n    direction: \"Buy\",\n    price: \"196.26\",\n    strike: \"1200\",\n    type: \"Call\",\n  },\n};\n\nconst App = () => {\n  const [portfolio, setPortfolio] = useState(initialPortfolio);\n  const [data, setData] = useState(null);\n  const [errors, setErrors] = useState(null);\n  const [tickers, setTickers] = useState([{ value: \"Select a Ticker Symbol\" }]);\n  const stockData = useSelector((state) => state.stockData);\n\n  const fetchData = async () => {\n    // const data = await util.getTickerSymbols();\n    // data.shift({ value: \"Select a Ticker Symbol\" });\n    // const data2 = data.slice(data.length / 2);\n    // console.log(data2)\n    // console.log(data)\n    // setTickers(data);\n  };\n\n  const updateData = () => {\n    if (Object.keys(portfolio).length === 0)\n      return setErrs(\"Add contracts to Visualize\");\n\n    // Validate Stock Price\n    if (+stockData.currentPrice <= 0)\n      return setErrs(\"Please Enter a Valid Stock Price\");\n\n    // Validate Interest\n    if (+stockData.interest <= 0)\n      return setErrs(\"Please Enter a Valid Interest Rate\");\n\n    const strikes = [];\n    let maxStrike = 0;\n    let minStrike = Infinity;\n\n    const values = [];\n\n    // Get the strikes to plot\n    for (let id in portfolio) {\n      const contract = portfolio[id];\n      const strike = +contract.strike;\n      const date = contract.date;\n      const amount = contract.amount;\n\n      // Validate Strike prices\n      if (strike <= 0) return setErrs(\"Please Enter A Valid Strike Price\");\n\n      // Validate Amount\n      if (amount <= 0) return setErrs(\"Please Enter a Valid Amount\");\n\n      // Validate the Date (Check if it is defined and in the future)\n      if (!date || moment().diff(date) > 0)\n        return setErrs(\"Please Enter a Valid Date\");\n\n      // Apply To Fixed\n      strikes.push(strike.toFixed(2));\n\n      // Update the maxStrike\n      if (strike > maxStrike) maxStrike = strike;\n      if (strike < minStrike) minStrike = strike;\n    }\n\n    // Add domain limits\n    strikes.push(Math.floor(maxStrike * 1.2));\n    strikes.push(Math.floor(minStrike * 0.8));\n\n    // Sort the strikes so the graph can be displayed properly\n    strikes.sort((a, b) => a - b);\n\n    const result = [];\n\n    // We want our plot to have N lines (N is the number of contracts in portfolio)\n    for (let id in portfolio) {\n      const contract = portfolio[id];\n      const key =\n        contract.direction + \" \" + contract.type + \" \" + contract.strike;\n      result.push({\n        values: [],\n        key,\n        color: \"blue\",\n      });\n    }\n\n    // Keey track of min/max for Ydomain\n    let minProfit = Infinity;\n    let maxProfit = -Infinity;\n\n    // For each strike, calculate the payoff and add it to values\n    for (let strike of strikes) {\n      let profitSum = 0;\n      // Keep track of the index we are at\n      let i = 0;\n      for (let id in portfolio) {\n        const contract = portfolio[id];\n\n        // Calculate profit at given Strike\n        const profitAtStrike = +util\n          .evaluatePayoffFunc(contract, strike)\n          .toFixed(2);\n\n        // Update min and max Profits\n        if (profitAtStrike > maxProfit) maxProfit = profitAtStrike;\n\n        if (profitAtStrike < minProfit) minProfit = profitAtStrike;\n\n        // Push the point at the specified strategy\n        result[i].values.push({\n          x: strike,\n          y: profitAtStrike,\n        });\n\n        // Evaluate each contract in portfolio and add it to the y value\n        profitSum += profitAtStrike;\n        i++;\n      }\n\n      // Add the point to the data\n      values.push({ x: strike, y: profitSum });\n    }\n\n    const Ydomain = [Math.floor(minProfit * 1.2), Math.floor(maxProfit * 1.2)];\n\n    // The overall strategy plot data\n    const strategyData = {\n      values,\n      key: \"Strategy\",\n      color: \"green\",\n    };\n\n    // Add the overall strategy data to the end if there are two or more contracts\n    if (result.length >= 2) {\n      result.push(strategyData);\n    }\n\n    setData({ data: result, Ydomain });\n  };\n\n  useEffect(() => {\n    setErrors(null);\n    updateData();\n  }, [portfolio]);\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const setErrs = (message) => {\n    setErrors(\n      <div class=\"alert alert-danger\" role=\"alert\">\n        {message}\n      </div>\n    );\n  };\n\n  // console.log(data);\n  // console.log(portfolio);\n\n  return (\n    <>\n      {/* <Navigation /> */}\n      <div className=\"container\">\n        <StockData />\n        <Panel\n          portfolio={portfolio}\n          setPortfolio={setPortfolio}\n          visualize={updateData}\n          currentPrice={100}\n        />\n        {errors}\n        <Payoff data={data} changeData={setData} errors={errors} />\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport stockDataReducer from \"./store/reducers/stockData\";\nimport { createStore, combineReducers } from \"redux\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst rootReducer = combineReducers({\n  stockData: stockDataReducer,\n});\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}