{"version":3,"sources":["components/Payoff.js","store/actions/stockData.js","components/StockData.js","utility/constants.js","utility/Option.js","utility/options.js","utility/DS/ColorPicker.js","components/Panel.js","context/liveData.js","components/Navigation.js","components/Search.js","App.js","store/reducers/stockData.js","index.js"],"names":["Payoff","data","errors","d3","remove","useEffect","myData","Ydomain","nv","newChart","lineChart","margin","left","useInteractiveGuideline","duration","showLegend","showYAxis","showXAxis","xAxis","axisLabel","tickFormat","d","yAxis","forceY","datum","call","windowResize","update","drawChart","className","id","updatePrice","price","type","StockData","liveMode","stockData","useSelector","state","dispatch","useDispatch","placeholder","value","currentPrice","disabled","onChange","e","stockActions","target","volatility","interest","initialPortfolio","amount","contractName","date","direction","strike","Option","this","evaluatePayoffFunc","option","cost","Math","max","parseInt","min","BlackScholes","optionType","S","X","T","r","v","d1","log","sqrt","d2","CND","exp","x","k","PI","ColorPicker","colors","index","result","length","Contract","props","removeContract","optionData","updateContract","useState","expirationDates","setExpirationDates","selectedDate","setSelectedDate","strikePrices","setStrikePrices","selectedStrike","setSelectedStrike","selectedDirection","setSelectedDirection","selectedType","setSelectedType","dateDiff","moment","diff","setPrice","toFixed","map","item","expirationDate","apiContract","find","toUpperCase","contract","options","ask","bid","strikesAtDate","cashContract","class","isNaN","style","verticalAlign","aria-label","onClick","aria-hidden","Panel","portfolio","setPortfolio","visualize","property","newPortfolio","console","Date","toISOString","push","key","renderContracts","liveDataContext","React","createContext","setLiveMode","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","navbar","marginBottom","MenuAppBar","classes","useContext","AppBar","position","Toolbar","IconButton","edge","color","Typography","variant","FormGroup","FormControlLabel","control","Switch","checked","prev","label","height","widht","Search","searchFunc","inputValue","setInputValue","Container","Row","Col","md","Autocomplete","symbols","getOptionLabel","displaySymbol","description","filterOptions","query","filter","o","includes","renderInput","params","TextField","noOptionsText","Button","App","util","setData","setErrors","setOptionData","setErrs","useCallback","message","role","data-dismiss","removeErrs","updateData","Object","keys","strikes","maxStrike","minStrike","Infinity","values","theoretical","floor","sort","a","b","getColor","minProfit","maxProfit","profitSum","theoreticalPL","i","profitAtStrike","blackScholesValue","y","strategyData","strategyTheoretical","ticker","axios","get","process","REACT_APP_API_KEY","actions","lastTradePrice","Provider","changeData","initialState","rootReducer","combineReducers","action","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.646145cb.chunk.js","sourcesContent":["import React from \"react\";\nimport { useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport * as nv from \"nvd3\";\n\nconst Payoff = ({ data, errors }) => {\n  // Clear the Charts\n  d3.selectAll(\"svg > *\").remove();\n\n  const drawChart = ({ data: myData, Ydomain }) => {\n    /*These lines are all chart setup.  Pick and choose which chart features you want to utilize. */\n    nv.addGraph(() => {\n      const newChart = nv.models\n        .lineChart()\n        .margin({ left: 100 }) //Adjust chart margins to give the x-axis some breathing room.\n        .useInteractiveGuideline(false) //We want nice looking tooltips and a guideline!\n        .duration(1500) //how fast do you want the lines to transition?\n        .showLegend(true) //Show the legend, allowing users to turn on/off line series.\n        .showYAxis(true) //Show the y-axis\n        .showXAxis(true); //Show the x-axis\n\n      newChart.xAxis //Chart x-axis settings\n        .axisLabel(\"Price ($)\")\n        .tickFormat((d) => d);\n\n      newChart.yAxis //Chart y-axis settings\n        .axisLabel(\"Profit ($)\")\n        .tickFormat((d) => d);\n\n      newChart.forceY(Ydomain);\n\n      d3.select(\"#chart svg\") //Select the <svg> element you want to render the chart in.\n        .datum(myData) //Populate the <svg> element with chart data...\n        .call(newChart); //Finally, render the chart!\n\n      // Update the chart when window resizes.\n      nv.utils.windowResize(newChart.update);\n\n      return newChart;\n    });\n  };\n\n  useEffect(() => {\n    data && drawChart(data);\n  }, [data]);\n\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col-sm-12\">\n          <div className=\"panel panel-primary\">\n            <div className=\"panel-heading\">Option Payoff</div>\n            <div className=\"panel-body\">\n              {!errors ? (\n                <div id=\"chart\">\n                  <svg></svg>\n                </div>\n              ) : (\n                <h3>Enter Valid Data To View Chart</h3>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Payoff;\n","export const UPDATE_PRICE = \"UPDATE_PRICE\";\nexport const UPDATE_VOLATILITY = \"UPDATE_VOLATILITY\";\nexport const UPDATE_INTEREST = \"UPDATE_INTEREST\";\n\nexport const updatePrice = (price) => {\n  return {\n    type: UPDATE_PRICE,\n    price,\n  };\n};\n\nexport const updateVolatility = (volatility) => {\n  return {\n    type: UPDATE_VOLATILITY,\n    volatility,\n  };\n};\n\nexport const updateInterest = (interest) => {\n  return {\n    type: UPDATE_INTEREST,\n    interest,\n  };\n};\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as stockActions from \"../store/actions/stockData\";\n\nconst StockData = ({ liveMode }) => {\n  const stockData = useSelector((state) => state.stockData);\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"panel panel-primary\">\n      <div className=\"panel-heading\">Underlying stock</div>\n      <div className=\"panel-body\">\n        <form className=\"form-horizontal\">\n          <div className=\"form-group\">\n            <label className=\"col-sm-5 control-label\">Current price ($)</label>\n            <div className=\"col-sm-7\">\n              <input\n                type=\"number\"\n                placeholder=\"CurrentPrice\"\n                className=\"form-control\"\n                value={stockData.currentPrice}\n                disabled={liveMode}\n                onChange={(e) =>\n                  dispatch(stockActions.updatePrice(e.target.value))\n                }\n              />\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <label className=\"col-sm-5 control-label\">Volatility (%)</label>\n            <div className=\"col-sm-7\">\n              <input\n                type=\"number\"\n                placeholder=\"Volatility\"\n                className=\"form-control\"\n                value={stockData.volatility}\n                onChange={(e) =>\n                  dispatch(stockActions.updateVolatility(e.target.value))\n                }\n              />\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <label className=\"col-sm-5 control-label\">Interest Rate (%)</label>\n            <div className=\"col-sm-7\">\n              <input\n                type=\"number\"\n                placeholder=\"Interest Rate\"\n                className=\"form-control\"\n                value={stockData.interest}\n                onChange={(e) =>\n                  dispatch(stockActions.updateInterest(e.target.value))\n                }\n              />\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default StockData;\n","export const BUY = \"Buy\";\nexport const SELL = \"Sell\";\nexport const CALL = \"Call\";\nexport const PUT = \"Put\";\nexport const CASH = \"Cash\";\n\nexport const initialPortfolio = {\n  \"2020-08-12T19:58:01.033Z\": {\n    amount: 1,\n    contractName: \"2020-08-12T19:58:01.033Z\",\n    date: \"2020-08-12\",\n    direction: \"Buy\",\n    price: \"196.26\",\n    strike: \"1200\",\n    type: \"Call\",\n  },\n};\n","import * as cts from \"./constants\";\n\n// Option definition class\nexport default class Option {\n  constructor(contractName) {\n    this.contractName = contractName;\n    this.strike = \"\";\n    this.date = \"\";\n    this.direction = cts.BUY;\n    this.type = cts.CALL;\n    this.amount = 1;\n  }\n}\n","import * as cts from \"./constants\";\n\n// Takes in option object and evaluates the payoff given the input price\nexport const evaluatePayoffFunc = (option, price, stockData) => {\n  const cost = option.price * option.amount;\n  if (option.type === cts.CALL) {\n    // A call Option\n    if (option.direction === cts.BUY) {\n      // Long Call\n      return (\n        Math.max(price - parseInt(option.strike), 0) * option.amount - cost\n      );\n    }\n    // Short Call\n    return Math.min(0, option.strike - price) * option.amount + cost;\n  } else if (option.type === cts.PUT) {\n    // A Put Option\n    if (option.direction === cts.BUY) {\n      // Long Put\n      return (\n        Math.max(parseInt(option.strike) - price, 0) * option.amount - cost\n      );\n    }\n    // Short Put\n    return Math.min(0, price - option.strike) * option.amount + cost;\n  } else if (option.type === cts.CASH) {\n    // Stock\n    if (option.direction === cts.BUY) {\n      // Long Stock\n      return (price - stockData.currentPrice) * option.amount;\n    }\n    // Short Stock\n    return (stockData.currentPrice - price) * option.amount;\n  }\n};\n\n/*\n  S = Current Stock Price\n  X = Exercise Price (Strike)\n  r = Short-term risk free interest rate\n  T = Time remaining to the expiration Date (in years)\n  v = Standard deviation of stock price (implied volatility)\n */\n\nexport function BlackScholes(optionType, S, X, T, r, v) {\n  var d1 = (Math.log(S / X) + (r + (v * v) / 2) * T) / (v * Math.sqrt(T));\n  var d2 = d1 - v * Math.sqrt(T);\n  if (optionType === cts.CALL) {\n    return S * CND(d1) - X * Math.exp(-r * T) * CND(d2);\n  } else {\n    return X * Math.exp(-r * T) * CND(-d2) - S * CND(-d1);\n  }\n}\n\n/* The cummulative Normal distribution function: */\nfunction CND(x) {\n  if (x < 0) {\n    return 1 - CND(-x);\n  } else {\n    let k = 1 / (1 + 0.2316419 * x);\n    return (\n      1 -\n      (Math.exp((-x * x) / 2) / Math.sqrt(2 * Math.PI)) *\n        k *\n        (0.31938153 +\n          k *\n            (-0.356563782 +\n              k * (1.781477937 + k * (-1.821255978 + k * 1.330274429))))\n    );\n  }\n}\n","// Color Picker Structure to help select color on graph\nexport default class ColorPicker {\n    // Available colors, more can be added\n    colors = [\n        \"blue\",\n        \"red\",\n        \"yellow\",\n        \"purple\",\n        \"orange\",\n        \"black\",\n    ]\n\n    constructor() {\n        this.index = 0;\n    }\n\n    // Get the Next Color\n    getColor(){\n        const result =  this.colors[this.index];\n        // Adjust the index;\n        if(this.index >= this.colors.length){\n            // We have reached the end reset to zero\n            this.index = 0;\n        }else{\n            // Not at end just add one to index\n            this.index++;\n        }\n        return result;\n    }\n}","import React, { useEffect, useState } from \"react\";\nimport Option from \"../utility/Option\";\nimport { BlackScholes, CASH } from \"../utility\";\nimport { useSelector } from \"react-redux\";\nimport moment from \"moment\";\nimport * as util from \"../utility\";\n\nconst Contract = (props) => {\n  const { removeContract, data, optionData } = props;\n  const { updateContract } = props;\n\n  /*\n   If optionData is defined then the strike prices must adjust to the\n   Expiration date\n   */\n  const [expirationDates, setExpirationDates] = useState([]);\n  const [selectedDate, setSelectedDate] = useState(null);\n\n  const [strikePrices, setStrikePrices] = useState([\n    \"Please Select Expiration Date\",\n  ]);\n  const [selectedStrike, setSelectedStrike] = useState();\n  const [selectedDirection, setSelectedDirection] = useState(\"Buy\");\n  const [selectedType, setSelectedType] = useState(\"Call\");\n\n  // Stock data from redux\n  const stockData = useSelector((state) => state.stockData);\n\n  // Calculate dateDifference in years, used in theoretical black scholes\n  const dateDiff = -moment().diff(data.date, \"years\", true);\n\n  // Calculate the price based on Black-Scholes model\n  const [price, setPrice] = useState();\n\n  // Update the current price every time something changes\n  useEffect(() => {\n    if (optionData) {\n    } else if (!optionData && selectedType !== CASH) {\n      setPrice(\n        BlackScholes(\n          data.type,\n          +stockData.currentPrice,\n          +data.strike,\n          dateDiff,\n          +stockData.interest,\n          +stockData.volatility\n        ).toFixed(2)\n      );\n    }\n  });\n\n  // Update the price every time it changes\n  useEffect(() => {\n    updateContract(data.contractName, \"price\", price);\n  }, [price]);\n\n  // Set expiration Dates when component mounts\n  useEffect(() => {\n    if (optionData) {\n      const expirationDates = optionData.data.map(\n        (item) => item.expirationDate\n      );\n      setExpirationDates(expirationDates);\n    }\n  }, []);\n\n  // Update strike and price at change\n  useEffect(() => {\n    if (optionData) {\n      // Find the element with same date\n      const apiContract = optionData.data.find(\n        (item) => item.expirationDate === selectedDate\n      );\n\n      if (!apiContract) return;\n\n      // Find the type of option this is\n      const type = data.type.toUpperCase();\n\n      // Extract the contracts given the date\n      const contractsAtDate = apiContract.options[type];\n\n      // Find the contract with the selected Strike\n      const contract = contractsAtDate.find(\n        (item) => +item.strike === +selectedStrike\n      );\n\n      // Set the price depending if we are short or long\n      if (data.direction === \"Buy\") {\n        setPrice(contract.ask);\n      } else {\n        setPrice(contract.bid);\n      }\n    }\n\n    updateContract(data.contractName, \"strike\", selectedStrike);\n  }, [selectedStrike, setPrice]);\n\n  useEffect(() => {\n    if (optionData) {\n      // Find the element with same date\n      const apiContract = optionData.data.find(\n        (item) => item.expirationDate === selectedDate\n      );\n\n      // If none found return\n      if (!apiContract) return;\n\n      // Find the type of option this is\n      const type = data.type.toUpperCase();\n\n      // Extract the contracts given the date\n      const contractsAtDate = apiContract.options[type];\n\n      // Make an array of strikes at the current date\n      const strikesAtDate = contractsAtDate.map((item) => item.strike);\n\n      // Update strikeprices\n      setStrikePrices(strikesAtDate);\n    }\n\n    updateContract(data.contractName, \"date\", selectedDate);\n  }, [selectedDate]);\n\n  // Update Direction\n  useEffect(() => {\n    updateContract(data.contractName, \"direction\", selectedDirection);\n  }, [selectedDirection]);\n\n  // Update type\n  useEffect(() => {\n    updateContract(data.contractName, \"type\", selectedType);\n\n    // If we just changed to cash\n    if (selectedType === util.CASH) {\n      // Set Debit/Credit equal to the stock price\n      setPrice(stockData.currentPrice);\n    }\n  }, [selectedType]);\n\n  const cashContract = selectedType === util.CASH;\n\n  return (\n    <tr>\n      {/* Direction */}\n      <td>\n        <select\n          id=\"direction\"\n          className=\"form-control\"\n          value={selectedDirection}\n          onChange={(e) => setSelectedDirection(e.target.value)}\n        >\n          <option>Buy</option>\n          <option>Sell</option>\n        </select>\n      </td>\n      {/* Amount */}\n      <td>\n        <input\n          type=\"number\"\n          placeholder=\"Amount\"\n          className=\"form-control form-control-inline\"\n          onChange={(e) =>\n            updateContract(data.contractName, \"amount\", e.target.value)\n          }\n          value={data.amount}\n        />\n      </td>\n      {/* Kind */}\n      <td>\n        <select\n          className=\"form-control\"\n          onChange={(e) => setSelectedType(e.target.value)}\n          value={selectedType}\n        >\n          <option>Call</option>\n          <option>Put</option>\n          <option>Cash</option>\n        </select>\n      </td>\n      {/* Strike Price */}\n      <td>\n        {!cashContract &&\n          (optionData ? (\n            <div class=\"form-group\">\n              <select\n                class=\"form-control\"\n                id=\"exampleFormControlSelect1\"\n                onChange={(e) => setSelectedStrike(e.target.value)}\n              >\n                {strikePrices.map((price) => (\n                  <option>{isNaN(price) ? null : price}</option>\n                ))}\n              </select>\n            </div>\n          ) : (\n            <input\n              type=\"number\"\n              placeholder=\"Strike\"\n              className=\"form-control form-control-inline\"\n              onChange={(e) =>\n                updateContract(data.contractName, \"strike\", e.target.value)\n              }\n              value={data.strike}\n            />\n          ))}\n      </td>\n      {/* Expiry Date */}\n      <td>\n        {!cashContract &&\n          (!optionData ? (\n            <input\n              type=\"date\"\n              placeholder=\"Expiry\"\n              className=\"form-control form-control-inline\"\n              onChange={(e) =>\n                updateContract(data.contractName, \"date\", e.target.value)\n              }\n              value={data.date ? data.date : \"\"}\n            />\n          ) : (\n            <div class=\"form-group\">\n              <select\n                class=\"form-control\"\n                id=\"exampleFormControlSelect1\"\n                onChange={(e) => setSelectedDate(e.target.value)}\n              >\n                {expirationDates.map((date) => (\n                  <option>{date}</option>\n                ))}\n              </select>\n            </div>\n          ))}\n      </td>\n      {/* Contract Price */}\n      <td style={{ verticalAlign: \"middle\" }}>\n        <b>{price}</b>\n      </td>\n      {/* Remove Button */}\n      <td style={{ verticalAlign: \"middle\" }}>\n        <button\n          type=\"button\"\n          aria-label=\"Left Align\"\n          className=\"btn btn-danger btn-s\"\n          onClick={() => removeContract(data.contractName)}\n        >\n          <span aria-hidden=\"true\">Remove</span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n\nconst Panel = (props) => {\n  const { portfolio, setPortfolio, visualize, optionData } = props;\n\n  const addContract = () => {\n    const newPortfolio = { ...portfolio };\n    const id = new Date().toISOString();\n    newPortfolio[id] = new Option(id);\n    setPortfolio(newPortfolio);\n  };\n\n  const renderContracts = () => {\n    const result = [];\n    for (let id in portfolio) {\n      result.push(\n        <Contract\n          optionData={optionData}\n          removeContract={removeContract}\n          updateContract={updateContract}\n          data={portfolio[id]}\n          key={id}\n        />\n      );\n    }\n    return result;\n  };\n\n  const updateContract = (id, property, value) => {\n    const newPortfolio = { ...portfolio };\n    newPortfolio[id][property] = value;\n    setPortfolio(newPortfolio);\n  };\n\n  const removeContract = (id) => {\n    const newPortfolio = { ...portfolio };\n    delete newPortfolio[id];\n    setPortfolio(newPortfolio);\n  };\n\n  console.log(\"Panel Rendered\");\n\n  return (\n    <div className=\"panel panel-primary\">\n      <div className=\"panel-heading\">Option Portfolio</div>\n      <div className=\"panel-body\">\n        <table className=\"table table-condensed\">\n          <thead>\n            <tr>\n              <th>Direction</th>\n              <th>Amount</th>\n              <th>Kind</th>\n              <th>Strike</th>\n              <th>Expiry</th>\n              <th>Debit/Credit</th>\n              <th>\n                <button\n                  type=\"submit\"\n                  className=\"btn btn-success btn-s\"\n                  onClick={addContract}\n                >\n                  Add Leg\n                </button>\n              </th>\n            </tr>\n          </thead>\n          <tbody>{renderContracts()}</tbody>\n        </table>\n        <div className=\"pull-right\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-success btn-s\"\n            onClick={visualize}\n          >\n            Generate Payoff\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Panel;\n","import React from \"react\";\n\nconst defaultValue = {\n  liveMode: false,\n  setLiveMode: () => {},\n};\n\nexport const liveDataContext = React.createContext(defaultValue);\n","import React, { useContext } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { liveDataContext } from \"../context/liveData\";\nimport Switch from \"@material-ui/core/Switch\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  navbar: {\n    marginBottom: \"40px\",\n  },\n}));\n\nexport default function MenuAppBar() {\n  const classes = useStyles();\n  const { liveMode, setLiveMode } = useContext(liveDataContext);\n\n  return (\n    <AppBar position=\"static\" className={classes.navbar}>\n      <Toolbar>\n        <IconButton\n          edge=\"start\"\n          className={classes.menuButton}\n          color=\"inherit\"\n          aria-label=\"menu\"\n        >\n          <MenuIcon />\n        </IconButton>\n        <Typography variant=\"h3\" className={classes.title}>\n          Option Strategy Builder\n        </Typography>\n        <FormGroup>\n          <FormControlLabel\n            control={\n              <Switch\n                checked={liveMode}\n                onChange={() => setLiveMode((prev) => !prev)}\n                aria-label=\"live mode switch\"\n              />\n            }\n            label={\"Live Data Mode\"}\n          />\n        </FormGroup>\n      </Toolbar>\n    </AppBar>\n  );\n}\n","import React, { useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport symbols from \"../symbols.json\";\nimport { Button } from \"@material-ui/core\";\nimport { Container, Col, Row } from \"react-bootstrap\";\nimport { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n  item: {\n    // No Effect\n    height: \"100%\",\n    widht: \"100%\",\n  },\n});\n\nconst Search = ({ searchFunc }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n  const classes = useStyles();\n\n  const filterOptions = (options, state) => {\n    // Extract the inputValue\n    const query = state.inputValue.toUpperCase();\n    // Update state\n    setInputValue(query);\n    // If short query return nothing (improves performance)\n    if (query.length <= 1) return [];\n\n    // Filter out the options\n    return options.filter((o) => o.displaySymbol.includes(query));\n  };\n\n  return (\n    <>\n      {/* A Warning message is outputed in console: Fix later */}\n      <Container>\n        <Row>\n          <Col md={10}>\n            <Autocomplete\n              id=\"combo-box-demo\"\n              options={symbols}\n              getOptionLabel={(option) =>\n                option.displaySymbol + \": \" + option.description\n              }\n              filterOptions={(options, state) => filterOptions(options, state)}\n              className={classes.item}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label=\"Search Ticker\"\n                  variant=\"outlined\"\n                />\n              )}\n              noOptionsText={\n                inputValue.length <= 1\n                  ? \"Type a Ticker Symbol\"\n                  : \"No Symbols Found\"\n              }\n            />\n          </Col>\n          <Col md={2}>\n            <Button\n              color=\"primary\"\n              variant=\"contained\"\n              onClick={() => searchFunc(inputValue)}\n              className={classes.item}\n            >\n              Submit\n            </Button>\n          </Col>\n        </Row>\n      </Container>\n    </>\n  );\n};\n\nexport default Search;\n","import React, { useEffect, useState, useCallback } from \"react\";\nimport Payoff from \"./components/Payoff\";\nimport StockData from \"./components/StockData\";\nimport Panel from \"./components/Panel\";\nimport * as util from \"./utility\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Navigation from \"./components/Navigation\";\nimport moment from \"moment\";\nimport { liveDataContext } from \"./context/liveData\";\nimport Search from \"./components/Search\";\nimport axios from \"axios\";\nimport ColorPicker from \"./utility/DS/ColorPicker\";\nimport * as actions from \"./store/actions/stockData\";\nimport { Row, Col, Container } from \"react-bootstrap\";\n\nconst App = () => {\n  const [portfolio, setPortfolio] = useState(util.initialPortfolio);\n  const [data, setData] = useState(null);\n  const [errors, setErrors] = useState(null);\n  const stockData = useSelector((state) => state.stockData);\n  const [liveMode, setLiveMode] = useState(false);\n  const [optionData, setOptionData] = useState();\n  const value = { liveMode, setLiveMode };\n  const dispatch = useDispatch();\n\n  // Set Error Message as JSX\n  const setErrs = useCallback((message) => {\n    setErrors(\n      <div className=\"alert alert-danger \" role=\"alert\">\n        <strong>{message}</strong>\n        <button\n          type=\"button\"\n          className=\"close\"\n          data-dismiss=\"alert\"\n          aria-label=\"Close\"\n          onClick={removeErrs}\n        >\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n    );\n  }, []);\n\n  // Update and Validate User Input Data\n  const updateData = useCallback(() => {\n    // Validate Empty Portfolio\n    if (Object.keys(portfolio).length === 0)\n      return setErrs(\"Add contracts to Visualize\");\n\n    // Validate Stock Price\n    if (+stockData.currentPrice <= 0)\n      return setErrs(\"Please Enter a Valid Stock Price\");\n\n    // Validate Interest\n    if (+stockData.interest <= 0)\n      return setErrs(\"Please Enter a Valid Interest Rate\");\n\n    const strikes = [];\n    let maxStrike = 0;\n    let minStrike = Infinity;\n\n    const values = [];\n    const theoretical = [];\n\n    // Get the strikes to plot\n    for (let id in portfolio) {\n      const contract = portfolio[id];\n      const cashContract = contract.type === util.CASH;\n      const strike = cashContract ? +stockData.currentPrice : +contract.strike;\n      const date = contract.date;\n      const amount = contract.amount;\n\n      // Always Validate Amount\n      if (amount <= 0) return setErrs(\"Please Enter a Valid Amount\");\n\n      // If not a Cash Contract the validate the following fields\n      if (!cashContract) {\n        // Validate Strike prices\n        if (strike <= 0 || isNaN(strike))\n          return setErrs(\"Please Enter A Valid Strike Price\");\n\n        // Validate the Date (Check if it is defined and in the future)\n        if (!date || moment().diff(date) > 0)\n          return setErrs(\"Please Enter a Valid Date\");\n      }\n\n      // Apply To Fixed\n      strikes.push(strike.toFixed(2));\n\n      // Update the maxStrike\n      if (strike > maxStrike) maxStrike = strike;\n      if (strike < minStrike) minStrike = strike;\n    }\n\n    // Add domain limits\n    strikes.push(Math.floor(maxStrike * 1.2));\n    strikes.push(Math.floor(minStrike * 0.8));\n\n    // Sort the strikes so the graph can be displayed properly\n    strikes.sort((a, b) => a - b);\n\n    const result = [];\n\n    // Helper DS to fetch colors\n    const colors = new ColorPicker();\n\n    // We want our plot to have N lines (N is the number of contracts in portfolio)\n    for (let id in portfolio) {\n      const contract = portfolio[id];\n      const key =\n        contract.direction + \" \" + contract.type + \" \" + contract.strike;\n      result.push({\n        values: [],\n        key,\n        color: colors.getColor(),\n      });\n    }\n\n    // Keey track of min/max for Ydomain\n    let minProfit = Infinity;\n    let maxProfit = -Infinity;\n\n    // For each strike, calculate the payoff and add it to values\n    for (let strike of strikes) {\n      let profitSum = 0;\n      let theoreticalPL = 0;\n      // Keep track of the index we are at\n      let i = 0;\n      for (let id in portfolio) {\n        const contract = portfolio[id];\n\n        // Calculate profit at given Strike (at Expiration)\n        const profitAtStrike = +util\n          .evaluatePayoffFunc(contract, strike, stockData)\n          .toFixed(2);\n\n        // Calculate dateDifference in years, used in theoretical black scholes\n        const dateDiff = -moment().diff(contract.date, \"years\", true);\n\n        const blackScholesValue = util.BlackScholes(\n          contract.type,\n          +strike,\n          +contract.strike,\n          +dateDiff,\n          +stockData.interest,\n          +stockData.volatility\n        );\n\n        // Calculate depending on Buy/Sell\n        if (contract.direction === util.BUY) {\n          // Calculate Theoretical P/L\n          theoreticalPL +=\n            (blackScholesValue - contract.price) * contract.amount;\n        } else {\n          theoreticalPL +=\n            (contract.price - blackScholesValue) * contract.amount;\n        }\n\n        // Update min and max Profits\n        if (profitAtStrike > maxProfit) maxProfit = profitAtStrike;\n\n        if (profitAtStrike < minProfit) minProfit = profitAtStrike;\n\n        // Push the point at the specified strategy\n        result[i].values.push({\n          x: strike,\n          y: profitAtStrike,\n        });\n\n        // Evaluate each contract in portfolio and add it to the y value\n        profitSum += profitAtStrike;\n        i++;\n      }\n\n      // Add the point to the data\n      values.push({ x: strike, y: profitSum });\n      theoretical.push({ x: strike, y: theoreticalPL.toFixed(2) });\n    }\n\n    const Ydomain = [Math.floor(minProfit * 1.2), Math.floor(maxProfit * 1.2)];\n\n    // The overall strategy plot data\n    const strategyData = {\n      values,\n      key: \"Strategy\",\n      color: \"green\",\n    };\n\n    // The Theoretical strategy plot data\n    const strategyTheoretical = {\n      values: theoretical,\n      key: \"Today\",\n      color: \"pink\",\n    };\n\n    result.push(strategyTheoretical);\n\n    // Add the overall strategy data to the end if there are two or more contracts\n    if (result.length > 2) {\n      result.push(strategyData);\n    }\n\n    console.log(result, Ydomain);\n\n    setData({ data: result, Ydomain });\n  }, [portfolio, stockData, setErrs]);\n\n  // Reset Portfolio whenever liveMode is Toggled\n  useEffect(() => {\n    setErrors(null);\n    setPortfolio({});\n    setData(null);\n    setOptionData(null);\n  }, [liveMode]);\n\n  // Reset Porfolio whenever we change live stock\n  useEffect(() => {\n    setPortfolio({});\n  }, [optionData]);\n\n  // Update/Validate portfolio whenever changed\n  useEffect(() => {\n    setErrors(null);\n    updateData();\n  }, [portfolio, updateData]);\n\n  // Remove Errors\n  const removeErrs = () => {\n    setErrors(null);\n  };\n\n  // Fetch the option Data when Search is Clicked\n  const searchFunc = async (ticker) => {\n    const { data } = await axios.get(\n      `https://finnhub.io/api/v1/stock/option-chain?symbol=${ticker}&token=` +\n        process.env.REACT_APP_API_KEY\n    );\n    setOptionData(data);\n    dispatch(actions.updatePrice(data.lastTradePrice));\n  };\n\n  console.log(portfolio);\n\n  return (\n    <liveDataContext.Provider value={value}>\n      <Navigation />\n      <Container>\n        <Row>\n          <Col md={12}>{liveMode && <Search searchFunc={searchFunc} />}</Col>\n        </Row>\n        <Row>\n          <Col md={12}>\n            <Panel\n              optionData={optionData}\n              portfolio={portfolio}\n              setPortfolio={setPortfolio}\n              visualize={updateData}\n              currentPrice={100}\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col md={3}>\n            <StockData liveMode={liveMode} />\n          </Col>\n          <Col md={9}>\n            {errors ? errors : null}\n            <Payoff data={data} changeData={setData} errors={errors} />\n          </Col>\n        </Row>\n      </Container>\n    </liveDataContext.Provider>\n  );\n};\n\nexport default App;\n","import {\n  UPDATE_PRICE,\n  UPDATE_INTEREST,\n  UPDATE_VOLATILITY,\n} from \"../actions/stockData\";\n\nconst initialState = {\n  currentPrice: \"1300\",\n  volatility: \"0.2\",\n  interest: \"0.05\",\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case UPDATE_PRICE:\n      return { ...state, currentPrice: action.price };\n    case UPDATE_VOLATILITY:\n      return { ...state, volatility: action.volatility };\n    case UPDATE_INTEREST:\n      return { ...state, interest: action.interest };\n    default:\n      // Will be run initially\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport stockDataReducer from \"./store/reducers/stockData\";\nimport { createStore, combineReducers } from \"redux\";\n\nconst rootReducer = combineReducers({\n  stockData: stockDataReducer,\n});\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n        <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}