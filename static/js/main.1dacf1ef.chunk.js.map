{"version":3,"sources":["components/Payoff.js","store/actions/stockData.js","components/StockData.js","utility/constants.js","utility/Option.js","utility/options.js","utility/DS/ColorPicker.js","hooks/useUpdateEffect.js","components/Panel.js","context/liveData.js","components/Navigation/DropDownBtn.js","components/Navigation/Navigation.js","components/Search.js","components/Error/Error.js","components/SecurityInfo.js","components/Slider.js","components/StockAnyChart.js","components/PayoffHighChart.js","App.js","store/reducers/stockData.js","index.js"],"names":["Payoff","data","d3","remove","useEffect","myData","Ydomain","nv","newChart","lineChart","margin","left","useInteractiveGuideline","showLegend","showYAxis","showXAxis","xAxis","axisLabel","tickFormat","yAxis","forceY","datum","call","windowResize","update","drawChart","className","id","updatePrice","price","type","updateTicker","ticker","updateVolatility","volatility","updateInterest","interest","StockData","liveMode","stockData","useSelector","state","dispatch","useDispatch","placeholder","value","currentPrice","disabled","onChange","e","stockActions","target","BUY","SELL","CALL","PUT","CASH","stockDataInitialState","UNIXToDateString","UNIX_timestamp","a","Date","moment","format","date","d","year","getFullYear","month","getMonth","day","getDate","console","log","c","createDate","initialPortfolio","initialPortfolioId","amount","contractName","direction","strike","getRelativeStrike","impliedVol","N","getLongCondor","firstId","secondId","thirdId","fourthId","getShortCondor","getBullCallSpread","getBearPutSpread","getLongStraddle","getShortStraddle","getLongButterfly","getShortButterfly","Option","this","cts","evaluatePayoffFunc","option","cost","Math","max","parseInt","min","BlackScholes","optionType","S","X","T","r","v","d1","sqrt","d2","CND","exp","x","k","PI","ColorPicker","colors","index","result","length","useUpdateEffect","effect","dependencies","isInitialMount","useRef","current","Contract","props","removeContract","optionData","updateContract","useState","expirationDates","setExpirationDates","selectedDate","setSelectedDate","strikePrices","setStrikePrices","selectedStrike","setSelectedStrike","selectedDirection","setSelectedDirection","selectedType","setSelectedType","dateDiff","diff","setPrice","util","toFixed","map","item","expirationDate","apiContract","find","toUpperCase","contract","options","ask","bid","strikesAtDate","cashContract","class","isNaN","style","verticalAlign","aria-label","onClick","aria-hidden","Panel","portfolio","setPortfolio","visualize","property","newPortfolio","premium","debitcredit","key","calculateTotal","toISOString","push","renderContracts","liveDataContext","React","createContext","setLiveMode","useStyles","makeStyles","theme","root","display","paper","marginRight","spacing","DropDownBtn","open","setOpen","anchorRef","handleClose","event","contains","handleListKeyDown","preventDefault","prevOpen","focus","Button","ref","aria-controls","undefined","aria-haspopup","color","Popper","anchorEl","role","transition","disablePortal","TransitionProps","placement","Grow","transformOrigin","Paper","ClickAwayListener","onClickAway","MenuList","autoFocusItem","onKeyDown","MenuItem","flexGrow","menuButton","title","navbar","marginBottom","position","zIndex","MenuAppBar","classes","useContext","AppBar","Toolbar","IconButton","edge","Typography","variant","FormGroup","FormControlLabel","control","Switch","checked","prev","label","height","widht","Search","searchFunc","inputValue","setInputValue","Container","Row","Col","md","Autocomplete","symbols","getOptionLabel","displaySymbol","description","filterOptions","query","filter","o","includes","renderInput","params","TextField","noOptionsText","Error","children","data-dismiss","removeFunc","SecurityInfo","Card","Body","width","input","slider","InputSlider","setValue","gutterBottom","Grid","container","alignItems","xs","Slider","newValue","aria-labelledby","StockAnyChart","stockDataTable","anychart","table","addData","chart","plot","area","mapAs","name","scroller","selectRange","instance","PayoffHighChart","highcharts","Highcharts","App","setData","errors","setErrors","stockErrors","setStockErrors","setOptionData","minX","setMinX","maxX","setMaxX","stockChartData","setStockChartData","viewHighChart","setViewHighChart","setErrs","useCallback","message","setStockErrs","updateData","Object","keys","strikes","maxStrike","minStrike","Infinity","values","theoretical","average","change","floor","i","sort","b","getColor","minProfit","maxProfit","profitSum","theoreticalPL","profitAtStrike","blackScholesValue","y","strategyData","strategyTheoretical","res","series","seriesInfo","point","text","fetchData","axios","get","process","actions","lastTradePrice","code","unix","round","t","h","l","Provider","val","onBlur","initialState","rootReducer","combineReducers","action","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1dacf1ef.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport * as nv from \"nvd3\";\n\nconst Payoff = ({ data }) => {\n  // Clear the Charts\n  d3.selectAll(\"svg > *\").remove();\n\n  const drawChart = ({ data: myData, Ydomain }) => {\n    /*These lines are all chart setup.  Pick and choose which chart features you want to utilize. */\n    nv.addGraph(() => {\n      const newChart = nv.models\n        .lineChart()\n        .margin({ left: 100 }) //Adjust chart margins to give the x-axis some breathing room.\n        .useInteractiveGuideline(false) //We want nice looking tooltips and a guideline!\n        // .duration(1500) //how fast do you want the lines to transition? Was removed, caused wrong data points positions after doing a transition bug https://github.com/novus/nvd3/issues/2018\n        .showLegend(true) //Show the legend, allowing users to turn on/off line series.\n        .showYAxis(true) //Show the y-axis\n        .showXAxis(true); //Show the x-axis\n\n      newChart.xAxis //Chart x-axis settings\n        .axisLabel(\"Price ($)\")\n        .tickFormat(d3.format(\",.2f\"));\n\n      newChart.yAxis //Chart y-axis settings\n        .axisLabel(\"Profit ($)\")\n        .tickFormat(d3.format(\",.2f\"));\n\n      newChart.forceY(Ydomain);\n\n      d3.select(\"#chart svg\") //Select the <svg> element you want to render the chart in.\n        .datum(myData) //Populate the <svg> element with chart data...\n        .call(newChart); //Finally, render the chart!\n\n      // Update the chart when window resizes.\n      nv.utils.windowResize(newChart.update);\n\n      return newChart;\n    });\n  };\n\n  // UseEffect with no deps so that a chart is always rendered\n  useEffect(() => {\n    data && drawChart(data);\n  });\n\n  // console.log(\"Payoff Rendered\");\n\n  return (\n    <>\n      <div className=\"panel-body\">\n        <div id=\"chart\">\n          <svg></svg>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Payoff;\n","export const UPDATE_PRICE = \"UPDATE_PRICE\";\nexport const UPDATE_VOLATILITY = \"UPDATE_VOLATILITY\";\nexport const UPDATE_INTEREST = \"UPDATE_INTEREST\";\nexport const UPDATE_TICKER = \"UPDATE_TICKER\";\nexport const RESET_DATA = \"RESET_DATA\"\n\nexport const updatePrice = (price) => {\n  return {\n    type: UPDATE_PRICE,\n    price,\n  };\n};\n\nexport const updateTicker = (ticker) => {\n  return {\n    type: UPDATE_TICKER,\n    ticker\n  };\n};\n\nexport const updateVolatility = (volatility) => {\n  return {\n    type: UPDATE_VOLATILITY,\n    volatility,\n  };\n};\n\nexport const updateInterest = (interest) => {\n  return {\n    type: UPDATE_INTEREST,\n    interest,\n  };\n};\n\nexport const resetData = () => {\n  return {\n    type: RESET_DATA\n  }\n}","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as stockActions from \"../store/actions/stockData\";\n\nconst StockData = ({ liveMode }) => {\n  const stockData = useSelector((state) => state.stockData);\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"panel panel-primary\">\n      <div className=\"panel-heading\">Underlying stock</div>\n      <div className=\"panel-body\">\n        <form className=\"form-horizontal\">\n          <div className=\"form-group\">\n            <label className=\"col-sm-5 control-label\">Current price ($)</label>\n            <div className=\"col-sm-7\">\n              <input\n                type=\"number\"\n                placeholder=\"CurrentPrice\"\n                className=\"form-control\"\n                value={stockData.currentPrice}\n                disabled={liveMode}\n                onChange={(e) =>\n                  dispatch(stockActions.updatePrice(e.target.value))\n                }\n              />\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <label className=\"col-sm-5 control-label\">Volatility (%)</label>\n            <div className=\"col-sm-7\">\n              <input\n                type=\"number\"\n                placeholder=\"Volatility\"\n                className=\"form-control\"\n                value={stockData.volatility}\n                onChange={(e) =>\n                  dispatch(stockActions.updateVolatility(e.target.value))\n                }\n              />\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <label className=\"col-sm-5 control-label\">Interest Rate (%)</label>\n            <div className=\"col-sm-7\">\n              <input\n                type=\"number\"\n                placeholder=\"Interest Rate\"\n                className=\"form-control\"\n                value={stockData.interest}\n                onChange={(e) =>\n                  dispatch(stockActions.updateInterest(e.target.value))\n                }\n              />\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default StockData;\n","import moment from \"moment\";\nexport const BUY = \"Buy\";\nexport const SELL = \"Sell\";\nexport const CALL = \"Call\";\nexport const PUT = \"Put\";\nexport const CASH = \"Cash\";\n\nexport const STOCK_NO_OPTIONS = \"This Stock Has No Available Options\";\nexport const STOCK_ERR_FETCH = \"Unable To Fetch Stock Data, Try again Later\";\n\nexport const stockDataInitialState = {\n  ticker: \"Theoretical\",\n  currentPrice: 100,\n  volatility: 30,\n  interest: 2,\n};\n\nexport const UNIXToDateString = (UNIX_timestamp) => {\n  const a = new Date(UNIX_timestamp * 1000);\n  return moment(a).format(\"YYYY-MM-DD\");\n}\n\nconst createDate = () => {\n  var d = new Date();\n  var year = d.getFullYear();\n  var month = d.getMonth();\n  var day = d.getDate();\n  console.log(year)\n  var c = new Date(year + 1, month, day);\n  return moment(c).format(\"YYYY-MM-DD\")\n};\n\nexport const date = createDate()\n\nexport const initialPortfolio = {\n  initialPortfolioId: {\n    amount: 1,\n    contractName: \"initialPortfolioId\",\n    date,\n    direction: BUY,\n    price: \"\", // To be calculated in the Contract Component\n    strike: 100,\n    type: CALL,\n  },\n};\n\n// Function that takes in currentPrice, impliedVolatility and a number representing\n// The desired deviation from the current price\nexport const getRelativeStrike = (currentPrice, impliedVol, N) => {\n  impliedVol = impliedVol / 100;\n  // Use the + operator to add integers\n  return +currentPrice + +currentPrice * +impliedVol * N;\n};\n\nexport const getLongCondor = (currentPrice, impliedVol) => {\n  return {\n    firstId: {\n      amount: 1,\n      contractName: \"firstId\",\n      date,\n      direction: BUY,\n      price: \"\", // To be calculated in the Contract Component\n      // Strike price calculated dynamically\n      strike: getRelativeStrike(currentPrice, impliedVol, -1),\n      type: CALL,\n    },\n    secondId: {\n      amount: 1,\n      contractName: \"secondId\",\n      date,\n      direction: SELL,\n      price: \"\",\n      strike: getRelativeStrike(currentPrice, impliedVol, -0.5),\n      type: CALL,\n    },\n    thirdId: {\n      amount: 1,\n      contractName: \"thirdId\",\n      date,\n      direction: SELL,\n      price: \"\",\n      strike: getRelativeStrike(currentPrice, impliedVol, 0.5),\n      type: CALL,\n    },\n    fourthId: {\n      amount: 1,\n      contractName: \"fourthId\",\n      date,\n      direction: BUY,\n      price: \"\",\n      strike: getRelativeStrike(currentPrice, impliedVol, 1),\n      type: CALL,\n    },\n  };\n};\n\nexport const getShortCondor = (currentPrice, impliedVol) => {\n  return {\n    firstId: {\n      amount: 1,\n      contractName: \"firstId\",\n      date,\n      direction: BUY,\n      price: \"\", // To be calculated in the Contract Component\n      strike: getRelativeStrike(currentPrice, impliedVol, 0.5),\n      type: CALL,\n    },\n    secondId: {\n      amount: 1,\n      contractName: \"secondId\",\n      date,\n      direction: SELL,\n      price: \"\",\n      strike: getRelativeStrike(currentPrice, impliedVol, 1),\n      type: CALL,\n    },\n    thirdId: {\n      amount: 1,\n      contractName: \"thirdId\",\n      date,\n      direction: BUY,\n      price: \"\",\n      strike: getRelativeStrike(currentPrice, impliedVol, -0.5),\n      type: PUT,\n    },\n    fourthId: {\n      amount: 1,\n      contractName: \"fourthId\",\n      date,\n      direction: SELL,\n      price: \"\",\n      strike: getRelativeStrike(currentPrice, impliedVol, -1),\n      type: PUT,\n    },\n  };\n};\n\nexport const getBullCallSpread = (currentPrice, impliedVol) => {\n  return {\n    firstId: {\n      amount: 1,\n      contractName: \"firstId\",\n      date,\n      direction: BUY,\n      price: \"\",\n      strike: currentPrice,\n      type: CALL,\n    },\n    secondId: {\n      amount: 1,\n      contractName: \"secondId\",\n      date,\n      direction: SELL,\n      price: \"\",\n      strike: getRelativeStrike(currentPrice, impliedVol, 0.5),\n      type: CALL,\n    },\n  };\n};\n\nexport const getBearPutSpread = (currentPrice, impliedVol) => {\n  return {\n    firstId: {\n      amount: 1,\n      contractName: \"firstId\",\n      date,\n      direction: BUY,\n      price: \"\",\n      strike: currentPrice,\n      type: PUT,\n    },\n    secondId: {\n      amount: 1,\n      contractName: \"secondId\",\n      date,\n      direction: SELL,\n      price: \"\",\n      strike: getRelativeStrike(currentPrice, impliedVol, -0.5),\n      type: PUT,\n    },\n  };\n};\n\nexport const getLongStraddle = (currentPrice, impliedVol) => {\n  return {\n    firstId: {\n      amount: 1,\n      contractName: \"firstId\",\n      date,\n      direction: BUY,\n      price: \"\",\n      strike: currentPrice,\n      type: CALL,\n    },\n    secondId: {\n      amount: 1,\n      contractName: \"secondId\",\n      date,\n      direction: BUY,\n      price: \"\",\n      strike: currentPrice,\n      type: PUT,\n    },\n  };\n};\n\nexport const getShortStraddle = (currentPrice, impliedVol) => {\n  return {\n    firstId: {\n      amount: 1,\n      contractName: \"firstId\",\n      date,\n      direction: SELL,\n      price: \"\",\n      strike: currentPrice,\n      type: CALL,\n    },\n    secondId: {\n      amount: 1,\n      contractName: \"secondId\",\n      date,\n      direction: SELL,\n      price: \"\",\n      strike: currentPrice,\n      type: PUT,\n    },\n  };\n};\n\nexport const getLongStradde = (currentPrice, impliedVol) => {\n  return {\n    firstId: {\n      amount: 1,\n      contractName: \"firstId\",\n      date,\n      direction: BUY,\n      price: \"\",\n      strike: getRelativeStrike(currentPrice, impliedVol, 0.5),\n      type: CALL,\n    },\n    secondId: {\n      amount: 1,\n      contractName: \"secondId\",\n      date,\n      direction: BUY,\n      price: \"\",\n      strike: getRelativeStrike(currentPrice, impliedVol, -0.5),\n      type: PUT,\n    },\n  };\n};\n\nexport const getShortStrangle = (currentPrice, impliedVol) => {\n  return {\n    firstId: {\n      amount: 1,\n      contractName: \"firstId\",\n      date,\n      direction: SELL,\n      price: \"\",\n      strike: getRelativeStrike(currentPrice, impliedVol, 0.5),\n      type: CALL,\n    },\n    secondId: {\n      amount: 1,\n      contractName: \"secondId\",\n      date,\n      direction: SELL,\n      price: \"\",\n      strike: getRelativeStrike(currentPrice, impliedVol, -0.5),\n      type: PUT,\n    },\n  };\n};\n\nexport const getLongButterfly = (currentPrice, impliedVol) => {\n  return {\n    firstId: {\n      amount: 1,\n      contractName: \"firstId\",\n      date,\n      direction: BUY,\n      price: \"\",\n      strike: getRelativeStrike(currentPrice, impliedVol, -0.5),\n      type: CALL,\n    },\n    secondId: {\n      amount: 2,\n      contractName: \"secondId\",\n      date,\n      direction: SELL,\n      price: \"\",\n      strike: currentPrice,\n      type: CALL,\n    },\n    thirdId: {\n      amount: 1,\n      contractName: \"thirdId\",\n      date,\n      direction: BUY,\n      price: \"\",\n      strike: getRelativeStrike(currentPrice, impliedVol, 0.5),\n      type: CALL,\n    },\n  };\n};\n\nexport const getShortButterfly = (currentPrice, impliedVol) => {\n  return {\n    firstId: {\n      amount: 1,\n      contractName: \"firstId\",\n      date,\n      direction: BUY,\n      price: \"\",\n      strike: currentPrice,\n      type: CALL,\n    },\n    secondId: {\n      amount: 1,\n      contractName: \"secondId\",\n      date,\n      direction: SELL,\n      price: \"\",\n      strike: getRelativeStrike(currentPrice, impliedVol, 0.5),\n      type: CALL,\n    },\n    thirdId: {\n      amount: 1,\n      contractName: \"thirdId\",\n      date,\n      direction: BUY,\n      price: \"\",\n      strike: currentPrice,\n      type: PUT,\n    },\n    fourthId: {\n      amount: 1,\n      contractName: \"fourthId\",\n      date,\n      direction: SELL,\n      price: \"\",\n      strike: getRelativeStrike(currentPrice, impliedVol, -0.5),\n      type: PUT,\n    },\n  };\n};\n","import * as cts from \"./constants\";\n\n// Option definition class\nexport default class Option {\n  constructor(contractName) {\n    this.contractName = contractName;\n    this.strike = 100;\n    this.date = cts.date;\n    this.direction = cts.BUY;\n    this.type = cts.CALL;\n    this.amount = 1;\n  }\n}\n","import * as cts from \"./constants\";\n\n// Takes in option object and evaluates the payoff given the input price\nexport const evaluatePayoffFunc = (option, price, stockData) => {\n  const cost = option.price * option.amount;\n  if (option.type === cts.CALL) {\n    // A call Option\n    if (option.direction === cts.BUY) {\n      // Long Call\n      return (\n        Math.max(price - parseInt(option.strike), 0) * option.amount - cost\n      );\n    }\n    // Short Call\n    return Math.min(0, option.strike - price) * option.amount + cost;\n  } else if (option.type === cts.PUT) {\n    // A Put Option\n    if (option.direction === cts.BUY) {\n      // Long Put\n      return (\n        Math.max(parseInt(option.strike) - price, 0) * option.amount - cost\n      );\n    }\n    // Short Put\n    return Math.min(0, price - option.strike) * option.amount + cost;\n  } else if (option.type === cts.CASH) {\n    // Stock\n    if (option.direction === cts.BUY) {\n      // Long Stock\n      return (price - stockData.currentPrice) * option.amount;\n    }\n    // Short Stock\n    return (stockData.currentPrice - price) * option.amount;\n  }\n};\n\n/*\n  S = Current Stock Price\n  X = Exercise Price (Strike)\n  r = Short-term risk free interest rate\n  T = Time remaining to the expiration Date (in years)\n  v = Standard deviation of stock price (implied volatility)\n */\n\nexport function BlackScholes(optionType, S, X, T, r, v) {\n  // Unit adjustment\n  v = v / 100;\n  r = r / 100;\n  var d1 = (Math.log(S / X) + (r + (v * v) / 2) * T) / (v * Math.sqrt(T));\n  var d2 = d1 - v * Math.sqrt(T);\n  if (optionType === cts.CALL) {\n    return S * CND(d1) - X * Math.exp(-r * T) * CND(d2);\n  } else {\n    return X * Math.exp(-r * T) * CND(-d2) - S * CND(-d1);\n  }\n}\n\n/* The cummulative Normal distribution function: */\nfunction CND(x) {\n  if (x < 0) {\n    return 1 - CND(-x);\n  } else {\n    let k = 1 / (1 + 0.2316419 * x);\n    return (\n      1 -\n      (Math.exp((-x * x) / 2) / Math.sqrt(2 * Math.PI)) *\n        k *\n        (0.31938153 +\n          k *\n            (-0.356563782 +\n              k * (1.781477937 + k * (-1.821255978 + k * 1.330274429))))\n    );\n  }\n}\n","// Color Picker Structure to help select color on graph\nexport default class ColorPicker {\n    // Available colors, more can be added\n    colors = [\n        \"blue\",\n        \"red\",\n        \"yellow\",\n        \"purple\",\n        \"orange\",\n        \"black\",\n    ]\n\n    constructor() {\n        this.index = 0;\n    }\n\n    // Get the Next Color\n    getColor(){\n        const result =  this.colors[this.index];\n        // Adjust the index;\n        if(this.index >= this.colors.length){\n            // We have reached the end reset to zero\n            this.index = 0;\n        }else{\n            // Not at end just add one to index\n            this.index++;\n        }\n        return result;\n    }\n}","/**\n * A custom useEffect hook that only triggers on updates, not on initial mount\n * Idea stolen from: https://stackoverflow.com/a/55075818/1526448\n * @param {Function} effect\n * @param {Array<any>} dependencies\n */\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useUpdateEffect(effect, dependencies = []) {\n  const isInitialMount = useRef(true);\n\n  useEffect(() => {\n    if (isInitialMount.current) {\n      isInitialMount.current = false;\n    } else {\n      effect();\n    }\n  }, dependencies);\n}\n","import React, { useEffect, useState } from \"react\";\nimport Option from \"../utility/Option\";\nimport { BlackScholes, SELL } from \"../utility\";\nimport { useSelector } from \"react-redux\";\nimport moment from \"moment\";\nimport * as util from \"../utility\";\nimport useUpdateEffect from \"../hooks/useUpdateEffect\";\n\nconst Contract = (props) => {\n  const { removeContract, data, optionData } = props;\n  const { updateContract } = props;\n\n  /*\n   If optionData is defined then the strike prices must adjust to the\n   Expiration date\n   */\n  const [expirationDates, setExpirationDates] = useState([]);\n  const [selectedDate, setSelectedDate] = useState(null);\n\n  const [strikePrices, setStrikePrices] = useState([\n    \"Please Select Expiration Date\",\n  ]);\n  const [selectedStrike, setSelectedStrike] = useState();\n  const [selectedDirection, setSelectedDirection] = useState(data.direction);\n  const [selectedType, setSelectedType] = useState(data.type);\n\n  // Stock data from redux\n  const stockData = useSelector((state) => state.stockData);\n\n  // Calculate dateDifference in years, used in theoretical black scholes\n  const dateDiff = -moment().diff(data.date, \"years\", true);\n\n  // Calculate the price based on Black-Scholes model\n  const [price, setPrice] = useState();\n\n  // Update the current price every time something changes\n  useEffect(() => {\n    if (optionData) {\n    } else if (!optionData && selectedType !== util.CASH) {\n      setPrice(\n        BlackScholes(\n          data.type,\n          +stockData.currentPrice,\n          +data.strike,\n          +dateDiff,\n          +stockData.interest,\n          +stockData.volatility\n        ).toFixed(2)\n      );\n    }\n  });\n\n  // Update the price every time it changes\n  useUpdateEffect(() => {\n    updateContract(data.contractName, \"price\", price);\n  }, [price]);\n\n  // Set expiration Dates when component mounts\n  useEffect(() => {\n    if (optionData) {\n      const expirationDates = optionData.data.map(\n        (item) => item.expirationDate\n      );\n      setExpirationDates(expirationDates);\n    }\n  }, []);\n\n  // Update strike and price at change\n  useUpdateEffect(() => {\n    if (optionData) {\n      // Find the element with same date\n      const apiContract = optionData.data.find(\n        (item) => item.expirationDate === selectedDate\n      );\n\n      if (!apiContract) return;\n\n      // Find the type of option this is\n      const type = data.type.toUpperCase();\n\n      // Extract the contracts given the date\n      const contractsAtDate = apiContract.options[type];\n\n      // Find the contract with the selected Strike\n      const contract = contractsAtDate.find(\n        (item) => +item.strike === +selectedStrike\n      );\n\n      // Set the price depending if we are short or long\n      if (data.direction === \"Buy\") {\n        setPrice(contract.ask);\n      } else {\n        setPrice(contract.bid);\n      }\n    }\n\n    updateContract(data.contractName, \"strike\", selectedStrike);\n  }, [selectedStrike, setPrice]);\n\n  useUpdateEffect(() => {\n    if (optionData) {\n      // Find the element with same date\n      const apiContract = optionData.data.find(\n        (item) => item.expirationDate === selectedDate\n      );\n\n      // If none found return\n      if (!apiContract) return;\n\n      // Find the type of option this is\n      const type = data.type.toUpperCase();\n\n      // Extract the contracts given the date\n      const contractsAtDate = apiContract.options[type];\n\n      // Make an array of strikes at the current date\n      const strikesAtDate = contractsAtDate.map((item) => item.strike);\n\n      // Update strikeprices\n      setStrikePrices(strikesAtDate);\n    }\n\n    updateContract(data.contractName, \"date\", selectedDate);\n  }, [selectedDate]);\n\n  // Update Direction\n  useUpdateEffect(() => {\n    updateContract(data.contractName, \"direction\", selectedDirection);\n  }, [selectedDirection]);\n\n  // Update type\n  useUpdateEffect(() => {\n    updateContract(data.contractName, \"type\", selectedType);\n\n    // If we just changed to cash\n    if (selectedType === util.CASH) {\n      // Set Debit/Credit equal to the stock price\n      setPrice(stockData.currentPrice);\n    }\n  }, [selectedType]);\n\n  const cashContract = selectedType === util.CASH;\n\n  return (\n    <tr>\n      {/* Direction */}\n      <td>\n        <select\n          id=\"direction\"\n          className=\"form-control\"\n          value={selectedDirection}\n          onChange={(e) => setSelectedDirection(e.target.value)}\n        >\n          <option>Buy</option>\n          <option>Sell</option>\n        </select>\n      </td>\n      {/* Amount */}\n      <td>\n        <input\n          type=\"number\"\n          placeholder=\"Amount\"\n          className=\"form-control form-control-inline\"\n          onChange={(e) =>\n            updateContract(data.contractName, \"amount\", e.target.value)\n          }\n          value={data.amount}\n        />\n      </td>\n      {/* Kind */}\n      <td>\n        <select\n          className=\"form-control\"\n          onChange={(e) => setSelectedType(e.target.value)}\n          value={selectedType}\n        >\n          <option>Call</option>\n          <option>Put</option>\n          <option>Cash</option>\n        </select>\n      </td>\n      {/* Strike Price */}\n      <td>\n        {!cashContract &&\n          (optionData ? (\n            <div class=\"form-group\">\n              <select\n                class=\"form-control\"\n                id=\"exampleFormControlSelect1\"\n                onChange={(e) => setSelectedStrike(e.target.value)}\n              >\n                {strikePrices.map((price) => (\n                  <option>{isNaN(price) ? null : price}</option>\n                ))}\n              </select>\n            </div>\n          ) : (\n            <input\n              type=\"number\"\n              placeholder=\"Strike\"\n              className=\"form-control form-control-inline\"\n              onChange={(e) =>\n                updateContract(data.contractName, \"strike\", e.target.value)\n              }\n              value={data.strike}\n            />\n          ))}\n      </td>\n      {/* Expiry Date */}\n      <td>\n        {!cashContract &&\n          (!optionData ? (\n            <input\n              type=\"date\"\n              placeholder=\"Expiry\"\n              className=\"form-control form-control-inline\"\n              onChange={(e) =>\n                updateContract(data.contractName, \"date\", e.target.value)\n              }\n              value={data.date}\n            />\n          ) : (\n            <div class=\"form-group\">\n              <select\n                class=\"form-control\"\n                id=\"exampleFormControlSelect1\"\n                onChange={(e) => setSelectedDate(e.target.value)}\n              >\n                {expirationDates.map((date) => (\n                  <option>{date}</option>\n                ))}\n              </select>\n            </div>\n          ))}\n      </td>\n      {/* Premium/Price */}\n      <td style={{ verticalAlign: \"middle\" }}>\n        <b>{price * data.amount}</b>\n      </td>\n      {/* Debit/Credit */}\n      <td style={{ verticalAlign: \"middle\" }}>\n        <b>{(data.direction === SELL ? price : -price) * data.amount} </b>\n      </td>\n      {/* Remove Button */}\n      <td style={{ verticalAlign: \"middle\" }}>\n        <button\n          type=\"button\"\n          aria-label=\"Left Align\"\n          className=\"btn btn-danger btn-s\"\n          onClick={() => removeContract(data.contractName)}\n        >\n          <span aria-hidden=\"true\">Remove</span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n\nconst Panel = (props) => {\n  const { portfolio, setPortfolio, visualize, optionData } = props;\n\n  const addContract = () => {\n    const newPortfolio = { ...portfolio };\n    const id = new Date().toISOString();\n    newPortfolio[id] = new Option(id);\n    setPortfolio(newPortfolio);\n  };\n\n  const renderContracts = () => {\n    const result = [];\n    for (let id in portfolio) {\n      result.push(\n        <Contract\n          optionData={optionData}\n          removeContract={removeContract}\n          updateContract={updateContract}\n          data={portfolio[id]}\n          key={id}\n        />\n      );\n    }\n    return result;\n  };\n\n  const updateContract = (id, property, value) => {\n    const newPortfolio = { ...portfolio };\n    newPortfolio[id][property] = value;\n    setPortfolio(newPortfolio);\n  };\n\n  const removeContract = (id) => {\n    const newPortfolio = { ...portfolio };\n    delete newPortfolio[id];\n    setPortfolio(newPortfolio);\n  };\n\n  const calculateTotal = () => {\n    let premium = 0;\n    let debitcredit = 0;\n    let amount = 0;\n\n    for (let key in portfolio) {\n      const contract = portfolio[key];\n      premium += +contract.price * +contract.amount;\n      const debitToAdd =\n        contract.direction === SELL ? +contract.price : -+contract.price;\n      debitcredit += debitToAdd * +contract.amount;\n      amount += +contract.amount;\n    }\n    return {\n      premium: premium.toFixed(2),\n      debitcredit: debitcredit.toFixed(2),\n      amount,\n    };\n  };\n\n  const { premium, debitcredit, amount } = calculateTotal();\n\n  // console.log(\"Panel Rendered\");\n\n  return (\n    <div className=\"panel panel-primary\">\n      <div className=\"panel-heading\">Option Portfolio</div>\n      <div className=\"panel-body\">\n        <table className=\"table table-condensed\">\n          <thead>\n            <tr>\n              <th>Direction</th>\n              <th>Amount</th>\n              <th>Kind</th>\n              <th>Strike</th>\n              <th>Expiry</th>\n              <th>Premium</th>\n              <th>Debit/Credit</th>\n              <th>\n                <button\n                  type=\"submit\"\n                  className=\"btn btn-success btn-s\"\n                  onClick={addContract}\n                >\n                  Add Leg\n                </button>\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {renderContracts()}\n            <tr>\n              <td><b>Total</b></td>\n              <td><b>{amount}</b></td>\n              <td></td>\n              <td></td>\n              <td></td>\n              <td><b>{premium}</b></td>\n              <td><b>{debitcredit}</b></td>\n              <td>\n                <button\n                  type=\"button\"\n                  aria-label=\"Left Align\"\n                  className=\"btn btn-danger btn-s\"\n                  onClick={() => setPortfolio({})}\n                >\n                  <span aria-hidden=\"true\">Remove All</span>\n                </button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n        {/* <div className=\"pull-right\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-success btn-s\"\n            onClick={visualize}\n          >\n            Generate Payoff\n          </button>\n        </div> */}\n      </div>\n    </div>\n  );\n};\n\nexport default Panel;\n","import React from \"react\";\n\nconst defaultValue = {\n  liveMode: false,\n  setLiveMode: () => {},\n};\n\nexport const liveDataContext = React.createContext(defaultValue);\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\nimport Grow from \"@material-ui/core/Grow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Popper from \"@material-ui/core/Popper\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport MenuList from \"@material-ui/core/MenuList\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport * as util from \"../../utility\";\nimport { useSelector } from \"react-redux\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n}));\n\nconst DropDownBtn = ({ setPortfolio }) => {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const anchorRef = React.useRef(null);\n  const { currentPrice, volatility } = useSelector((state) => state.stockData);\n\n  const handleToggle = () => {\n    setOpen((prevOpen) => !prevOpen);\n  };\n\n  const handleClose = (event, newPortfolio) => {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n    newPortfolio && setPortfolio(newPortfolio(currentPrice, volatility));\n    setOpen(false);\n  };\n\n  function handleListKeyDown(event) {\n    if (event.key === \"Tab\") {\n      event.preventDefault();\n      setOpen(false);\n    }\n  }\n\n  // return focus to the button when we transitioned from !open -> open\n  const prevOpen = React.useRef(open);\n  React.useEffect(() => {\n    if (prevOpen.current === true && open === false) {\n      anchorRef.current.focus();\n    }\n\n    prevOpen.current = open;\n  }, [open]);\n\n  return (\n    <div>\n      <Button\n        ref={anchorRef}\n        aria-controls={open ? \"menu-list-grow\" : undefined}\n        aria-haspopup=\"true\"\n        onClick={handleToggle}\n        color=\"inherit\"\n      >\n        View Sample Strategies\n      </Button>\n      <Popper\n        open={open}\n        anchorEl={anchorRef.current}\n        role={undefined}\n        transition\n        disablePortal\n      >\n        {({ TransitionProps, placement }) => (\n          <Grow\n            {...TransitionProps}\n            style={{\n              transformOrigin:\n                placement === \"bottom\" ? \"center top\" : \"center bottom\",\n            }}\n          >\n            <Paper>\n              <ClickAwayListener onClickAway={handleClose}>\n                <MenuList\n                  autoFocusItem={open}\n                  id=\"menu-list-grow\"\n                  onKeyDown={handleListKeyDown}\n                >\n                  <MenuItem\n                    onClick={(e) => handleClose(e, util.getBullCallSpread)}\n                  >\n                    Bull Call Spread\n                  </MenuItem>\n                  <MenuItem onClick={(e) => handleClose(e, util.getBearPutSpread)}>\n                    Bear Put Spread\n                  </MenuItem>\n                  <MenuItem onClick={(e) => handleClose(e, util.getLongStraddle)}>\n                    Long Straddle\n                  </MenuItem>\n                  <MenuItem onClick={(e) => handleClose(e, util.getShortStraddle)}>\n                    Short Straddle\n                  </MenuItem>\n                  <MenuItem onClick={(e) => handleClose(e, util.getLongButterfly)}>\n                    Long Butterfly\n                  </MenuItem>\n                  <MenuItem\n                    onClick={(e) => handleClose(e, util.getShortButterfly)}\n                  >\n                    Short Butterfly\n                  </MenuItem>\n                  <MenuItem onClick={(e) => handleClose(e, util.getLongCondor)}>\n                    Long Condor\n                  </MenuItem>\n                  <MenuItem onClick={(e) => handleClose(e, util.getShortCondor)}>\n                    Short Condor\n                  </MenuItem>\n                </MenuList>\n              </ClickAwayListener>\n            </Paper>\n          </Grow>\n        )}\n      </Popper>\n    </div>\n  );\n};\nexport default DropDownBtn;\n","import React, { useContext } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { liveDataContext } from \"../../context/liveData\";\nimport Switch from \"@material-ui/core/Switch\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport DropDownBtn from \"./DropDownBtn\";\nimport { useDispatch } from \"react-redux\";\nimport * as actions from \"../../store/actions/stockData\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  navbar: {\n    marginBottom: \"40px\",\n    position: \"relative\",\n    zIndex: \"10\",\n  },\n}));\n\nexport default function MenuAppBar({ setPortfolio }) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const { liveMode, setLiveMode } = useContext(liveDataContext);\n\n  return (\n    <AppBar position=\"static\" className={classes.navbar}>\n      <Toolbar>\n        <IconButton\n          edge=\"start\"\n          className={classes.menuButton}\n          color=\"inherit\"\n          aria-label=\"menu\"\n        >\n          <MenuIcon />\n        </IconButton>\n        <Typography variant=\"h3\" className={classes.title}>\n          Option Strategy Builder\n        </Typography>\n        <DropDownBtn setPortfolio={setPortfolio} />\n        <FormGroup>\n          <FormControlLabel\n            control={\n              <Switch\n                checked={liveMode}\n                onChange={() =>\n                  setLiveMode((prev) => {\n                    if (prev === true) dispatch(actions.resetData());\n                    return !prev;\n                  })\n                }\n                aria-label=\"live mode switch\"\n              />\n            }\n            label={\"Live Data Mode\"}\n          />\n        </FormGroup>\n      </Toolbar>\n    </AppBar>\n  );\n}\n","import React, { useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport symbols from \"../symbols.json\";\nimport { Button } from \"@material-ui/core\";\nimport { Container, Col, Row } from \"react-bootstrap\";\nimport { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n  item: {\n    // No Effect\n    height: \"100%\",\n    widht: \"100%\",\n  },\n});\n\nconst Search = ({ searchFunc }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n  const classes = useStyles();\n\n  const filterOptions = (options, state) => {\n    // Extract the inputValue\n    const query = state.inputValue.toUpperCase();\n    // Update state\n    setInputValue(query);\n    // If short query return nothing (improves performance)\n    if (query.length <= 1) return [];\n\n    // Filter out the options\n    return options.filter((o) => o.displaySymbol.includes(query));\n  };\n\n  // console.log(\"Search Rendered\")\n\n  return (\n    <>\n      {/* A Warning message is outputed in console: Fix later */}\n      <Container>\n        <Row>\n          <Col md={10}>\n            <Autocomplete\n              id=\"combo-box-demo\"\n              options={symbols}\n              getOptionLabel={(option) =>\n                option.displaySymbol + \": \" + option.description\n              }\n              filterOptions={(options, state) => filterOptions(options, state)}\n              className={classes.item}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label=\"Search Ticker\"\n                  variant=\"outlined\"\n                />\n              )}\n              noOptionsText={\n                inputValue.length <= 1\n                  ? \"Type a Ticker Symbol\"\n                  : \"No Symbols Found\"\n              }\n            />\n          </Col>\n          <Col md={2}>\n            <Button\n              color=\"primary\"\n              variant=\"contained\"\n              onClick={() => searchFunc(inputValue)}\n              className={classes.item}\n            >\n              Submit\n            </Button>\n          </Col>\n        </Row>\n      </Container>\n    </>\n  );\n};\n\nexport default Search;\n","import React from \"react\";\n\nconst Error = (props) => {\n  return (\n    <div className=\"alert alert-danger \" role=\"alert\">\n      <strong>{props.children}</strong>\n      <button\n        type=\"button\"\n        className=\"close\"\n        data-dismiss=\"alert\"\n        aria-label=\"Close\"\n        onClick={props.removeFunc}\n      >\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </div>\n  );\n};\nexport default Error;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Card } from \"react-bootstrap\";\nimport moment from \"moment\";\n\nconst SecurityInfo = () => {\n  const stockData = useSelector((state) => state.stockData);\n\n  return (\n    <Card>\n      <Card.Body>\n        <h1 class=\"display-4\">{stockData.ticker}</h1>\n        <p class=\"lead\">Quote: {stockData.currentPrice}</p>\n        <p>{moment(new Date()).format(\"YYYY-MM-DD\")}</p>.\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default SecurityInfo;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Input from \"@material-ui/core/Input\";\nimport VolumeUp from \"@material-ui/icons/VolumeUp\";\n\nconst useStyles = makeStyles({\n  root: {\n    width: 250,\n  },\n  input: {\n    width: 42,\n  },\n  slider: { width: \"90%\" },\n});\n\nexport default function InputSlider({ value, setValue, title, min, max }) {\n  const classes = useStyles();\n\n  const handleSliderChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const handleInputChange = (event) => {\n    setValue(event.target.value === \"\" ? \"\" : Number(event.target.value));\n  };\n\n  const handleBlur = () => {\n    if (value < 0) {\n      setValue(0);\n    } else if (value > 100) {\n      setValue(100);\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <Typography id=\"input-slider\" gutterBottom>\n        {title}\n      </Typography>\n      <Grid container spacing={2} alignItems=\"center\">\n        <Grid item>\n          <VolumeUp />\n        </Grid>\n        <Grid item xs>\n          <Slider\n            min={min}\n            max={max}\n            value={typeof value === \"number\" ? value : 0}\n            onChange={handleSliderChange}\n            aria-labelledby=\"input-slider\"\n            className={classes.slider}\n          />\n        </Grid>\n        <Grid item>\n          {/* <Input\n            className={classes.input}\n            value={value}\n            margin=\"dense\"\n            onChange={handleInputChange}\n            onBlur={handleBlur}\n            inputProps={{\n              step: 10,\n              min: 0,\n              max: 50,\n              type: \"number\",\n              \"aria-labelledby\": \"input-slider\",\n            }}\n          /> */}\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import React from \"react\";\nimport AnyChart from \"anychart-react\";\nimport * as anychart from \"anychart\";\n\nconst StockAnyChart = ({ data, ticker }) => {\n  // Create the chart\n  var stockDataTable = anychart.data.table();\n  // Add The data\n  stockDataTable.addData(data);\n  // Declare stock Chart\n  var chart = anychart.stock();\n  // Create plot\n  var firstPlot = chart.plot(0);\n  firstPlot.area(stockDataTable.mapAs({ value: 4 })).name(ticker);\n  chart.scroller().area(stockDataTable.mapAs({ value: 4 }));\n  chart.selectRange(\"2018-01-03\", \"2019-01-01\");\n\n  console.log(\"Stock Any Chart Rendered\");\n\n  return (\n    <>\n      {!chart ? (\n        <h1>Unable to Display Data</h1>\n      ) : (\n        <AnyChart width=\"100%\" height={300} instance={chart} title={ticker} />\n      )}\n    </>\n  );\n};\n\nexport default StockAnyChart;\n","import React from \"react\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\n\nconst options = {\n  chart: {\n    type: \"spline\",\n  },\n  title: {\n    text: \"My chart\",\n  },\n  plotOptions: {\n    series: {\n      allowPointSelect: false,\n    },\n  },\n  series: [\n    {\n      name: \"Name\",\n      data: [\n        [5, 2],\n        [6, 3],\n        [8, 2],\n      ],\n    },\n    {\n      data: [\n        [5, 3],\n        [6, 4],\n        [8, 3],\n      ],\n    },\n  ],\n};\n\nconst PayoffHighChart = ({ data }) => {\n  return <HighchartsReact highcharts={Highcharts} options={data} />;\n};\n\nexport default PayoffHighChart;\n","import React, { useState, useCallback } from \"react\";\nimport Payoff from \"./components/Payoff\";\nimport StockData from \"./components/StockData\";\nimport Panel from \"./components/Panel\";\nimport * as util from \"./utility\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Navigation from \"./components/Navigation/Navigation\";\nimport moment from \"moment\";\nimport { liveDataContext } from \"./context/liveData\";\nimport Search from \"./components/Search\";\nimport axios from \"axios\";\nimport ColorPicker from \"./utility/DS/ColorPicker\";\nimport * as actions from \"./store/actions/stockData\";\nimport { Row, Col, Container } from \"react-bootstrap\";\nimport useUpdateEffect from \"./hooks/useUpdateEffect\";\nimport Error from \"./components/Error/Error\";\nimport SecurityInfo from \"./components/SecurityInfo\";\nimport Slider from \"./components/Slider\";\nimport AnyChart from \"./components/StockAnyChart\";\nimport { Switch } from \"@material-ui/core\";\nimport { Button, FormGroup, FormControlLabel } from \"@material-ui/core\";\nimport HighChart from \"./components/PayoffHighChart\";\n\nconst App = () => {\n  const [portfolio, setPortfolio] = useState(util.initialPortfolio);\n  const [data, setData] = useState(null);\n  const [errors, setErrors] = useState(null);\n  const [stockErrors, setStockErrors] = useState(null);\n  const stockData = useSelector((state) => state.stockData);\n  const [liveMode, setLiveMode] = useState(false);\n  const [optionData, setOptionData] = useState();\n  const [minX, setMinX] = useState();\n  const [maxX, setMaxX] = useState();\n  const [stockChartData, setStockChartData] = useState();\n  const [viewHighChart, setViewHighChart] = useState(false);\n  const value = { liveMode, setLiveMode };\n  const dispatch = useDispatch();\n  const { volatility, interest } = useSelector((state) => state.stockData);\n\n  // Set Error Message as JSX\n  const setErrs = useCallback((message) => {\n    setErrors(<Error removeFunc={() => setErrors(null)}>{message}</Error>);\n  }, []);\n\n  // Set Error Stock Message as JSX\n  const setStockErrs = useCallback((message) => {\n    setStockErrors(\n      <Error removeFunc={() => setStockErrors(null)}>{message}</Error>\n    );\n  }, []);\n\n  // Update and Validate User Input Data\n  const updateData = useCallback(() => {\n    // Validate Empty Portfolio\n    if (Object.keys(portfolio).length === 0)\n      return setErrs(\"Add contracts to Visualize\");\n\n    // Validate Stock Price\n    if (+stockData.currentPrice <= 0)\n      return setErrs(\"Please Enter a Valid Stock Price\");\n\n    // Validate Interest\n    if (isNaN(+stockData.interest))\n      return setErrs(\"Please Enter a Valid Interest Rate\");\n\n    const strikes = [];\n    let maxStrike = 0;\n    let minStrike = Infinity;\n\n    const values = [];\n    const theoretical = [];\n\n    // Add the min/max x values input by the user and update the max/minStrikes\n    if (maxX) {\n      if (+maxX > maxStrike) maxStrike = +maxX;\n      if (+maxX < minStrike) minStrike = +maxX;\n      strikes.push(+maxX);\n    }\n\n    if (minX) {\n      if (+minX > maxStrike) maxStrike = +minX;\n      if (+minX < minStrike) minStrike = +minX;\n      strikes.push(+minX);\n    }\n\n    // Get the Critical strikes to plot\n    for (let id in portfolio) {\n      const contract = portfolio[id];\n      const cashContract = contract.type === util.CASH;\n      const strike = cashContract ? +stockData.currentPrice : +contract.strike;\n      const date = contract.date;\n      const amount = contract.amount;\n\n      // Always Validate Amount\n      if (amount <= 0) return setErrs(\"Please Enter a Valid Amount\");\n\n      // If not a Cash Contract then validate the following fields\n      if (!cashContract) {\n        // Validate Strike prices\n        if (strike <= 0) return setErrs(\"Please Enter A Valid Strike Price\");\n\n        // Validate the Date (Check if it is defined and in the future)\n        if (!date || moment().diff(date) > 0)\n          return setErrs(\"Please Enter a Valid Date\");\n      }\n\n      // Apply To Fixed\n      strikes.push(strike.toFixed(2));\n\n      // Update the maxStrike\n      if (strike > maxStrike) maxStrike = strike;\n      if (strike < minStrike) minStrike = strike;\n    }\n\n    const average = (maxStrike + minStrike) / 2;\n    let max = 0;\n\n    // If maxX is set\n    if (!maxX) {\n      // Auto xMax margin\n      max = Math.floor(maxStrike + average * 0.2);\n    } else {\n      max = Math.max(+maxX, maxStrike);\n    }\n\n    let min = 0;\n\n    // If minX is set\n    if (!minX) {\n      // Auto xMin Margin\n      min = Math.floor(minStrike - average * 0.2);\n    } else {\n      min = Math.min(+minX, minStrike);\n    }\n\n    const change = (max - min) / 35;\n\n    // Add domain limits\n    strikes.push(min);\n    strikes.push(max);\n\n    setMaxX(max);\n    setMinX(min);\n\n    let i = min;\n    // Add The rest of the strikes for continuous feel\n    while (i < max) {\n      strikes.push(i);\n      i += change;\n    }\n\n    // Sort the strikes so the graph can be displayed properly\n    strikes.sort((a, b) => a - b);\n\n    const result = [];\n\n    // Helper DS to fetch colors\n    const colors = new ColorPicker();\n\n    // We want our plot to have N lines (N is the number of contracts in portfolio)\n    for (let id in portfolio) {\n      const contract = portfolio[id];\n      let key =\n        contract.direction + \" \" + contract.type + \" \" + contract.strike;\n      // Adjust title if cash contract\n      if (contract.type === util.CASH) {\n        key =\n          contract.direction +\n          \" \" +\n          contract.type +\n          \"  \" +\n          stockData.currentPrice;\n      }\n\n      result.push({\n        values: [],\n        key,\n        color: colors.getColor(),\n        disabled: true,\n      });\n    }\n\n    // Keey track of min/max for Ydomain\n    let minProfit = Infinity;\n    let maxProfit = -Infinity;\n\n    // For each strike, calculate the payoff and add it to values\n    for (let strike of strikes) {\n      let profitSum = 0;\n      let theoreticalPL = 0;\n      // Keep track of the index we are at\n      let i = 0;\n      for (let id in portfolio) {\n        const contract = portfolio[id];\n\n        // Calculate profit at given Strike (at Expiration)\n        const profitAtStrike = +util\n          .evaluatePayoffFunc(contract, strike, stockData)\n          .toFixed(2);\n\n        // Calculate dateDifference in years, used in theoretical black scholes\n        const dateDiff = -moment().diff(contract.date, \"years\", true);\n\n        const blackScholesValue = util.BlackScholes(\n          contract.type,\n          +strike,\n          +contract.strike,\n          +dateDiff,\n          +stockData.interest,\n          +stockData.volatility\n        );\n\n        // If the contract is Cash\n        if (contract.type === util.CASH) {\n          // Just add the profit at Strike\n          theoreticalPL += profitAtStrike;\n        } else {\n          // Calculate depending on Buy/Sell\n          if (contract.direction === util.BUY) {\n            // Calculate Theoretical P/L\n            theoreticalPL +=\n              (blackScholesValue - contract.price) * contract.amount;\n          } else {\n            theoreticalPL +=\n              (contract.price - blackScholesValue) * contract.amount;\n          }\n        }\n\n        // Update min and max Profits\n        if (profitAtStrike > maxProfit) maxProfit = profitAtStrike;\n\n        if (profitAtStrike < minProfit) minProfit = profitAtStrike;\n\n        // Push the point at the specified strategy\n        result[i].values.push({\n          x: strike,\n          y: profitAtStrike,\n        });\n\n        // Evaluate each contract in portfolio and add it to the y value\n        profitSum += profitAtStrike;\n        i++;\n      }\n\n      // Add the point to the data\n      values.push({ x: strike, y: profitSum });\n      theoretical.push({ x: strike, y: theoreticalPL.toFixed(2) });\n    }\n\n    const Ydomain = [Math.floor(minProfit * 1.2), Math.floor(maxProfit * 1.2)];\n\n    // The overall strategy plot data\n    const strategyData = {\n      values,\n      key: \"Strategy\",\n      color: \"green\",\n      disabled: false,\n    };\n\n    // The Theoretical strategy plot data\n    const strategyTheoretical = {\n      values: theoretical,\n      key: \"Today\",\n      color: \"pink\",\n      disabled: false,\n    };\n\n    result.push(strategyTheoretical);\n\n    result.push(strategyData);\n\n    // Clear the Errors\n    setErrors(null);\n\n    console.log(result);\n\n    if (viewHighChart) {\n      const res = [];\n      // Parse data into HighChart Format\n      for (let series of result) {\n        const seriesInfo = { data: [] };\n        res.push(seriesInfo);\n        for (let point of series.values) {\n          seriesInfo.data.push([+point.x, +point.y]);\n        }\n      }\n      console.log(res);\n      setData({\n        series: res,\n        chart: {\n          type: \"spline\",\n        },\n        title: {\n          text: \"Payoff\",\n        },\n      });\n      return;\n    }\n\n    setData({ data: result, Ydomain });\n  }, [portfolio, stockData, setErrs, maxX, minX]);\n\n  // Custom hook used to Reset Portfolio only when liveMode is Toggled\n  useUpdateEffect(() => {\n    // To be run on update\n    setErrors(null);\n    setPortfolio({});\n    setData(null);\n    setOptionData(null);\n  }, [liveMode]);\n\n  // Custom hook used to Reset Porfolio only when optionData changes\n  useUpdateEffect(() => {\n    setPortfolio({});\n    setStockChartData(null); // Display Loading\n    fetchData();\n  }, [optionData]);\n\n  // Custom hook used to Update/Validate portfolio whenever changed\n  useUpdateEffect(() => {\n    updateData();\n  }, [portfolio, updateData]);\n\n  // Fetch the option Data when Search is Clicked\n  const searchFunc = async (ticker) => {\n    try {\n      const { data } = await axios.get(\n        `https://finnhub.io/api/v1/stock/option-chain?symbol=${ticker}&token=` +\n          process.env.REACT_APP_API_KEY\n      );\n      setOptionData(data);\n      dispatch(actions.updatePrice(data.lastTradePrice));\n      dispatch(actions.updateTicker(data.code));\n      if (data.data.length === 0) {\n        setStockErrs(util.STOCK_NO_OPTIONS, setStockErrors);\n      } else {\n        setStockErrors(null);\n      }\n    } catch (err) {\n      setStockErrs(util.STOCK_ERR_FETCH, setStockErrors);\n    }\n  };\n\n  const fetchData = async (ticker) => {\n    var unix = Math.round(+new Date() / 1000);\n    const { data } = await axios.get(\n      `https://finnhub.io/api/v1/stock/candle?symbol=TSLA&resolution=D&from=1199145600&to=${unix}&token=` +\n        process.env.REACT_APP_API_KEY\n    );\n\n    const length = data.c.length;\n\n    const result = [];\n\n    for (let i = 0; i < length; i++) {\n      result.push([\n        util.UNIXToDateString(data.t[i]),\n        data.o[i],\n        data.h[i],\n        data.l[i],\n        data.c[i],\n      ]);\n    }\n    setStockChartData(result);\n  };\n\n  return (\n    <>\n      <liveDataContext.Provider value={value}>\n        <Navigation setPortfolio={setPortfolio} />\n        <Container>\n          <Row>\n            <Col md={12}>\n              {stockData.ticker !== \"Theoretical\" && <SecurityInfo />}\n            </Col>\n          </Row>\n          <Row>\n            <Col md={12}>\n              {liveMode && <Search searchFunc={searchFunc} />}\n              {stockErrors}\n            </Col>\n          </Row>\n          <Row>\n            <Col md={12}>\n              <Panel\n                optionData={optionData}\n                portfolio={portfolio}\n                setPortfolio={setPortfolio}\n                visualize={updateData}\n                currentPrice={100}\n              />\n            </Col>\n          </Row>\n          <Row>\n            <Col md={3}>\n              <StockData liveMode={liveMode} />\n              <div className=\"panel panel-primary\">\n                <div className=\"panel-heading\">Toggle</div>\n                <div className=\"panel-body\">\n                  <Slider\n                    min={0}\n                    max={150}\n                    title={\"Volatility\"}\n                    value={+volatility}\n                    setValue={(val) => dispatch(actions.updateVolatility(val))}\n                  />\n                  <Slider\n                    min={-20}\n                    max={150}\n                    title={\"Interest\"}\n                    value={+interest}\n                    setValue={(val) => dispatch(actions.updateInterest(val))}\n                  />\n                  <br />\n                  <br />\n                  <br />\n                </div>\n              </div>\n            </Col>\n            <Col md={9}>\n              <Row>\n                <Col md={12}>\n                  {errors ? errors : null}\n                  <div className=\"row\">\n                    <div className=\"col-sm-12\">\n                      <div className=\"panel panel-primary\">\n                        <div className=\"panel-heading\">\n                          Option Payoff\n                          <FormGroup>\n                            <FormControlLabel\n                              control={\n                                <Switch\n                                  checked={viewHighChart}\n                                  onChange={() =>\n                                    setViewHighChart((prev) => !prev)\n                                  }\n                                  aria-label=\"live mode switch\"\n                                />\n                              }\n                              label={\"Switch Graph Type\"}\n                            />\n                          </FormGroup>\n                        </div>\n                        <div className=\"panel-body\">\n                          {!viewHighChart ? (\n                            <Payoff data={data} />\n                          ) : (\n                            <HighChart data={data} />\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  {/* <Demo /> */}\n                </Col>\n              </Row>\n              <Row>\n                <Col md={12}>\n                  <div className=\"panel panel-primary\">\n                    <div className=\"panel-heading\">Change Domain</div>\n                    <div className=\"panel-body\">\n                      <Col md={2}>\n                        <input\n                          type=\"number\"\n                          className=\"form-control form-control-inline\"\n                          placeholder=\"Auto\"\n                          onBlur={(e) => setMinX(e.target.value)}\n                          // value={minX}\n                        />\n                      </Col>\n                      <Col md={2}>\n                        <input\n                          type=\"number\"\n                          min=\"1\"\n                          max=\"5000\"\n                          className=\"form-control form-control-inline\"\n                          placeholder=\"Auto\"\n                          // value={maxX}\n                          onBlur={(e) => setMaxX(e.target.value)}\n                        />\n                      </Col>\n                    </div>\n                  </div>\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n        </Container>\n      </liveDataContext.Provider>\n      <Container>\n        <Button onClick={fetchData}>Get Data</Button>\n        <div className=\"panel panel-primary\">\n          <div className=\"panel-heading\">Option Portfolio</div>\n          <div className=\"panel-body\">\n            {stockChartData ? (\n              <AnyChart data={stockChartData} ticker={stockData.ticker} />\n            ) : (\n              <>\n                {optionData ? (\n                  <h1>Loading...</h1>\n                ) : (\n                  <h1>Switch to live mode to view stock chart</h1>\n                )}\n              </>\n            )}\n          </div>\n        </div>\n      </Container>\n    </>\n  );\n};\n\nexport default App;\n","import {\n  UPDATE_PRICE,\n  UPDATE_INTEREST,\n  UPDATE_VOLATILITY,\n  UPDATE_TICKER,\n  RESET_DATA,\n} from \"../actions/stockData\";\nimport { stockDataInitialState } from \"../../utility/constants\";\n\nexport const initialState = { ...stockDataInitialState };\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case UPDATE_PRICE:\n      return { ...state, currentPrice: action.price };\n    case UPDATE_VOLATILITY:\n      return { ...state, volatility: action.volatility };\n    case UPDATE_INTEREST:\n      return { ...state, interest: action.interest };\n    case UPDATE_TICKER:\n      return { ...state, ticker: action.ticker };\n    case RESET_DATA:\n      return { ...stockDataInitialState };\n    default:\n      // Will be run initially\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport stockDataReducer from \"./store/reducers/stockData\";\nimport { createStore, combineReducers } from \"redux\";\nimport AnyChart from \"anychart-react\";\n\nconst rootReducer = combineReducers({\n  stockData: stockDataReducer,\n});\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}