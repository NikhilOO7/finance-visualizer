{"version":3,"sources":["components/Payoff.js","store/actions/portfolio.js","components/StockData.js","utility/options.js","utility/constants.js","utility/Option.js","utility/DS/ColorPicker.js","hooks/useUpdateEffect.js","components/Panel.js","context/liveData.js","components/Navigation/DropDownBtn.js","components/Navigation/Navigation.js","components/Search.js","components/Error/Error.js","components/SecurityInfo.js","components/Slider.js","components/StockAnyChart.js","components/PayoffHighChart.js","components/HighStock.js","App.js","store/reducers/portfolio.js","index.js"],"names":["Payoff","data","d3","remove","useEffect","myData","Ydomain","nv","newChart","lineChart","margin","left","useInteractiveGuideline","showLegend","showYAxis","showXAxis","xAxis","axisLabel","tickFormat","yAxis","forceY","datum","call","windowResize","update","drawChart","className","id","updateContract","contractName","property","value","type","updateStockData","StockData","liveMode","stockData","useSelector","state","portfolio","dispatch","useDispatch","placeholder","currentPrice","disabled","onChange","e","actions","target","volatility","interest","evaluatePayoffFunc","option","price","cost","amount","cts","direction","Math","max","parseInt","strike","min","BlackScholes","optionType","S","X","T","r","v","d1","log","sqrt","d2","CND","exp","x","k","PI","BUY","SELL","CALL","PUT","CASH","stockDataInitialState","ticker","updatePortfolioPrices","key","contract","getPrice","debitCredit","timeDiff","dateDiffInYears","date","round","num","n","res","toFixed","UNIXToDateString","UNIX_timestamp","a","Date","moment","format","createDateNYearsFromNow","d","year","getFullYear","month","getMonth","day","getDate","console","c","futureDate","currentDate","diff","initialPortfolioId","initialPortfolio","getRelativeStrike","impliedVol","N","optionData","targetDate","Infinity","actualDate","expirationDate","dateDiff","abs","finalStrike","options","minDiffStrike","toUpperCase","getLongCondor","firstStrike","firstDate","firstPrice","secondStrike","secondDate","secondPrice","thirdStrike","thirdDate","thirdPrice","fourthStrike","fourthDate","fourthPrice","firstId","secondId","thirdId","fourthId","getShortCondor","getBullCallSpread","getBearPutSpread","getLongStraddle","getShortStraddle","getLongButterfly","getShortButterfly","Option","this","toISOString","ColorPicker","colors","index","result","length","useUpdateEffect","effect","dependencies","isInitialMount","useRef","current","Contract","props","useState","expirationDates","setExpirationDates","selectedDate","setSelectedDate","strikePrices","setStrikePrices","setPrice","map","item","apiContract","find","ask","bid","strikesAtDate","util","cashContract","class","isNaN","style","verticalAlign","aria-label","onClick","contractId","aria-hidden","Panel","premium","debitcredit","calculateTotal","newContract","push","renderContracts","liveDataContext","React","createContext","setLiveMode","DropDownBtn","open","setOpen","anchorRef","handleClose","event","newPortfolio","contains","handleListKeyDown","preventDefault","prevOpen","focus","Button","ref","aria-controls","undefined","aria-haspopup","color","Popper","anchorEl","role","transition","disablePortal","TransitionProps","placement","Grow","transformOrigin","Paper","ClickAwayListener","onClickAway","MenuList","autoFocusItem","onKeyDown","MenuItem","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","navbar","marginBottom","position","zIndex","MenuAppBar","setPortfolio","classes","useContext","AppBar","Toolbar","Typography","variant","FormGroup","FormControlLabel","control","Switch","checked","prev","label","height","widht","Search","searchFunc","inputValue","setInputValue","Container","Row","Col","md","Autocomplete","symbols","getOptionLabel","displaySymbol","description","filterOptions","query","filter","o","includes","renderInput","params","TextField","noOptionsText","Error","children","data-dismiss","removeFunc","SecurityInfo","Card","Body","width","input","slider","InputSlider","setValue","gutterBottom","Grid","container","alignItems","xs","Slider","newValue","aria-labelledby","StockAnyChart","newData","forEach","pnt","stockDataTable","anychart","table","addData","chart","plot","area","mapAs","name","scroller","selectRange","instance","PayoffHighChart","highcharts","Highcharts","App","mockData","mockOptions","rangeSelector","selected","text","labels","align","lineWidth","resize","enabled","top","offset","tooltip","split","series","columnData","i","HighStock","constructorType","setData","errors","setErrors","stockErrors","setStockErrors","setOptionData","minX","setMinX","maxX","setMaxX","stockChartData","setStockChartData","viewHighChart","setViewHighChart","viewHighStock","setViewHighStock","hcData","setHcData","daysToExpiration","setDaysToExpiration","setErrs","useCallback","message","setStockErrs","updateData","Object","keys","strikes","maxStrike","minStrike","values","theoretical","average","change","floor","sort","b","getColor","minProfit","maxProfit","profitSum","theoreticalPL","profitAtStrike","blackScholesValue","y","strategyData","strategyTheoretical","seriesInfo","visible","point","fetchStockData","fetchOptionData","axios","get","process","lastTradePrice","code","unix","t","h","l","updateDaysToExpiration","days","newDate","dayObject","valueOf","setDate","Provider","visualize","val","onBlur","initialState","resetPortfolio","action","removeContract","addContract","updatePrices","newStockData","updateAllContracts","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4a223298.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport * as nv from \"nvd3\";\n\nconst Payoff = ({ data }) => {\n  // Clear the Charts\n  d3.selectAll(\"svg > *\").remove();\n\n  const drawChart = ({ data: myData, Ydomain }) => {\n    /*These lines are all chart setup.  Pick and choose which chart features you want to utilize. */\n    nv.addGraph(() => {\n      const newChart = nv.models\n        .lineChart()\n        .margin({ left: 100 }) //Adjust chart margins to give the x-axis some breathing room.\n        .useInteractiveGuideline(false) //We want nice looking tooltips and a guideline!\n        // .duration(1500) //how fast do you want the lines to transition? Was removed, caused wrong data points positions after doing a transition bug https://github.com/novus/nvd3/issues/2018\n        .showLegend(true) //Show the legend, allowing users to turn on/off line series.\n        .showYAxis(true) //Show the y-axis\n        .showXAxis(true); //Show the x-axis\n\n      newChart.xAxis //Chart x-axis settings\n        .axisLabel(\"Price ($)\")\n        .tickFormat(d3.format(\",.2f\"));\n\n      newChart.yAxis //Chart y-axis settings\n        .axisLabel(\"Profit ($)\")\n        .tickFormat(d3.format(\",.2f\"));\n\n      newChart.forceY(Ydomain);\n\n      d3.select(\"#chart svg\") //Select the <svg> element you want to render the chart in.\n        .datum(myData) //Populate the <svg> element with chart data...\n        .call(newChart); //Finally, render the chart!\n\n      // Update the chart when window resizes.\n      nv.utils.windowResize(newChart.update);\n\n      return newChart;\n    });\n  };\n\n  // UseEffect with no deps so that a chart is always rendered\n  useEffect(() => {\n    data && drawChart(data);\n  });\n\n  // console.log(\"Payoff Rendered\");\n\n  return (\n    <>\n      <div className=\"panel-body\">\n        <div id=\"chart\">\n          <svg></svg>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Payoff;\n","export const ADD_CONTRACT = \"ADD_CONTRACT\";\nexport const REMOVE_CONTRACT = \"REMOVE_CONTRACT\";\nexport const RESET_PORTFOLIO = \"RESET_PORTFOLIO\";\nexport const SET_PORTFOLIO = \"SET_PORTFOLIO\";\nexport const UPDATE_PRICES = \"UPDATE_PRICES\";\nexport const UPDATE_CONTRACT = \"UPDATE_CONTRACT\";\nexport const UPDATE_ALL_CONTRACTS = \"UPDATE_ALL_CONTRACTS\";\n\nexport const addContract = (newContract) => {\n  return {\n    type: ADD_CONTRACT,\n    newContract,\n  };\n};\n\nexport const updateContract = (contractName, property, value) => {\n  return {\n    type: UPDATE_CONTRACT,\n    property,\n    value,\n    contractName,\n  };\n};\n\nexport const updateAllContracts = (property, value) => {\n  return {\n    type: UPDATE_ALL_CONTRACTS,\n    property,\n    value,\n  };\n};\n\nexport const removeContract = (contractId) => {\n  return {\n    type: REMOVE_CONTRACT,\n    contractId,\n  };\n};\n\nexport const resetPortfolio = () => {\n  return {\n    type: RESET_PORTFOLIO,\n  };\n};\n\nexport const setPortfolio = (newPortfolio) => {\n  return {\n    type: SET_PORTFOLIO,\n    newPortfolio,\n  };\n};\n\nexport const updatePrices = () => {\n  return {\n    type: UPDATE_PRICES,\n  };\n};\n\n// Stock Data\nexport const UPDATE_PRICE = \"UPDATE_PRICE\";\nexport const UPDATE_VOLATILITY = \"UPDATE_VOLATILITY\";\nexport const UPDATE_INTEREST = \"UPDATE_INTEREST\";\nexport const UPDATE_TICKER = \"UPDATE_TICKER\";\nexport const RESET_DATA = \"RESET_DATA\";\nexport const UPDATE_STOCK_DATA = \"UPDATE_STOCK_DATA\";\n\nexport const updateStockData = (property, value) => {\n  return {\n    type: UPDATE_STOCK_DATA,\n    property,\n    value,\n  };\n};\n\nexport const resetData = () => {\n  return {\n    type: RESET_DATA,\n  };\n};\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as actions from \"../store/actions/portfolio\";\n\nconst StockData = ({ liveMode }) => {\n  const { stockData } = useSelector((state) => state.portfolio);\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"panel panel-primary\">\n      <div className=\"panel-heading\">Underlying stock</div>\n      <div className=\"panel-body\">\n        <form className=\"form-horizontal\">\n          <div className=\"form-group\">\n            <label className=\"col-sm-5 control-label\">Current price ($)</label>\n            <div className=\"col-sm-7\">\n              <input\n                type=\"number\"\n                placeholder=\"CurrentPrice\"\n                className=\"form-control\"\n                value={stockData.currentPrice}\n                disabled={liveMode}\n                onChange={(e) => {\n                  dispatch(\n                    actions.updateStockData(\"currentPrice\", e.target.value)\n                  );\n                }}\n              />\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <label className=\"col-sm-5 control-label\">Volatility (%)</label>\n            <div className=\"col-sm-7\">\n              <input\n                type=\"number\"\n                placeholder=\"Volatility\"\n                className=\"form-control\"\n                value={stockData.volatility}\n                onChange={(e) =>\n                  dispatch(\n                    actions.updateStockData(\"volatility\", e.target.value)\n                  )\n                }\n              />\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <label className=\"col-sm-5 control-label\">Interest Rate (%)</label>\n            <div className=\"col-sm-7\">\n              <input\n                type=\"number\"\n                placeholder=\"Interest Rate\"\n                className=\"form-control\"\n                value={stockData.interest}\n                onChange={(e) =>\n                  dispatch(\n                    actions.updateStockData(\"interest\", e.target.value)\n                  )\n                }\n              />\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default StockData;\n","import * as cts from \"./constants\";\nimport Option from \"./Option\";\n\n/**\n * Evaluates a Payoff Function\n *\n * @param {Option} option An option Object\n * @param {Number} price A given stock price\n * @param {Object} stockData StockData object containing the stock currentPrice\n * @returns {Number} The value of the option/stock\n */\n\n// Takes in option object and evaluates the payoff given the input price\nexport const evaluatePayoffFunc = (option, price, stockData) => {\n  const cost = option.price * option.amount;\n  if (option.type === cts.CALL) {\n    // A call Option\n    if (option.direction === cts.BUY) {\n      // Long Call\n      return (\n        Math.max(price - parseInt(option.strike), 0) * option.amount - cost\n      );\n    }\n    // Short Call\n    return Math.min(0, option.strike - price) * option.amount + cost;\n  } else if (option.type === cts.PUT) {\n    // A Put Option\n    if (option.direction === cts.BUY) {\n      // Long Put\n      return (\n        Math.max(parseInt(option.strike) - price, 0) * option.amount - cost\n      );\n    }\n    // Short Put\n    return Math.min(0, price - option.strike) * option.amount + cost;\n  } else if (option.type === cts.CASH) {\n    // Stock\n    if (option.direction === cts.BUY) {\n      // Long Stock\n      return (price - stockData.currentPrice) * option.amount;\n    }\n    // Short Stock\n    return (stockData.currentPrice - price) * option.amount;\n  }\n};\n\n/**\n * Calculates Stock Price Based On BS model\n *\n * @param {String} optionType The type of option - cts.CALL or cts.PUT\n * @param {Number} S Current Stock price\n * @param {Number} X Exercise Price\n * @param {Number} T Time remaining to the expiration Date (in years)\n * @param {Number} r Short-term risk free interest rate\n * @param {Number} v Standard deviation of stock price (implied volatility)\n * @returns {Number} The Price of the option\n */\n\nexport function BlackScholes(optionType, S, X, T, r, v) {\n  // Unit adjustments\n  v = v / 100;\n  r = r / 100;\n  var d1 = (Math.log(S / X) + (r + (v * v) / 2) * T) / (v * Math.sqrt(T));\n  var d2 = d1 - v * Math.sqrt(T);\n  if (optionType === cts.CALL) {\n    return cts.round(S * CND(d1) - X * Math.exp(-r * T) * CND(d2));\n  } else {\n    return cts.round(X * Math.exp(-r * T) * CND(-d2) - S * CND(-d1));\n  }\n}\n\n/* The cumulative Normal distribution function: */\nfunction CND(x) {\n  if (x < 0) {\n    return 1 - CND(-x);\n  } else {\n    let k = 1 / (1 + 0.2316419 * x);\n    return (\n      1 -\n      (Math.exp((-x * x) / 2) / Math.sqrt(2 * Math.PI)) *\n        k *\n        (0.31938153 +\n          k *\n            (-0.356563782 +\n              k * (1.781477937 + k * (-1.821255978 + k * 1.330274429))))\n    );\n  }\n}\n","import moment from \"moment\";\nimport { BlackScholes } from \"./options\";\n\nexport const BUY = \"Buy\";\nexport const SELL = \"Sell\";\nexport const CALL = \"Call\";\nexport const PUT = \"Put\";\nexport const CASH = \"Cash\";\n\n// Some Error Message variables\nexport const STOCK_NO_OPTIONS = \"This Stock Has No Available Options\";\nexport const STOCK_ERR_FETCH = \"Unable To Fetch Stock Data, Try again Later\";\n\n// Initial Stock Data State\nexport const stockDataInitialState = {\n  ticker: \"Theoretical\",\n  currentPrice: 100,\n  volatility: 30,\n  interest: 2,\n};\n\nexport const updatePortfolioPrices = (portfolio, stockData) => {\n  for (let key in portfolio) {\n    const contract = portfolio[key];\n    if (contract.type === CASH) {\n      contract.price = stockData.currentPrice;\n    } else {\n      contract.price = getPrice(contract, stockData);\n    }\n    contract.debitCredit =\n      contract.direction === SELL ? contract.price : -contract.price;\n  }\n};\n\nconst getPrice = (contract, stockData) => {\n  const timeDiff = dateDiffInYears(contract.date);\n  return round(\n    BlackScholes(\n      contract.type,\n      stockData.currentPrice,\n      contract.strike,\n      timeDiff,\n      stockData.interest,\n      stockData.volatility\n    )\n  );\n};\n\n/**\n * Round a number to a given number of digits\n *\n * @param {Number | String} num The number to round\n * @param {Number | null} n The number of significant digits, defaults to 2\n * @returns {Number} The rounded number\n */\n\n// Round a Number\nexport const round = (num, n = 2) => {\n  // If it is a string convert it to num\n  if (typeof num === \"string\") {\n    num = +num;\n  }\n  let res = num.toFixed(n);\n  return +res;\n};\n\n/**\n * Converts a UNIX Timestamp to Date String in the format: YYYY-MM-DD\n *\n * @param {Number} UNIX_timestamp A unix timestamp\n * @returns {String} Date String in the format: YYYY-MM-DD\n */\n\nexport const UNIXToDateString = (UNIX_timestamp) => {\n  const a = new Date(UNIX_timestamp * 1000);\n  return moment(a).format(\"YYYY-MM-DD\");\n};\n\n/**\n * Adds a number of days to a given date object\n *\n * @param {Date} dayObject A Date Object\n * @param {Number} days The number of days to be added\n * @returns {Date} Date Object after adding the days\n */\n\n// Function that adds num days to a date object\nexport const addDays = (dayObject, days) => {\n  var date = new Date(dayObject.valueOf());\n  date.setDate(date.getDate() + days);\n  return date;\n};\n\n/**\n * Creates a Date String of Format YYYY-MM-DD after N years from the present\n *\n * @param {Number} n The number of years to be added\n * @returns {Date} Date Object after adding the years\n */\n\n// Create a Date 1 year from now, used as default date on contract\nconst createDateNYearsFromNow = (n) => {\n  var d = new Date();\n  var year = d.getFullYear();\n  var month = d.getMonth();\n  var day = d.getDate();\n  console.log(year);\n  var c = new Date(year + n, month, day);\n  return moment(c).format(\"YYYY-MM-DD\");\n};\n\n/**\n * Gets the difference between two dates in years\n *\n * @param {Date} futureDate The Future Date\n * @param {Date} currentDate The Past Date, defaults to the present Date\n * @returns {Date} Date Object after adding the years\n */\n\nexport const dateDiffInYears = (futureDate, currentDate = new Date()) => {\n  return -moment(currentDate).diff(futureDate, \"years\", true);\n};\n\n// Create the initialPortfolio\n\n// Date used in initial portfolio\nexport const date = createDateNYearsFromNow(1);\n\nconst initialPortfolioId = {\n  amount: 1,\n  contractName: \"initialPortfolioId\",\n  date,\n  direction: BUY,\n  strike: 100,\n  type: CALL,\n};\n\nconst price = getPrice(initialPortfolioId, stockDataInitialState);\n\ninitialPortfolioId.price = price;\n\ninitialPortfolioId.debitCredit = price;\n\n// The initial Theoretical Option Portfolio\nexport const initialPortfolio = {\n  initialPortfolioId,\n};\n\n/* Function that takes in currentPrice, impliedVolatility and a number representing\nThe desired deviation from the current price. Used when calculating strikes on option\nstrategies */\nexport const getRelativeStrike = (\n  currentPrice,\n  impliedVol,\n  N,\n  optionData,\n  type,\n  interest\n) => {\n  let strike =\n    round(currentPrice) + round(currentPrice) * round(impliedVol / 100) * N;\n\n  if (!optionData) {\n    const dateDiff = dateDiffInYears(date);\n    const price = BlackScholes(\n      type,\n      currentPrice,\n      strike,\n      dateDiff,\n      interest,\n      impliedVol\n    );\n    return { strike, date, price };\n  }\n  // Adjust According to OptionData\n\n  /*\n    Steps:\n    1. Find Find a date that is the closest to one year from now given optionData\n    2. Given the date, find a strike that is closest to the relative strike that \n    was calculated previously.\n  */\n\n  // Find a date that is the closest to one year from now given optionData\n  const targetDate = createDateNYearsFromNow(1);\n  let min = Infinity;\n  let actualDate = null;\n\n  for (let key in optionData.data) {\n    const { expirationDate } = optionData.data[key];\n    // Take Math abs so that we get a number in the future\n    const dateDiff = Math.abs(dateDiffInYears(expirationDate, targetDate));\n    if (dateDiff < min) {\n      min = dateDiff;\n      actualDate = expirationDate;\n    }\n  }\n\n  let finalStrike = strike;\n  // For each of the option contracts with the given exp Date find the one closest\n  // To the calculated strike price\n  for (let key in optionData.data) {\n    const { options, expirationDate } = optionData.data[key];\n    if (expirationDate === actualDate) {\n      let minDiffStrike = Infinity;\n      for (let option of options[type.toUpperCase()]) {\n        if (Math.abs(option.strike - strike) < minDiffStrike) {\n          minDiffStrike = Math.abs(option.strike - strike);\n          finalStrike = option.strike;\n        }\n      }\n    }\n  }\n\n  const dateDiff = dateDiffInYears(actualDate);\n  const price = round(\n    BlackScholes(\n      type,\n      currentPrice,\n      finalStrike,\n      dateDiff,\n      interest,\n      impliedVol\n    )\n  );\n\n  return { strike: finalStrike, date: actualDate, price };\n};\n\n// Return a long condor strategy option portfolio, given the currentprice, volatility\n// and live option data.\nexport const getLongCondor = (\n  currentPrice,\n  impliedVol,\n  optionData,\n  interest\n) => {\n  const {\n    strike: firstStrike,\n    date: firstDate,\n    price: firstPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    -1,\n    optionData,\n    CALL,\n    interest\n  );\n\n  const {\n    strike: secondStrike,\n    date: secondDate,\n    price: secondPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    -0.5,\n    optionData,\n    CALL,\n    interest\n  );\n\n  const {\n    strike: thirdStrike,\n    date: thirdDate,\n    price: thirdPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    0.5,\n    optionData,\n    CALL,\n    interest\n  );\n\n  const {\n    strike: fourthStrike,\n    date: fourthDate,\n    price: fourthPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    1,\n    optionData,\n    CALL,\n    interest\n  );\n\n  return {\n    firstId: {\n      amount: 1,\n      contractName: \"firstId\",\n      date: firstDate,\n      direction: BUY,\n      price: firstPrice,\n      strike: firstStrike,\n      type: CALL,\n    },\n    secondId: {\n      amount: 1,\n      contractName: \"secondId\",\n      date: secondDate,\n      direction: SELL,\n      price: secondPrice,\n      strike: secondStrike,\n      type: CALL,\n    },\n    thirdId: {\n      amount: 1,\n      contractName: \"thirdId\",\n      date: thirdDate,\n      direction: SELL,\n      price: thirdPrice,\n      strike: thirdStrike,\n      type: CALL,\n    },\n    fourthId: {\n      amount: 1,\n      contractName: \"fourthId\",\n      date: fourthDate,\n      direction: BUY,\n      price: fourthPrice,\n      strike: fourthStrike,\n      type: CALL,\n    },\n  };\n};\n\nexport const getShortCondor = (\n  currentPrice,\n  impliedVol,\n  optionData,\n  interest\n) => {\n  const {\n    strike: firstStrike,\n    date: firstDate,\n    price: firstPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    0.5,\n    optionData,\n    CALL,\n    interest\n  );\n\n  const {\n    strike: secondStrike,\n    date: secondDate,\n    price: secondPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    1,\n    optionData,\n    CALL,\n    interest\n  );\n\n  const {\n    strike: thirdStrike,\n    date: thirdDate,\n    price: thirdPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    -0.5,\n    optionData,\n    PUT,\n    interest\n  );\n\n  const {\n    strike: fourthStrike,\n    date: fourthDate,\n    price: fourthPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    -1,\n    optionData,\n    PUT,\n    interest\n  );\n\n  return {\n    firstId: {\n      amount: 1,\n      contractName: \"firstId\",\n      date: firstDate,\n      direction: BUY,\n      price: firstPrice,\n      strike: firstStrike,\n      type: CALL,\n    },\n    secondId: {\n      amount: 1,\n      contractName: \"secondId\",\n      date: secondDate,\n      direction: SELL,\n      price: secondPrice,\n      strike: secondStrike,\n      type: CALL,\n    },\n    thirdId: {\n      amount: 1,\n      contractName: \"thirdId\",\n      date: thirdDate,\n      direction: BUY,\n      price: thirdPrice,\n      strike: thirdStrike,\n      type: PUT,\n    },\n    fourthId: {\n      amount: 1,\n      contractName: \"fourthId\",\n      date: fourthDate,\n      direction: SELL,\n      price: fourthPrice,\n      strike: fourthStrike,\n      type: PUT,\n    },\n  };\n};\n\nexport const getBullCallSpread = (\n  currentPrice,\n  impliedVol,\n  optionData,\n  interest\n) => {\n  const {\n    strike: firstStrike,\n    date: firstDate,\n    price: firstPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    0,\n    optionData,\n    CALL,\n    interest\n  );\n\n  const {\n    strike: secondStrike,\n    date: secondDate,\n    price: secondPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    0.5,\n    optionData,\n    CALL,\n    interest\n  );\n\n  return {\n    firstId: {\n      amount: 1,\n      contractName: \"firstId\",\n      date: firstDate,\n      direction: BUY,\n      price: firstPrice,\n      strike: firstStrike,\n      type: CALL,\n    },\n    secondId: {\n      amount: 1,\n      contractName: \"secondId\",\n      date: secondDate,\n      direction: SELL,\n      price: secondPrice,\n      strike: secondStrike,\n      type: CALL,\n    },\n  };\n};\n\nexport const getBearPutSpread = (\n  currentPrice,\n  impliedVol,\n  optionData,\n  interest\n) => {\n  const {\n    strike: firstStrike,\n    date: firstDate,\n    price: firstPrice,\n  } = getRelativeStrike(currentPrice, impliedVol, 0, optionData, PUT, interest);\n\n  const {\n    strike: secondStrike,\n    date: secondDate,\n    price: secondPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    -0.5,\n    optionData,\n    PUT,\n    interest\n  );\n\n  return {\n    firstId: {\n      amount: 1,\n      contractName: \"firstId\",\n      date: firstDate,\n      direction: BUY,\n      price: firstPrice,\n      strike: firstStrike,\n      type: PUT,\n    },\n    secondId: {\n      amount: 1,\n      contractName: \"secondId\",\n      date: secondDate,\n      direction: SELL,\n      price: secondPrice,\n      strike: secondStrike,\n      type: PUT,\n    },\n  };\n};\n\nexport const getLongStraddle = (\n  currentPrice,\n  impliedVol,\n  optionData,\n  interest\n) => {\n  const {\n    strike: firstStrike,\n    date: firstDate,\n    price: firstPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    0,\n    optionData,\n    CALL,\n    interest\n  );\n\n  const {\n    strike: secondStrike,\n    date: secondDate,\n    price: secondPrice,\n  } = getRelativeStrike(currentPrice, impliedVol, 0, optionData, PUT, interest);\n\n  return {\n    firstId: {\n      amount: 1,\n      contractName: \"firstId\",\n      date: firstDate,\n      direction: BUY,\n      price: firstPrice,\n      strike: firstStrike,\n      type: CALL,\n    },\n    secondId: {\n      amount: 1,\n      contractName: \"secondId\",\n      date: secondDate,\n      direction: BUY,\n      price: secondPrice,\n      strike: secondStrike,\n      type: PUT,\n    },\n  };\n};\n\nexport const getShortStraddle = (\n  currentPrice,\n  impliedVol,\n  optionData,\n  interest\n) => {\n  const {\n    strike: firstStrike,\n    date: firstDate,\n    price: firstPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    0,\n    optionData,\n    CALL,\n    interest\n  );\n\n  const {\n    strike: secondStrike,\n    date: secondDate,\n    price: secondPrice,\n  } = getRelativeStrike(currentPrice, impliedVol, 0, optionData, PUT, interest);\n\n  return {\n    firstId: {\n      amount: 1,\n      contractName: \"firstId\",\n      date: firstDate,\n      direction: SELL,\n      price: firstPrice,\n      strike: firstStrike,\n      type: CALL,\n    },\n    secondId: {\n      amount: 1,\n      contractName: \"secondId\",\n      date: secondDate,\n      direction: SELL,\n      price: secondPrice,\n      strike: secondStrike,\n      type: PUT,\n    },\n  };\n};\n\nexport const getLongStradde = (\n  currentPrice,\n  impliedVol,\n  optionData,\n  interest\n) => {\n  const {\n    strike: firstStrike,\n    date: firstDate,\n    price: firstPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    0.5,\n    optionData,\n    CALL,\n    interest\n  );\n\n  const {\n    strike: secondStrike,\n    date: secondDate,\n    price: secondPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    -0.5,\n    optionData,\n    PUT,\n    interest\n  );\n\n  return {\n    firstId: {\n      amount: 1,\n      contractName: \"firstId\",\n      date: firstDate,\n      direction: BUY,\n      price: firstPrice,\n      strike: firstStrike,\n      type: CALL,\n    },\n    secondId: {\n      amount: 1,\n      contractName: \"secondId\",\n      date: secondDate,\n      direction: BUY,\n      price: secondPrice,\n      strike: secondStrike,\n      type: PUT,\n    },\n  };\n};\n\nexport const getShortStrangle = (\n  currentPrice,\n  impliedVol,\n  optionData,\n  interest\n) => {\n  const {\n    strike: firstStrike,\n    date: firstDate,\n    price: firstPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    0.5,\n    optionData,\n    CALL,\n    interest\n  );\n\n  const {\n    strike: secondStrike,\n    date: secondDate,\n    price: secondPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    -0.5,\n    optionData,\n    PUT,\n    interest\n  );\n\n  return {\n    firstId: {\n      amount: 1,\n      contractName: \"firstId\",\n      date: firstDate,\n      direction: SELL,\n      price: firstPrice,\n      strike: firstStrike,\n      type: CALL,\n    },\n    secondId: {\n      amount: 1,\n      contractName: \"secondId\",\n      date: secondDate,\n      direction: SELL,\n      price: secondPrice,\n      strike: secondStrike,\n      type: PUT,\n    },\n  };\n};\n\nexport const getLongButterfly = (\n  currentPrice,\n  impliedVol,\n  optionData,\n  interest\n) => {\n  const {\n    strike: firstStrike,\n    date: firstDate,\n    price: firstPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    -0.5,\n    optionData,\n    CALL,\n    interest\n  );\n\n  const {\n    strike: secondStrike,\n    date: secondDate,\n    price: secondPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    0.0,\n    optionData,\n    CALL,\n    interest\n  );\n\n  const {\n    strike: thirdStrike,\n    date: thirdDate,\n    price: thirdPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    0.5,\n    optionData,\n    CALL,\n    interest\n  );\n\n  return {\n    firstId: {\n      amount: 1,\n      contractName: \"firstId\",\n      date: firstDate,\n      direction: BUY,\n      price: firstPrice,\n      strike: firstStrike,\n      type: CALL,\n    },\n    secondId: {\n      amount: 2,\n      contractName: \"secondId\",\n      date: secondDate,\n      direction: SELL,\n      price: secondPrice,\n      strike: secondStrike,\n      type: CALL,\n    },\n    thirdId: {\n      amount: 1,\n      contractName: \"thirdId\",\n      date: thirdDate,\n      direction: BUY,\n      price: thirdPrice,\n      strike: thirdStrike,\n      type: CALL,\n    },\n  };\n};\n\nexport const getShortButterfly = (\n  currentPrice,\n  impliedVol,\n  optionData,\n  interest\n) => {\n  const {\n    strike: firstStrike,\n    date: firstDate,\n    price: firstPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    0.0,\n    optionData,\n    CALL,\n    interest\n  );\n\n  const {\n    strike: secondStrike,\n    date: secondDate,\n    price: secondPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    0.5,\n    optionData,\n    CALL,\n    interest\n  );\n\n  const {\n    strike: thirdStrike,\n    date: thirdDate,\n    price: thirdPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    0.0,\n    optionData,\n    PUT,\n    interest\n  );\n\n  const {\n    strike: fourthStrike,\n    date: fourthDate,\n    price: fourthPrice,\n  } = getRelativeStrike(\n    currentPrice,\n    impliedVol,\n    -0.5,\n    optionData,\n    PUT,\n    interest\n  );\n\n  return {\n    firstId: {\n      amount: 1,\n      contractName: \"firstId\",\n      date: firstDate,\n      direction: BUY,\n      price: firstPrice,\n      strike: firstStrike,\n      type: CALL,\n    },\n    secondId: {\n      amount: 1,\n      contractName: \"secondId\",\n      date: secondDate,\n      direction: SELL,\n      price: secondPrice,\n      strike: secondStrike,\n      type: CALL,\n    },\n    thirdId: {\n      amount: 1,\n      contractName: \"thirdId\",\n      date: thirdDate,\n      direction: BUY,\n      price: thirdPrice,\n      strike: thirdStrike,\n      type: PUT,\n    },\n    fourthId: {\n      amount: 1,\n      contractName: \"fourthId\",\n      date: fourthDate,\n      direction: SELL,\n      price: fourthPrice,\n      strike: fourthStrike,\n      type: PUT,\n    },\n  };\n};\n","import * as cts from \"./constants\";\n\n// Option definition class\nexport default class Option {\n  constructor(contractName) {\n    this.contractName = new Date().toISOString()\n    this.strike = 100;\n    this.date = cts.date;\n    this.direction = cts.BUY;\n    this.type = cts.CALL;\n    this.amount = 1;\n    this.debitCredit = 0;\n  }\n}\n","// Color Picker Structure to help select color on graph\nexport default class ColorPicker {\n    // Available colors, more can be added\n    colors = [\n        \"blue\",\n        \"red\",\n        \"yellow\",\n        \"purple\",\n        \"orange\",\n        \"black\",\n    ]\n\n    constructor() {\n        this.index = 0;\n    }\n\n    // Get the Next Color\n    getColor(){\n        const result =  this.colors[this.index];\n        // Adjust the index;\n        if(this.index >= this.colors.length){\n            // We have reached the end reset to zero\n            this.index = 0;\n        }else{\n            // Not at end just add one to index\n            this.index++;\n        }\n        return result;\n    }\n}","/**\n * A custom useEffect hook that only triggers on updates, not on initial mount\n * Idea stolen from: https://stackoverflow.com/a/55075818/1526448\n * @param {Function} effect\n * @param {Array<any>} dependencies\n */\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useUpdateEffect(effect, dependencies = []) {\n  const isInitialMount = useRef(true);\n\n  useEffect(() => {\n    if (isInitialMount.current) {\n      isInitialMount.current = false;\n    } else {\n      effect();\n    }\n  }, dependencies);\n}\n","import React, { useEffect, useState, useCallback } from \"react\";\nimport Option from \"../utility/Option\";\nimport { BlackScholes, SELL } from \"../utility\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as util from \"../utility\";\nimport useUpdateEffect from \"../hooks/useUpdateEffect\";\nimport * as actions from \"../store/actions/portfolio\";\n\n// TODO: make contract component lean by outsorcing logic to redux\nconst Contract = (props) => {\n  const { data, optionData } = props;\n\n  /*\n   If optionData is defined then the strike prices must adjust to the\n   Expiration date\n   */\n\n  // Default state values are when a strategy is selected in live mode\n  const [expirationDates, setExpirationDates] = useState([]);\n  const [selectedDate, setSelectedDate] = useState(data.date);\n  const [strikePrices, setStrikePrices] = useState([[data.strike]]);\n\n  const dispatch = useDispatch();\n\n  // Stock data from redux\n  const { stockData } = useSelector((state) => state.portfolio);\n\n  // Calculate the price based on Black-Scholes model\n  const [price, setPrice] = useState(data.price);\n\n  // Set expiration Dates when component mounts\n  useEffect(() => {\n    if (optionData) {\n      const expirationDates = optionData.data.map(\n        (item) => item.expirationDate\n      );\n      setExpirationDates(expirationDates);\n    }\n  }, []);\n\n  // Update strike and price at change\n  useUpdateEffect(() => {\n    if (optionData) {\n      // Find the element with same date\n      const apiContract = optionData.data.find(\n        (item) => item.expirationDate === selectedDate\n      );\n\n      if (!apiContract) return;\n\n      // Find the type of option this is\n      const type = data.type.toUpperCase();\n\n      // Extract the contracts given the date\n      const contractsAtDate = apiContract.options[type];\n\n      // Find the contract with the selected Strike\n      const contract = contractsAtDate.find(\n        (item) => +item.strike === +data.strike\n      );\n\n      // Set the price depending if we are short or long\n      if (data.direction === \"Buy\") {\n        dispatch(\n          actions.updateContract(data.contractName, \"price\", contract.ask)\n        );\n      } else {\n        dispatch(\n          actions.updateContract(data.contractName, \"price\", contract.bid)\n        );\n      }\n    }\n  }, [data.strike, setPrice]);\n\n  useUpdateEffect(() => {\n    if (optionData) {\n      // Find the element with same date\n      const apiContract = optionData.data.find(\n        (item) => item.expirationDate === selectedDate\n      );\n\n      // If none found return\n      if (!apiContract) return;\n\n      // Find the type of option this is\n      const type = data.type.toUpperCase();\n\n      // Extract the contracts given the date\n      const contractsAtDate = apiContract.options[type];\n\n      // Make an array of strikes at the current date\n      const strikesAtDate = contractsAtDate.map((item) => item.strike);\n\n      // Update strikeprices\n      setStrikePrices(strikesAtDate);\n    }\n  }, [selectedDate]);\n\n  // Update type\n  useUpdateEffect(() => {\n    // If we just changed to cash\n    if (data.type === util.CASH) {\n      // Set Debit/Credit equal to the stock price\n      setPrice(stockData.currentPrice);\n    }\n  }, [data.type]);\n\n  const cashContract = data.type === util.CASH;\n\n  return (\n    <tr>\n      {/* Direction: Fully Using Redux */}\n      <td>\n        <select\n          id=\"direction\"\n          className=\"form-control\"\n          value={data.direction}\n          onChange={(e) =>\n            dispatch(\n              actions.updateContract(\n                data.contractName,\n                \"direction\",\n                e.target.value\n              )\n            )\n          }\n        >\n          <option>Buy</option>\n          <option>Sell</option>\n        </select>\n      </td>\n      {/* Amount: Fully Using Redux */}\n      <td>\n        <input\n          type=\"number\"\n          placeholder=\"Amount\"\n          className=\"form-control form-control-inline\"\n          onChange={(e) =>\n            dispatch(\n              actions.updateContract(\n                data.contractName,\n                \"amount\",\n                e.target.value\n              )\n            )\n          }\n          value={data.amount}\n        />\n      </td>\n      {/* Kind: Fully Using Redux*/}\n      <td>\n        <select\n          className=\"form-control\"\n          onChange={(e) =>\n            dispatch(\n              actions.updateContract(data.contractName, \"type\", e.target.value)\n            )\n          }\n          value={data.type}\n        >\n          <option>Call</option>\n          <option>Put</option>\n          <option>Cash</option>\n        </select>\n      </td>\n      {/* Strike Price: TODO UPDATE REDUX */}\n      <td>\n        {!cashContract ? (\n          optionData ? (\n            <div class=\"form-group\">\n              <select\n                class=\"form-control\"\n                id=\"exampleFormControlSelect1\"\n                onChange={(e) =>\n                  dispatch(\n                    actions.updateContract(\n                      data.contractName,\n                      \"strike\",\n                      e.target.value\n                    )\n                  )\n                }\n                value={data.strike}\n              >\n                {strikePrices.map((price) => (\n                  <option>{isNaN(price) ? null : price}</option>\n                ))}\n              </select>\n            </div>\n          ) : (\n            <input\n              type=\"number\"\n              placeholder=\"Strike\"\n              className=\"form-control form-control-inline\"\n              onChange={(e) =>\n                dispatch(\n                  actions.updateContract(\n                    data.contractName,\n                    \"strike\",\n                    e.target.value\n                  )\n                )\n              }\n              value={data.strike}\n            />\n          )\n        ) : null}\n      </td>\n      {/* Expiry Date */}\n      <td>\n        {!cashContract &&\n          (!optionData ? (\n            <input\n              type=\"date\"\n              placeholder=\"Expiry\"\n              className=\"form-control form-control-inline\"\n              onChange={(e) =>\n                dispatch(\n                  actions.updateContract(\n                    data.contractName,\n                    \"date\",\n                    e.target.value\n                  )\n                )\n              }\n              value={data.date}\n            />\n          ) : (\n            <div class=\"form-group\">\n              <select\n                class=\"form-control\"\n                id=\"exampleFormControlSelect1\"\n                onChange={(e) => setSelectedDate(e.target.value)}\n                value={selectedDate}\n              >\n                {expirationDates.map((date) => (\n                  <option>{date}</option>\n                ))}\n              </select>\n            </div>\n          ))}\n      </td>\n      {/* Premium/Price */}\n      <td style={{ verticalAlign: \"middle\" }}>\n        <b>{data.price * data.amount}</b>\n      </td>\n      {/* Debit/Credit: TODO add as property in Option Obj, updated in */}\n      <td style={{ verticalAlign: \"middle\" }}>\n        <b>{data.debitCredit * data.amount} </b>\n      </td>\n      {/* Remove Button */}\n      <td style={{ verticalAlign: \"middle\" }}>\n        <button\n          type=\"button\"\n          aria-label=\"Left Align\"\n          className=\"btn btn-danger btn-s\"\n          onClick={() => dispatch(actions.removeContract(data.contractName))}\n        >\n          <span aria-hidden=\"true\">Remove</span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n\nconst Panel = (props) => {\n  const { optionData } = props; // removed portfolio\n  const { portfolio, stockData } = useSelector((state) => state.portfolio);\n  const dispatch = useDispatch();\n\n  const renderContracts = () => {\n    const result = [];\n    for (let id in portfolio) {\n      result.push(\n        <Contract optionData={optionData} data={portfolio[id]} key={id} />\n      );\n    }\n    return result;\n  };\n\n  const calculateTotal = () => {\n    let premium = 0;\n    let debitcredit = 0;\n    let amount = 0;\n\n    for (let key in portfolio) {\n      const contract = portfolio[key];\n      premium += +contract.price * +contract.amount;\n      const debitToAdd =\n        contract.direction === SELL ? +contract.price : -+contract.price;\n      debitcredit += debitToAdd * +contract.amount;\n      amount += +contract.amount;\n    }\n    return {\n      premium: premium.toFixed(2),\n      debitcredit: debitcredit.toFixed(2),\n      amount,\n    };\n  };\n\n  const { premium, debitcredit, amount } = calculateTotal();\n\n  return (\n    <div className=\"panel panel-primary\">\n      <div className=\"panel-heading\">Option Portfolio</div>\n      <div className=\"panel-body\">\n        <table className=\"table table-condensed\">\n          <thead>\n            <tr>\n              <th>Direction</th>\n              <th>Amount</th>\n              <th>Kind</th>\n              <th>Strike</th>\n              <th>Expiry</th>\n              <th>Premium</th>\n              <th>Debit/Credit</th>\n              <th>\n                <button\n                  type=\"submit\"\n                  className=\"btn btn-success btn-s\"\n                  onClick={() =>\n                    dispatch(actions.addContract(new Option(), stockData))\n                  }\n                >\n                  Add Leg\n                </button>\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {renderContracts()}\n            <tr>\n              <td>\n                <b>Total</b>\n              </td>\n              <td>\n                <b>{amount}</b>\n              </td>\n              <td></td>\n              <td></td>\n              <td></td>\n              <td>\n                <b>{premium}</b>\n              </td>\n              <td>\n                <b>{debitcredit}</b>\n              </td>\n              <td>\n                <button\n                  type=\"button\"\n                  aria-label=\"Left Align\"\n                  className=\"btn btn-danger btn-s\"\n                  onClick={() => dispatch(actions.resetPortfolio())}\n                >\n                  <span aria-hidden=\"true\">Remove All</span>\n                </button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default Panel;\n","import React from \"react\";\n\nconst defaultValue = {\n  liveMode: false,\n  setLiveMode: () => {},\n};\n\nexport const liveDataContext = React.createContext(defaultValue);\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\nimport Grow from \"@material-ui/core/Grow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Popper from \"@material-ui/core/Popper\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport MenuList from \"@material-ui/core/MenuList\";\nimport * as util from \"../../utility\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as actions from \"../../store/actions/portfolio\";\n\nconst DropDownBtn = ({ optionData }) => {\n  const [open, setOpen] = React.useState(false);\n  const anchorRef = React.useRef(null);\n  const { stockData } = useSelector((state) => state.portfolio);\n  const { currentPrice, volatility, interest } = stockData;\n  const dispatch = useDispatch();\n\n  const handleToggle = () => {\n    setOpen((prevOpen) => !prevOpen);\n  };\n\n  const handleClose = (event, newPortfolio) => {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n\n    if (newPortfolio) {\n      dispatch(\n        actions.setPortfolio(\n          newPortfolio(currentPrice, volatility, optionData, interest)\n        )\n      );\n    }\n\n    setOpen(false);\n  };\n\n  function handleListKeyDown(event) {\n    if (event.key === \"Tab\") {\n      event.preventDefault();\n      setOpen(false);\n    }\n  }\n\n  // return focus to the button when we transitioned from !open -> open\n  const prevOpen = React.useRef(open);\n  React.useEffect(() => {\n    if (prevOpen.current === true && open === false) {\n      anchorRef.current.focus();\n    }\n\n    prevOpen.current = open;\n  }, [open]);\n\n  return (\n    <div>\n      <Button\n        ref={anchorRef}\n        aria-controls={open ? \"menu-list-grow\" : undefined}\n        aria-haspopup=\"true\"\n        onClick={handleToggle}\n        color=\"inherit\"\n      >\n        View Sample Strategies\n      </Button>\n      <Popper\n        open={open}\n        anchorEl={anchorRef.current}\n        role={undefined}\n        transition\n        disablePortal\n      >\n        {({ TransitionProps, placement }) => (\n          <Grow\n            {...TransitionProps}\n            style={{\n              transformOrigin:\n                placement === \"bottom\" ? \"center top\" : \"center bottom\",\n            }}\n          >\n            <Paper>\n              <ClickAwayListener onClickAway={handleClose}>\n                <MenuList\n                  autoFocusItem={open}\n                  id=\"menu-list-grow\"\n                  onKeyDown={handleListKeyDown}\n                >\n                  <MenuItem\n                    onClick={(e) => handleClose(e, util.getBullCallSpread)}\n                  >\n                    Bull Call Spread\n                  </MenuItem>\n                  <MenuItem\n                    onClick={(e) => handleClose(e, util.getBearPutSpread)}\n                  >\n                    Bear Put Spread\n                  </MenuItem>\n                  <MenuItem\n                    onClick={(e) => handleClose(e, util.getLongStraddle)}\n                  >\n                    Long Straddle\n                  </MenuItem>\n                  <MenuItem\n                    onClick={(e) => handleClose(e, util.getShortStraddle)}\n                  >\n                    Short Straddle\n                  </MenuItem>\n                  <MenuItem\n                    onClick={(e) => handleClose(e, util.getLongButterfly)}\n                  >\n                    Long Butterfly\n                  </MenuItem>\n                  <MenuItem\n                    onClick={(e) => handleClose(e, util.getShortButterfly)}\n                  >\n                    Short Butterfly\n                  </MenuItem>\n                  <MenuItem onClick={(e) => handleClose(e, util.getLongCondor)}>\n                    Long Condor\n                  </MenuItem>\n                  <MenuItem\n                    onClick={(e) => handleClose(e, util.getShortCondor)}\n                  >\n                    Short Condor\n                  </MenuItem>\n                </MenuList>\n              </ClickAwayListener>\n            </Paper>\n          </Grow>\n        )}\n      </Popper>\n    </div>\n  );\n};\nexport default DropDownBtn;\n","import React, { useContext } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { liveDataContext } from \"../../context/liveData\";\nimport Switch from \"@material-ui/core/Switch\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport DropDownBtn from \"./DropDownBtn\";\nimport { useDispatch } from \"react-redux\";\nimport * as actions from \"../../store/actions/portfolio\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  navbar: {\n    marginBottom: \"40px\",\n    position: \"relative\",\n    zIndex: \"10\",\n  },\n}));\n\nexport default function MenuAppBar({ setPortfolio, optionData }) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const { liveMode, setLiveMode } = useContext(liveDataContext);\n\n  return (\n    <AppBar position=\"static\" className={classes.navbar}>\n      <Toolbar>\n        <Typography variant=\"h3\" className={classes.title}>\n          Option Strategy Builder\n        </Typography>\n        <DropDownBtn setPortfolio={setPortfolio} optionData={optionData}/>\n        <FormGroup>\n          <FormControlLabel\n            control={\n              <Switch\n                checked={liveMode}\n                onChange={() =>\n                  setLiveMode((prev) => {\n                    if (prev === true) dispatch(actions.resetData());\n                    return !prev;\n                  })\n                }\n                aria-label=\"live mode switch\"\n              />\n            }\n            label={\"Live Data Mode\"}\n          />\n        </FormGroup>\n      </Toolbar>\n    </AppBar>\n  );\n}\n","import React, { useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport symbols from \"../symbols.json\";\nimport { Button } from \"@material-ui/core\";\nimport { Container, Col, Row } from \"react-bootstrap\";\nimport { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n  item: {\n    // No Effect\n    height: \"100%\",\n    widht: \"100%\",\n  },\n});\n\nconst Search = ({ searchFunc }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n  const classes = useStyles();\n\n  const filterOptions = (options, state) => {\n    // Extract the inputValue\n    const query = state.inputValue.toUpperCase();\n    // Update state\n    setInputValue(query);\n    // If short query return nothing (improves performance)\n    if (query.length <= 1) return [];\n\n    // Filter out the options\n    return options.filter((o) => o.displaySymbol.includes(query));\n  };\n\n  // console.log(\"Search Rendered\")\n\n  return (\n    <>\n      {/* A Warning message is outputed in console: Fix later */}\n      <Container>\n        <Row>\n          <Col md={10}>\n            <Autocomplete\n              id=\"combo-box-demo\"\n              options={symbols}\n              getOptionLabel={(option) =>\n                option.displaySymbol + \": \" + option.description\n              }\n              filterOptions={(options, state) => filterOptions(options, state)}\n              className={classes.item}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label=\"Search Ticker\"\n                  variant=\"outlined\"\n                />\n              )}\n              noOptionsText={\n                inputValue.length <= 1\n                  ? \"Type a Ticker Symbol\"\n                  : \"No Symbols Found\"\n              }\n            />\n          </Col>\n          <Col md={2}>\n            <Button\n              color=\"primary\"\n              variant=\"contained\"\n              onClick={() => searchFunc(inputValue)}\n              className={classes.item}\n            >\n              Submit\n            </Button>\n          </Col>\n        </Row>\n      </Container>\n    </>\n  );\n};\n\nexport default Search;\n","import React from \"react\";\n\nconst Error = (props) => {\n  return (\n    <div className=\"alert alert-danger \" role=\"alert\">\n      <strong>{props.children}</strong>\n      <button\n        type=\"button\"\n        className=\"close\"\n        data-dismiss=\"alert\"\n        aria-label=\"Close\"\n        onClick={props.removeFunc}\n      >\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </div>\n  );\n};\nexport default Error;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Card } from \"react-bootstrap\";\nimport moment from \"moment\";\n\nconst SecurityInfo = () => {\n  const { stockData } = useSelector((state) => state.portfolio);\n\n  return (\n    <Card>\n      <Card.Body>\n        <h1 class=\"display-4\">{stockData.ticker}</h1>\n        <p class=\"lead\">Quote: {stockData.currentPrice}</p>\n        <p>{moment(new Date()).format(\"YYYY-MM-DD\")}</p>.\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default SecurityInfo;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from \"@material-ui/core/Slider\";\nimport TrendingUpIcon from \"@material-ui/icons/TrendingUp\";\n\nconst useStyles = makeStyles({\n  root: {\n    width: 250,\n  },\n  input: {\n    width: 42,\n  },\n  slider: { width: \"90%\" },\n});\n\nexport default function InputSlider({ value, setValue, title, min, max }) {\n  const classes = useStyles();\n\n  const handleSliderChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Typography id=\"input-slider\" gutterBottom>\n        {title}\n      </Typography>\n      <Grid container spacing={2} alignItems=\"center\">\n        <Grid item>\n          <TrendingUpIcon />\n        </Grid>\n        <Grid item xs>\n          <Slider\n            min={min}\n            max={max}\n            value={typeof value === \"number\" ? value : 0}\n            onChange={handleSliderChange}\n            aria-labelledby=\"input-slider\"\n            className={classes.slider}\n          />\n        </Grid>\n        <Grid item></Grid>\n      </Grid>\n    </div>\n  );\n}\n","import React from \"react\";\nimport AnyChart from \"anychart-react\";\nimport * as anychart from \"anychart\";\nimport * as util from \"../utility\";\n\nconst StockAnyChart = ({ data, ticker }) => {\n  const newData = [];\n  data.forEach((pnt) => {\n    newData.push([\n      util.UNIXToDateString(pnt[0]),\n      pnt[1],\n      pnt[2],\n      pnt[3],\n      pnt[4],\n    ]);\n  });\n  // Create the chart\n  var stockDataTable = anychart.data.table();\n  // Add The data\n  stockDataTable.addData(newData);\n  // Declare stock Chart\n  var chart = anychart.stock();\n  // Create plot\n  var firstPlot = chart.plot(0);\n  firstPlot.area(stockDataTable.mapAs({ value: 4 })).name(ticker);\n  chart.scroller().area(stockDataTable.mapAs({ value: 4 }));\n  chart.selectRange(\"2018-01-03\", \"2019-01-01\");\n\n  return (\n    <>\n      {!chart ? (\n        <h1>Unable to Display Data</h1>\n      ) : (\n        <AnyChart width=\"100%\" height={300} instance={chart} title={ticker} />\n      )}\n    </>\n  );\n};\n\nexport default StockAnyChart;\n","import React from \"react\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\n\nconst PayoffHighChart = ({ data }) => {\n  return <HighchartsReact highcharts={Highcharts} options={data} />;\n};\n\nexport default PayoffHighChart;\n","import React from \"react\";\nimport HighStock from \"highcharts/highstock\";\nimport HighchartsReact from \"highcharts-react-official\";\n\nfunction App({ mockData }) {\n  console.log(mockData);\n  let groupingUnits = [\n    [\n      \"week\", // unit name\n      [1], // allowed multiples\n    ],\n    [\"month\", [1, 2, 3, 4, 6]],\n  ];\n\n  let mockOptions = {\n    rangeSelector: {\n      selected: 1,\n    },\n\n    title: {\n      text: \"AAPL Historical\",\n    },\n\n    yAxis: [\n      {\n        labels: {\n          align: \"right\",\n          x: -3,\n        },\n        title: {\n          text: \"OHLC\",\n        },\n        height: \"60%\",\n        lineWidth: 2,\n        resize: {\n          enabled: true,\n        },\n      },\n      {\n        labels: {\n          align: \"right\",\n          x: -3,\n        },\n        title: {\n          text: \"Volume\",\n        },\n        top: \"65%\",\n        height: \"35%\",\n        offset: 0,\n        lineWidth: 2,\n      },\n    ],\n\n    tooltip: {\n      split: true,\n    },\n\n    series: [\n      {\n        type: \"candlestick\",\n        data: mockData,\n      },\n      {\n        type: \"column\",\n        data: (function () {\n          var columnData = [];\n\n          for (var i = 0; i < mockData.length; i++) {\n            columnData.push([\n              mockData[i][0], // the date\n              mockData[i][5], // the volume\n            ]);\n          }\n          return columnData;\n        })(),\n        yAxis: 1,\n      },\n    ],\n  };\n\n  return (\n    <div className=\"App\">\n      {\n        <HighchartsReact\n          highcharts={HighStock}\n          constructorType={\"stockChart\"}\n          options={mockOptions}\n        />\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import React, { useState, useCallback, useEffect } from \"react\";\nimport Payoff from \"./components/Payoff\";\nimport StockData from \"./components/StockData\";\nimport Panel from \"./components/Panel\";\nimport * as util from \"./utility\";\nimport { useSelector, useDispatch, connect } from \"react-redux\";\nimport Navigation from \"./components/Navigation/Navigation\";\nimport moment from \"moment\";\nimport { liveDataContext } from \"./context/liveData\";\nimport Search from \"./components/Search\";\nimport axios from \"axios\";\nimport ColorPicker from \"./utility/DS/ColorPicker\";\nimport * as actions from \"./store/actions/portfolio\";\nimport { Row, Col, Container } from \"react-bootstrap\";\nimport useUpdateEffect from \"./hooks/useUpdateEffect\";\nimport Error from \"./components/Error/Error\";\nimport SecurityInfo from \"./components/SecurityInfo\";\nimport Slider from \"./components/Slider\";\nimport AnyChart from \"./components/StockAnyChart\";\nimport { Switch } from \"@material-ui/core\";\nimport { FormGroup, FormControlLabel } from \"@material-ui/core\";\nimport HighChart from \"./components/PayoffHighChart\";\nimport HighStock from \"./components/HighStock\";\n\nconst App = () => {\n  const { portfolio, stockData } = useSelector((state) => state.portfolio);\n  const { volatility, interest, currentPrice } = stockData;\n  const dispatch = useDispatch();\n  const [data, setData] = useState(null);\n  const [errors, setErrors] = useState(null);\n  const [stockErrors, setStockErrors] = useState(null);\n  const [liveMode, setLiveMode] = useState(false);\n  const [optionData, setOptionData] = useState();\n  const [minX, setMinX] = useState();\n  const [maxX, setMaxX] = useState();\n  const [stockChartData, setStockChartData] = useState();\n  const [viewHighChart, setViewHighChart] = useState(true);\n  const [viewHighStock, setViewHighStock] = useState(true);\n  const [hcData, setHcData] = useState(null);\n  const value = { liveMode, setLiveMode };\n  const [daysToExpiration, setDaysToExpiration] = useState(null);\n\n  // Set Error Message as JSX\n  const setErrs = useCallback((message) => {\n    setErrors(<Error removeFunc={() => setErrors(null)}>{message}</Error>);\n  }, []);\n\n  // Set Error Stock Message as JSX\n  const setStockErrs = useCallback((message) => {\n    setStockErrors(\n      <Error removeFunc={() => setStockErrors(null)}>{message}</Error>\n    );\n  }, []);\n\n  // Update and Validate User Input Data\n  const updateData = () => {\n    // Validate Empty Portfolio\n    if (Object.keys(portfolio).length === 0)\n      return setErrs(\"Add contracts to Visualize\");\n\n    // Validate Stock Price\n    if (+stockData.currentPrice <= 0)\n      return setErrs(\"Please Enter a Valid Stock Price\");\n\n    // Validate Interest\n    if (isNaN(+stockData.interest))\n      return setErrs(\"Please Enter a Valid Interest Rate\");\n\n    const strikes = [];\n    let maxStrike = 0;\n    let minStrike = Infinity;\n\n    const values = [];\n    const theoretical = [];\n\n    // Add the min/max x values input by the user and update the max/minStrikes\n    if (maxX) {\n      if (+maxX > maxStrike) maxStrike = +maxX;\n      if (+maxX < minStrike) minStrike = +maxX;\n      strikes.push(+maxX);\n    }\n\n    if (minX) {\n      if (+minX > maxStrike) maxStrike = +minX;\n      if (+minX < minStrike) minStrike = +minX;\n      strikes.push(+minX);\n    }\n\n    // Get the Critical strikes to plot\n    for (let id in portfolio) {\n      const contract = portfolio[id];\n      const cashContract = contract.type === util.CASH;\n      const strike = cashContract ? +stockData.currentPrice : +contract.strike;\n      const date = contract.date;\n      const amount = contract.amount;\n\n      // Always Validate Amount\n      if (amount <= 0) return setErrs(\"Please Enter a Valid Amount\");\n\n      // If not a Cash Contract then validate the following fields\n      if (!cashContract) {\n        // Validate Strike prices\n        if (strike <= 0) return setErrs(\"Please Enter A Valid Strike Price\");\n\n        // Validate the Date (Check if it is defined and in the future)\n        if (!date || moment().diff(date) > 0)\n          return setErrs(\"Please Enter a Valid Date\");\n      }\n\n      // Apply To Fixed\n      strikes.push(util.round(strike));\n\n      // Update the maxStrike\n      if (strike > maxStrike) maxStrike = strike;\n      if (strike < minStrike) minStrike = strike;\n    }\n\n    const average = (maxStrike + minStrike) / 2;\n    let max = 0;\n\n    // If maxX is set\n    if (!maxX) {\n      // Auto xMax margin\n      max = Math.floor(maxStrike + average * 0.2);\n    } else {\n      max = Math.max(+maxX, maxStrike);\n    }\n\n    let min = 0;\n\n    // If minX is set\n    if (!minX) {\n      // Auto xMin Margin\n      min = Math.floor(minStrike - average * 0.2);\n    } else {\n      min = Math.min(+minX, minStrike);\n    }\n\n    const change = (max - min) / 35;\n\n    // Add domain limits\n    strikes.push(min);\n    strikes.push(max);\n\n    setMaxX(max);\n    setMinX(min);\n\n    let i = min;\n    // Add The rest of the strikes for continuous feel\n    while (i < max) {\n      // Round to 2 decimals and convert back to number\n      strikes.push(util.round(i));\n      i += change;\n    }\n\n    // Sort the strikes so the graph can be displayed properly\n    strikes.sort((a, b) => a - b);\n\n    const result = [];\n\n    // Helper DS to fetch colors\n    const colors = new ColorPicker();\n\n    // We want our plot to have N lines (N is the number of contracts in portfolio)\n    for (let id in portfolio) {\n      const contract = portfolio[id];\n      let key =\n        contract.direction + \" \" + contract.type + \" \" + contract.strike;\n      // Adjust title if cash contract\n      if (contract.type === util.CASH) {\n        key =\n          contract.direction +\n          \" \" +\n          contract.type +\n          \"  \" +\n          stockData.currentPrice;\n      }\n\n      result.push({\n        values: [],\n        key,\n        color: colors.getColor(),\n        disabled: true,\n      });\n    }\n\n    // Keey track of min/max for Ydomain\n    let minProfit = Infinity;\n    let maxProfit = -Infinity;\n\n    // For each strike, calculate the payoff and add it to values\n    for (let strike of strikes) {\n      let profitSum = 0;\n      let theoreticalPL = 0;\n      // Keep track of the index we are at\n      let i = 0;\n      for (let id in portfolio) {\n        const contract = portfolio[id];\n\n        // Calculate profit at given Strike (at Expiration)\n        const profitAtStrike = util.round(\n          util.evaluatePayoffFunc(contract, strike, stockData)\n        );\n\n        // Calculate dateDifference in years, used in theoretical black scholes\n        const dateDiff = -moment().diff(contract.date, \"years\", true);\n\n        const blackScholesValue = util.BlackScholes(\n          contract.type,\n          +strike,\n          +contract.strike,\n          +dateDiff,\n          +stockData.interest,\n          +stockData.volatility\n        );\n\n        // If the contract is Cash\n        if (contract.type === util.CASH) {\n          // Just add the profit at Strike\n          theoreticalPL += +profitAtStrike;\n        } else {\n          // Calculate depending on Buy/Sell\n          if (contract.direction === util.BUY) {\n            // Calculate Theoretical P/L\n            theoreticalPL +=\n              (blackScholesValue - contract.price) * contract.amount;\n          } else {\n            theoreticalPL +=\n              (contract.price - blackScholesValue) * contract.amount;\n          }\n        }\n\n        // Update min and max Profits\n        if (profitAtStrike > maxProfit) maxProfit = profitAtStrike;\n\n        if (profitAtStrike < minProfit) minProfit = profitAtStrike;\n\n        // Push the point at the specified strategy\n        result[i].values.push({\n          x: util.round(strike),\n          y: util.round(profitAtStrike),\n        });\n\n        // Evaluate each contract in portfolio and add it to the y value\n        profitSum += util.round(profitAtStrike);\n        i++;\n      }\n\n      // Add the point to the data\n      values.push({ x: util.round(strike), y: util.round(profitSum) });\n      theoretical.push({ x: util.round(strike), y: util.round(theoreticalPL) });\n    }\n\n    const Ydomain = [Math.floor(minProfit * 1.2), Math.floor(maxProfit * 1.2)];\n\n    // The overall strategy plot data\n    const strategyData = {\n      values,\n      key: \"Strategy\",\n      color: \"green\",\n      disabled: false,\n    };\n\n    // The Theoretical strategy plot data\n    const strategyTheoretical = {\n      values: theoretical,\n      key: \"Today\",\n      color: \"pink\",\n      disabled: false,\n    };\n\n    result.push(strategyTheoretical);\n\n    result.push(strategyData);\n\n    // Clear the Errors\n    setErrors(null);\n    console.log(result);\n    if (viewHighChart) {\n      const res = [];\n      // Parse data into HighChart Format\n      for (let series of result) {\n        const seriesInfo = {\n          data: [],\n          visible: !series.disabled,\n          color: series.color,\n          name: series.key,\n        };\n        res.push(seriesInfo);\n        for (let point of series.values) {\n          seriesInfo.data.push([+point.x, +point.y]);\n        }\n      }\n\n      return setHcData({\n        series: res,\n        xAxis: {\n          title: {\n            text: \"Stock Price ($)\",\n          },\n        },\n        yAxis: {\n          title: {\n            text: \"Profit ($)\",\n          },\n        },\n        chart: {\n          type: \"spline\",\n        },\n        title: {\n          text: \"Payoff\",\n        },\n      });\n    }\n\n    setData({ data: result, Ydomain });\n  };\n\n  // Custom hook used to Reset Portfolio only when liveMode is Toggled\n  useUpdateEffect(() => {\n    // To be run on update\n    setErrors(null);\n    dispatch(actions.resetPortfolio());\n    setData(null);\n    setOptionData(null);\n  }, [liveMode]);\n\n  // Custom hook used to Reset Porfolio only when optionData changes\n  useUpdateEffect(() => {\n    dispatch(actions.resetPortfolio());\n    setStockChartData(null); // Display Loading\n    fetchStockData();\n  }, [optionData]);\n\n  // Updating data to display\n  useEffect(() => {\n    updateData();\n  }, [portfolio, maxX, minX]);\n\n  // Fetch the option Data when Search is Clicked\n  const fetchOptionData = async (ticker) => {\n    try {\n      const { data } = await axios.get(\n        `https://finnhub.io/api/v1/stock/option-chain?symbol=${ticker}&token=` +\n          process.env.REACT_APP_API_KEY\n      );\n      setOptionData(data);\n      dispatch(actions.updateStockData(\"currentPrice\", data.lastTradePrice));\n      dispatch(actions.updateStockData(\"ticker\", data.code));\n      if (data.data.length === 0) {\n        setStockErrs(util.STOCK_NO_OPTIONS, setStockErrors);\n      } else {\n        setStockErrors(null);\n      }\n    } catch (err) {\n      setStockErrs(util.STOCK_ERR_FETCH, setStockErrors);\n    }\n  };\n\n  const fetchStockData = async (ticker) => {\n    var unix = Math.round(+new Date() / 1000);\n    const { data } = await axios.get(\n      `https://finnhub.io/api/v1/stock/candle?symbol=TSLA&resolution=D&from=1199145600&to=${unix}&token=` +\n        process.env.REACT_APP_API_KEY\n    );\n\n    const length = data.c.length;\n\n    const result = [];\n\n    for (let i = 0; i < length; i++) {\n      result.push([data.t[i], data.o[i], data.h[i], data.l[i], data.c[i]]);\n    }\n\n    setStockChartData(result);\n  };\n\n  const updateDaysToExpiration = (days) => {\n    let newDate = util.addDays(new Date(), days);\n    newDate = moment(newDate).format(\"YYYY-MM-DD\");\n    dispatch(actions.updateAllContracts(\"date\", newDate));\n    setDaysToExpiration(days);\n  };\n\n  return (\n    <>\n      <liveDataContext.Provider value={value}>\n        <Navigation optionData={optionData} />\n        <Container>\n          <Row>\n            <Col md={12}>\n              {stockData.ticker !== \"Theoretical\" && <SecurityInfo />}\n            </Col>\n          </Row>\n          <Row>\n            <Col md={12}>\n              {liveMode && <Search searchFunc={fetchOptionData} />}\n              {stockErrors}\n            </Col>\n          </Row>\n          <Row>\n            <Col md={12}>\n              <Panel\n                optionData={optionData}\n                portfolio={portfolio}\n                visualize={updateData}\n              />\n            </Col>\n          </Row>\n          <Row>\n            <Col md={3}>\n              <StockData liveMode={liveMode} />\n              <div className=\"panel panel-primary\">\n                <div className=\"panel-heading\">Toggle</div>\n                <div className=\"panel-body\">\n                  <Slider\n                    min={0}\n                    max={150}\n                    title={\"Volatility\"}\n                    value={+volatility}\n                    setValue={(val) =>\n                      dispatch(actions.updateStockData(\"volatility\", val))\n                    }\n                  />\n                  <Slider\n                    min={-20}\n                    max={150}\n                    title={\"Interest\"}\n                    value={+interest}\n                    setValue={(val) =>\n                      dispatch(actions.updateStockData(\"interest\", val))\n                    }\n                  />\n                  {!liveMode && (\n                    <Slider\n                      min={1}\n                      max={1000}\n                      title={\"Time To Expiration\"}\n                      value={daysToExpiration}\n                      setValue={(val) => updateDaysToExpiration(val)}\n                    />\n                  )}\n                  {!liveMode && (\n                    <Slider\n                      min={0}\n                      max={2000}\n                      title={\"StockPrice\"}\n                      value={currentPrice}\n                      setValue={(val) =>\n                        dispatch(actions.updateStockData(\"currentPrice\", val))\n                      }\n                    />\n                  )}\n                </div>\n              </div>\n            </Col>\n            <Col md={9}>\n              <Row>\n                <Col md={12}>\n                  {errors ? errors : null}\n                  <div className=\"row\">\n                    <div className=\"col-sm-12\">\n                      <div className=\"panel panel-primary\">\n                        <div className=\"panel-heading\">\n                          Option Payoff\n                          <FormGroup>\n                            <FormControlLabel\n                              control={\n                                <Switch\n                                  checked={!viewHighChart}\n                                  onChange={() =>\n                                    setViewHighChart((prev) => !prev)\n                                  }\n                                  aria-label=\"live mode switch\"\n                                />\n                              }\n                              label={\"Switch Graph Type\"}\n                            />\n                          </FormGroup>\n                        </div>\n                        <div className=\"panel-body\">\n                          {!viewHighChart ? (\n                            <Payoff data={data} />\n                          ) : (\n                            <HighChart data={hcData} />\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  {/* <Demo /> */}\n                </Col>\n              </Row>\n              <Row>\n                <Col md={12}>\n                  <div className=\"panel panel-primary\">\n                    <div className=\"panel-heading\">Change Domain</div>\n                    <div className=\"panel-body\">\n                      <Col md={2}>\n                        <input\n                          type=\"number\"\n                          className=\"form-control form-control-inline\"\n                          placeholder=\"Auto\"\n                          onBlur={(e) => setMinX(e.target.value)}\n                          // value={minX}\n                        />\n                      </Col>\n                      <Col md={2}>\n                        <input\n                          type=\"number\"\n                          min=\"1\"\n                          max=\"5000\"\n                          className=\"form-control form-control-inline\"\n                          placeholder=\"Auto\"\n                          // value={maxX}\n                          onBlur={(e) => setMaxX(e.target.value)}\n                        />\n                      </Col>\n                    </div>\n                  </div>\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n        </Container>\n      </liveDataContext.Provider>\n      <Container>\n        <div className=\"panel panel-primary\">\n          <div className=\"panel-heading\">\n            {stockData.ticker}{\" \"}\n            <FormGroup>\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={!viewHighStock}\n                    onChange={() => setViewHighStock((prev) => !prev)}\n                    aria-label=\"live mode switch\"\n                  />\n                }\n                label={\"Switch Chart Type\"}\n              />\n            </FormGroup>\n          </div>\n          <div className=\"panel-body\">\n            {stockChartData && optionData ? (\n              <>\n                {viewHighStock ? (\n                  <HighStock mockData={stockChartData} />\n                ) : (\n                  <AnyChart data={stockChartData} ticker={stockData.ticker} />\n                )}\n              </>\n            ) : (\n              <>\n                {optionData && liveMode ? (\n                  <h1>Loading...</h1>\n                ) : (\n                  <>\n                    {!liveMode && (\n                      <>\n                        <h1>Switch to live mode to view stock chart</h1>\n                      </>\n                    )}\n                  </>\n                )}\n              </>\n            )}\n          </div>\n        </div>\n      </Container>\n    </>\n  );\n};\n\nexport default App;\n","import * as cts from \"../actions/portfolio\";\nimport {\n  initialPortfolio,\n  updatePortfolioPrices,\n} from \"../../utility/constants\";\nimport { stockDataInitialState } from \"../../utility/constants\";\n\nexport const initialState = {\n  portfolio: { ...initialPortfolio },\n  stockData: { ...stockDataInitialState },\n};\n\nconst resetPortfolio = (state, action) => {\n  return { portfolio: {}, stockData: { ...state.stockData } };\n};\n\nconst removeContract = (state, action) => {\n  const newPortfolio = { ...state.portfolio };\n  delete newPortfolio[action.contractId];\n  return { portfolio: newPortfolio, stockData: { ...state.stockData } };\n};\n\nconst addContract = (state, action) => {\n  const { contractName } = action.newContract;\n  const newPortfolio = { ...state.portfolio };\n  newPortfolio[contractName] = action.newContract;\n  updatePortfolioPrices(newPortfolio, state.stockData);\n  return { portfolio: newPortfolio, stockData: { ...state.stockData } };\n};\n\nconst updateContract = (state, action) => {\n  const newPortfolio = { ...state.portfolio };\n  newPortfolio[action.contractName][action.property] = action.value;\n  updatePortfolioPrices(newPortfolio, state.stockData);\n  return { portfolio: newPortfolio, stockData: { ...state.stockData } };\n};\n\nconst setPortfolio = (state, action) => {\n  updatePortfolioPrices(action.newPortfolio, state.stockData);\n  return { portfolio: action.newPortfolio, stockData: { ...state.stockData } };\n};\n\nconst updatePrices = (state, action) => {\n  const newPortfolio = { ...state.portfolio };\n  updatePortfolioPrices(newPortfolio, state.stockData);\n  return { portfolio: newPortfolio, stockData: { ...state.stockData } };\n};\n\nconst updateStockData = (state, action) => {\n  const newStockData = { ...state.stockData };\n  newStockData[action.property] = action.value;\n  const newPortfolio = { ...state.portfolio };\n  updatePortfolioPrices(newPortfolio, newStockData);\n  return {\n    portfolio: newPortfolio,\n    stockData: newStockData,\n  };\n};\n\nconst updateAllContracts = (state, action) => {\n  const newPortfolio = { ...state.portfolio };\n  for (let key in newPortfolio) {\n    const contract = newPortfolio[key];\n    contract[action.property] = action.value;\n  }\n  updatePortfolioPrices(state.portfolio, state.stockData);\n  return { portfolio: newPortfolio, stockData: { ...state.stockData } };\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    // Portfolio\n    case cts.ADD_CONTRACT:\n      return addContract(state, action);\n    case cts.RESET_PORTFOLIO:\n      return resetPortfolio(state, action);\n    case cts.SET_PORTFOLIO:\n      return setPortfolio(state, action);\n    case cts.REMOVE_CONTRACT:\n      return removeContract(state, action);\n    case cts.UPDATE_CONTRACT:\n      return updateContract(state, action);\n    case cts.UPDATE_PRICES:\n      return updatePrices(state, action);\n    case cts.UPDATE_ALL_CONTRACTS:\n      return updateAllContracts(state, action);\n\n    // Stock Data\n    case cts.UPDATE_STOCK_DATA:\n      return updateStockData(state, action);\n    case cts.RESET_DATA:\n      return { ...state, stockData: { ...stockDataInitialState } };\n    default:\n      // Will be run initially\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport portfolioReducer from \"./store/reducers/portfolio\"\nimport { createStore, combineReducers } from \"redux\";\n\nconst rootReducer = combineReducers({\n  portfolio: portfolioReducer\n});\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}