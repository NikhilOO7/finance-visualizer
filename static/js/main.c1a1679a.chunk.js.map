{"version":3,"sources":["components/Payoff.js","store/actions/stockData.js","components/StockData.js","utility/constants.js","utility/Option.js","utility/options.js","utility/DS/ColorPicker.js","components/Panel.js","context/liveData.js","components/Navigation.js","components/Search.js","App.js","store/reducers/stockData.js","serviceWorker.js","index.js"],"names":["Payoff","data","errors","d3","remove","useEffect","myData","Ydomain","nv","newChart","lineChart","margin","left","useInteractiveGuideline","duration","showLegend","showYAxis","showXAxis","xAxis","axisLabel","tickFormat","d","yAxis","forceY","datum","call","windowResize","update","drawChart","className","id","updatePrice","price","type","StockData","liveMode","stockData","useSelector","state","dispatch","useDispatch","placeholder","value","currentPrice","disabled","onChange","e","stockActions","target","volatility","interest","initialPortfolio","amount","contractName","date","direction","strike","Option","this","evaluatePayoffFunc","option","cost","Math","max","parseInt","min","CND","x","k","exp","sqrt","PI","ColorPicker","colors","index","result","length","Contract","props","removeContract","optionData","updateContract","useState","expirationDates","setExpirationDates","selectedDate","setSelectedDate","strikePrices","setStrikePrices","selectedStrike","setSelectedStrike","dateDiff","moment","diff","setPrice","optionType","S","X","T","r","v","d1","log","d2","BlackScholes","toFixed","map","item","expirationDate","apiContract","find","toUpperCase","contract","options","ask","bid","strikesAtDate","class","style","verticalAlign","aria-label","onClick","aria-hidden","Panel","portfolio","setPortfolio","visualize","property","newPortfolio","Date","toISOString","push","key","renderContracts","liveDataContext","React","createContext","setLiveMode","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","MenuAppBar","classes","useContext","FormGroup","FormControlLabel","control","Switch","checked","prev","label","Search","searchFunc","inputValue","setInputValue","Autocomplete","symbols","getOptionLabel","displaySymbol","filterOptions","query","filter","o","includes","renderInput","params","TextField","variant","noOptionsText","Button","color","App","util","setData","setErrors","setOptionData","updateData","console","Object","keys","setErrs","strikes","maxStrike","minStrike","Infinity","values","floor","sort","a","b","getColor","minProfit","maxProfit","profitSum","i","profitAtStrike","y","strategyData","removeErrs","message","role","data-dismiss","ticker","axios","get","process","REACT_APP_API_KEY","actions","lastTradePrice","Provider","changeData","initialState","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.c1a1679a.chunk.js","sourcesContent":["import React from \"react\";\nimport { useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport * as nv from \"nvd3\";\n\nconst Payoff = ({ data, errors }) => {\n  // Clear the Charts\n  d3.selectAll(\"svg > *\").remove();\n\n  const drawChart = ({ data: myData, Ydomain }) => {\n    /*These lines are all chart setup.  Pick and choose which chart features you want to utilize. */\n    nv.addGraph(() => {\n      const newChart = nv.models\n        .lineChart()\n        .margin({ left: 100 }) //Adjust chart margins to give the x-axis some breathing room.\n        .useInteractiveGuideline(false) //We want nice looking tooltips and a guideline!\n        .duration(1500) //how fast do you want the lines to transition?\n        .showLegend(true) //Show the legend, allowing users to turn on/off line series.\n        .showYAxis(true) //Show the y-axis\n        .showXAxis(true); //Show the x-axis\n\n      newChart.xAxis //Chart x-axis settings\n        .axisLabel(\"Price ($)\")\n        .tickFormat((d) => d);\n\n      newChart.yAxis //Chart y-axis settings\n        .axisLabel(\"Profit ($)\")\n        .tickFormat((d) => d);\n\n      newChart.forceY(Ydomain);\n\n      d3.select(\"#chart svg\") //Select the <svg> element you want to render the chart in.\n        .datum(myData) //Populate the <svg> element with chart data...\n        .call(newChart); //Finally, render the chart!\n\n      // Update the chart when window resizes.\n      nv.utils.windowResize(newChart.update);\n\n      return newChart;\n    });\n  };\n\n  useEffect(() => {\n    data && drawChart(data);\n  }, [data]);\n\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col-sm-12\">\n          <div className=\"panel panel-primary\">\n            <div className=\"panel-heading\">Option Payoff</div>\n            <div className=\"panel-body\">\n              {!errors ? (\n                <div id=\"chart\">\n                  <svg></svg>\n                </div>\n              ) : (\n                <h1>Enter Valid Data To View Chart</h1>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Payoff;\n","export const UPDATE_PRICE = \"UPDATE_PRICE\";\nexport const UPDATE_VOLATILITY = \"UPDATE_VOLATILITY\";\nexport const UPDATE_INTEREST = \"UPDATE_INTEREST\";\n\nexport const updatePrice = (price) => {\n  return {\n    type: UPDATE_PRICE,\n    price,\n  };\n};\n\nexport const updateVolatility = (volatility) => {\n  return {\n    type: UPDATE_VOLATILITY,\n    volatility,\n  };\n};\n\nexport const updateInterest = (interest) => {\n  return {\n    type: UPDATE_INTEREST,\n    interest,\n  };\n};\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as stockActions from \"../store/actions/stockData\";\n\nconst StockData = ({ liveMode }) => {\n  const stockData = useSelector((state) => state.stockData);\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"panel panel-primary\">\n      <div className=\"panel-heading\">Underlying stock</div>\n\n      {/* <select id=\"direction\" className=\"form-control\">\n        {data.tickers.map((ticker) => (\n          <option key={ticker.value}>{ticker.value}</option>\n        ))}\n      </select> */}\n\n      <div className=\"panel-body\">\n        <form className=\"form-horizontal\">\n          <div className=\"form-group\">\n            <label className=\"col-sm-5 control-label\">Current price ($)</label>\n            <div className=\"col-sm-7\">\n              <input\n                type=\"number\"\n                placeholder=\"CurrentPrice\"\n                className=\"form-control\"\n                value={stockData.currentPrice}\n                disabled={liveMode}\n                onChange={(e) =>\n                  dispatch(stockActions.updatePrice(e.target.value))\n                }\n              />\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <label className=\"col-sm-5 control-label\">Volatility (%)</label>\n            <div className=\"col-sm-7\">\n              <input\n                type=\"number\"\n                placeholder=\"Volatility\"\n                className=\"form-control\"\n                value={stockData.volatility}\n                onChange={(e) =>\n                  dispatch(stockActions.updateVolatility(e.target.value))\n                }\n              />\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <label className=\"col-sm-5 control-label\">Interest Rate (%)</label>\n            <div className=\"col-sm-7\">\n              <input\n                type=\"number\"\n                placeholder=\"Interest Rate\"\n                className=\"form-control\"\n                value={stockData.interest}\n                onChange={(e) =>\n                  dispatch(stockActions.updateInterest(e.target.value))\n                }\n              />\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default StockData;\n","export const BUY = \"Buy\";\nexport const SELL = \"Sell\";\nexport const CALL = \"Call\";\nexport const PUT = \"Put\";\nexport const CASH = \"Cash\";\n\nexport const initialPortfolio = {\n  \"2020-08-12T19:58:01.033Z\": {\n    amount: 1,\n    contractName: \"2020-08-12T19:58:01.033Z\",\n    date: \"2020-08-12\",\n    direction: \"Buy\",\n    price: \"196.26\",\n    strike: \"1200\",\n    type: \"Call\",\n  },\n};\n","import * as cts from \"./constants\";\n\nexport default class Option {\n  constructor(contractName) {\n    this.contractName = contractName;\n    this.strike = \"\";\n    this.date = \"\";\n    this.direction = cts.BUY;\n    this.type = cts.CALL;\n    this.amount = 1;\n  }\n}\n","import * as cts from \"./constants\";\n\nexport const evaluatePayoffFunc = (option, price) => {\n  const cost = option.price * option.amount;\n  if (option.type === cts.CALL) {\n    // A call Option\n    if (option.direction === cts.BUY) {\n      // Long Call\n      return (\n        Math.max(price - parseInt(option.strike), 0) * option.amount - cost\n      );\n    }\n    // Short Call\n    return Math.min(0, option.strike - price) * option.amount + cost;\n  } else if (option.type === cts.PUT) {\n    // A Put Option\n    if (option.direction === cts.BUY) {\n      // Long Put\n      return Math.max(parseInt(option.strike) - price, 0) * option.amount - cost;\n    }\n    // Short Put\n    return Math.min(0, price - option.strike) * option.amount + cost\n  } else if (option.type === cts.CASH) {\n    // Stock \n    if (option.direction === cts.BUY) {\n      // Long Stock\n      return (price - option.strike) * option.amount;\n    }\n    // Short Stock\n    return (option.strike - price) * option.amount;\n  }\n};\n\n/* Idea behind displaying the graph\n\n 1. Get the Critical X values in the graph\n 2. Evaluate the critical X values and add them to the proper format\n 3. Update the state and render the result\n\n 1. How to find critical x values\n  - x = 0 will always be a critical value\n  - x = strike prices will always be c.v\n  - x = maxStrike * 1.2 will always be critical value\n\n2. We have defined a evaluatePayoffFunc above and use it in all critical points\n\n */\n\n/*\n  S = Current Stock Price\n  X = Exercise Price (Strike)\n  r = Short-term risk free interest rate\n  T = Time remaining to the expiration Date (in years)\n  v = Standard deviation of stock price (implied volatility)\n */\n\nexport function BlackScholes(optionType, S, X, T, r, v) {\n  var d1 = (Math.log(S / X) + (r + (v * v) / 2) * T) / (v * Math.sqrt(T));\n  var d2 = d1 - v * Math.sqrt(T);\n  if (optionType === cts.CALL) {\n    return S * CND(d1) - X * Math.exp(-r * T) * CND(d2);\n  } else {\n    return X * Math.exp(-r * T) * CND(-d2) - S * CND(-d1);\n  }\n}\n\n/* The cummulative Normal distribution function: */\nfunction CND(x) {\n  if (x < 0) {\n    return 1 - CND(-x);\n  } else {\n    let k = 1 / (1 + 0.2316419 * x);\n    return (\n      1 -\n      (Math.exp((-x * x) / 2) / Math.sqrt(2 * Math.PI)) *\n        k *\n        (0.31938153 +\n          k *\n            (-0.356563782 +\n              k * (1.781477937 + k * (-1.821255978 + k * 1.330274429))))\n    );\n  }\n}\n","export default class ColorPicker {\n    // Available colors more can be added\n    colors = [\n        \"blue\",\n        \"red\",\n        \"yellow\",\n        \"purple\",\n        \"orange\",\n        \"black\",\n    ]\n\n    constructor() {\n        this.index = 0;\n    }\n\n    getColor(){\n        const result =  this.colors[this.index];\n        // Adjust the index;\n        if(this.index >= this.colors.length){\n            // We have reached the end reset to zero\n            this.index = 0;\n        }else{\n            // Not at end just add one to index\n            this.index++;\n        }\n        return result;\n    }\n}","import React, { useEffect, useState } from \"react\";\nimport Option from \"../utility/Option\";\nimport { BlackScholes } from \"../utility\";\nimport { useSelector } from \"react-redux\";\nimport moment from \"moment\";\n\nconst Contract = (props) => {\n  const { removeContract, data, optionData } = props;\n  const { updateContract } = props;\n\n  /*\n   If optionData is defined then the strike prices must adjust to the\n   Expiration date\n   */\n  const [expirationDates, setExpirationDates] = useState([]);\n  const [selectedDate, setSelectedDate] = useState(null);\n\n  const [strikePrices, setStrikePrices] = useState([\n    \"Please Select Expiration Date\",\n  ]);\n  const [selectedStrike, setSelectedStrike] = useState();\n\n  // Stock data from redux\n  const stockData = useSelector((state) => state.stockData);\n\n  // Calculate dateDifference in years, used in theoretical black scholes\n  const dateDiff = -moment().diff(data.date, \"years\", true);\n\n  // Calculate the price based on Black-Scholes model\n\n  const [price, setPrice] = useState();\n\n  // Update the current price every time something changes\n  useEffect(() => {\n    if (optionData) {\n    } else {\n      setPrice(\n        BlackScholes(\n          data.type,\n          +stockData.currentPrice,\n          +data.strike,\n          dateDiff,\n          +stockData.interest,\n          +stockData.volatility\n        ).toFixed(2)\n      );\n    }\n  });\n\n  // Update the price every time it changes\n  useEffect(() => {\n    updateContract(data.contractName, \"price\", price);\n  }, [price]);\n\n  // Set expiration Dates when component mounts\n  useEffect(() => {\n    if (optionData) {\n      const expirationDates = optionData.data.map(\n        (item) => item.expirationDate\n      );\n      setExpirationDates(expirationDates);\n    }\n  }, []);\n\n  // Update strike and price at change\n  useEffect(() => {\n    if (optionData) {\n      // Find the element with same date\n      const apiContract = optionData.data.find(\n        (item) => item.expirationDate === selectedDate\n      );\n\n      if (!apiContract) return;\n\n      // Find the type of option this is\n      const type = data.type.toUpperCase();\n\n      // Extract the contracts given the date\n      const contractsAtDate = apiContract.options[type];\n\n      // Find the contract with the selected Strike\n      const contract = contractsAtDate.find(\n        (item) => item.strike == selectedStrike\n      );\n\n      // Set the price depending if we are short or long\n      if (data.direction === \"Buy\") {\n        setPrice(contract.ask);\n      } else {\n        setPrice(contract.bid);\n      }\n    }\n\n    updateContract(data.contractName, \"strike\", selectedStrike);\n  }, [selectedStrike, setPrice]);\n\n  useEffect(() => {\n    if (optionData) {\n      // Find the element with same date\n      const apiContract = optionData.data.find(\n        (item) => item.expirationDate === selectedDate\n      );\n\n      // If none found return\n      if (!apiContract) return;\n\n      // Find the type of option this is\n      const type = data.type.toUpperCase();\n\n      // Extract the contracts given the date\n      const contractsAtDate = apiContract.options[type];\n\n      // Make an array of strikes at the current date\n      const strikesAtDate = contractsAtDate.map((item) => item.strike);\n\n      // Update strikeprices\n      setStrikePrices(strikesAtDate);\n    }\n\n    updateContract(data.contractName, \"date\", selectedDate);\n  }, [selectedDate]);\n\n  return (\n    <tr>\n      {/* Direction */}\n      <td>\n        <select\n          id=\"direction\"\n          className=\"form-control\"\n          onChange={(e) =>\n            updateContract(data.contractName, \"direction\", e.target.value)\n          }\n        >\n          <option>Buy</option>\n          <option>Sell</option>\n        </select>\n      </td>\n      {/* Amount */}\n      <td>\n        <input\n          type=\"number\"\n          placeholder=\"Amount\"\n          className=\"form-control form-control-inline\"\n          onChange={(e) =>\n            updateContract(data.contractName, \"amount\", e.target.value)\n          }\n          value={data.amount}\n        />\n      </td>\n      {/* Kind */}\n      <td>\n        <select\n          className=\"form-control\"\n          onChange={(e) =>\n            updateContract(data.contractName, \"type\", e.target.value)\n          }\n        >\n          <option>Call</option>\n          <option>Put</option>\n          <option>Cash</option>\n        </select>\n      </td>\n      {/* Strike Price */}\n      <td>\n        {optionData ? (\n          <div class=\"form-group\">\n            <select\n              class=\"form-control\"\n              id=\"exampleFormControlSelect1\"\n              onChange={(e) => setSelectedStrike(e.target.value)}\n            >\n              {strikePrices.map((price) => (\n                <option>{price}</option>\n              ))}\n            </select>\n          </div>\n        ) : (\n          <input\n            type=\"number\"\n            placeholder=\"Strike\"\n            className=\"form-control form-control-inline\"\n            onChange={(e) =>\n              updateContract(data.contractName, \"strike\", e.target.value)\n            }\n            value={data.strike}\n          />\n        )}\n      </td>\n      {/* Expiry Date */}\n      <td>\n        {!optionData ? (\n          <input\n            type=\"date\"\n            placeholder=\"Expiry\"\n            className=\"form-control form-control-inline\"\n            onChange={(e) =>\n              updateContract(data.contractName, \"date\", e.target.value)\n            }\n            value={data.date}\n          />\n        ) : (\n          <div class=\"form-group\">\n            <select\n              class=\"form-control\"\n              id=\"exampleFormControlSelect1\"\n              onChange={(e) => setSelectedDate(e.target.value)}\n            >\n              {expirationDates.map((date) => (\n                <option>{date}</option>\n              ))}\n            </select>\n          </div>\n        )}\n      </td>\n      {/* Contract Price */}\n      <td style={{ verticalAlign: \"middle\" }}>\n        <b>{price}</b>\n      </td>\n      {/* Remove Button */}\n      <td style={{ verticalAlign: \"middle\" }}>\n        <button\n          type=\"button\"\n          aria-label=\"Left Align\"\n          className=\"btn btn-danger btn-s\"\n          onClick={() => removeContract(data.contractName)}\n        >\n          <span aria-hidden=\"true\">Remove</span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n\nconst Panel = (props) => {\n  const { portfolio, setPortfolio, visualize } = props;\n  const { optionData, currentPrice } = props;\n\n  const addContract = () => {\n    const newPortfolio = { ...portfolio };\n    const id = new Date().toISOString();\n    newPortfolio[id] = new Option(id);\n    setPortfolio(newPortfolio);\n  };\n\n  const renderContracts = () => {\n    const result = [];\n    for (let id in portfolio) {\n      result.push(\n        <Contract\n          optionData={optionData}\n          removeContract={removeContract}\n          updateContract={updateContract}\n          data={portfolio[id]}\n          key={id}\n        />\n      );\n    }\n    return result;\n  };\n\n  const updateContract = (id, property, value) => {\n    const newPortfolio = { ...portfolio };\n    newPortfolio[id][property] = value;\n    setPortfolio(newPortfolio);\n  };\n\n  const removeContract = (id) => {\n    const newPortfolio = { ...portfolio };\n    delete newPortfolio[id];\n    setPortfolio(newPortfolio);\n  };\n\n  return (\n    <div className=\"panel panel-primary\">\n      <div className=\"panel-heading\">Option Portfolio</div>\n      <div className=\"panel-body\">\n        <table className=\"table table-condensed\">\n          <thead>\n            <tr>\n              <th>Direction</th>\n              <th>Amount</th>\n              <th>Kind</th>\n              <th>Strike</th>\n              <th>Expiry</th>\n              <th>Price</th>\n              <th>\n                <button\n                  type=\"submit\"\n                  className=\"btn btn-success btn-s\"\n                  onClick={addContract}\n                >\n                  Add Leg\n                </button>\n              </th>\n            </tr>\n          </thead>\n          <tbody>{renderContracts()}</tbody>\n        </table>\n        <div className=\"pull-right\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-success btn-s\"\n            onClick={visualize}\n          >\n            Generate Payoff\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Panel;\n","import React from \"react\";\n\nconst defaultValue = {\n  liveMode: false,\n  setLiveMode: () => {},\n};\n\nexport const liveDataContext = React.createContext(defaultValue);\n","import React, { useContext } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Switch from \"@material-ui/core/Switch\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport { liveDataContext } from \"../context/liveData\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function MenuAppBar() {\n  const classes = useStyles();\n  const { liveMode, setLiveMode } = useContext(liveDataContext);\n\n  return (\n    <div className={classes.root}>\n      <FormGroup>\n        <FormControlLabel\n          control={\n            <Switch\n              checked={liveMode}\n              onChange={() => setLiveMode((prev) => !prev)}\n              aria-label=\"live mode switch\"\n            />\n          }\n          label={\"Live Data Mode\"}\n        />\n      </FormGroup>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport symbols from \"../symbols.json\";\nimport { Button } from \"@material-ui/core\";\n\nconst Search = ({ searchFunc }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const filterOptions = (options, state) => {\n    // Extract the inputValue\n    const query = state.inputValue;\n    // Update state\n    setInputValue(query);\n    // If short query return nothing (improves performance)\n    if (query.length <= 1) return [];\n\n    // Filter out the options\n    return options.filter((o) => o.displaySymbol.includes(query));\n  };\n\n  return (\n    <>\n      {/* A Warning message is outputed in console: Fix later */}\n      <span>\n        <Autocomplete\n          id=\"combo-box-demo\"\n          options={symbols}\n          getOptionLabel={(option) => option.displaySymbol}\n          filterOptions={(options, state) => filterOptions(options, state)}\n          renderInput={(params) => (\n            <TextField {...params} label=\"Search Ticker\" variant=\"outlined\" />\n          )}\n          noOptionsText={\n            inputValue.length <= 1 ? \"Type a Ticker Symbol\" : \"No Symbols Found\"\n          }\n        />\n        <Button\n          color=\"primary\"\n          variant=\"outlined\"\n          onClick={() => searchFunc(inputValue)}\n        >\n          Search\n        </Button>\n      </span>\n    </>\n  );\n};\n\nexport default Search;\n","import React, { useEffect, useState } from \"react\";\nimport Payoff from \"./components/Payoff\";\nimport StockData from \"./components/StockData\";\nimport Panel from \"./components/Panel\";\nimport * as util from \"./utility\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Navigation from \"./components/Navigation\";\nimport moment from \"moment\";\nimport { liveDataContext } from \"./context/liveData\";\nimport Search from \"./components/Search\";\nimport axios from \"axios\";\nimport ColorPicker from \"./utility/DS/ColorPicker\";\nimport * as actions from \"./store/actions/stockData\";\n\nconst App = () => {\n  const [portfolio, setPortfolio] = useState(util.initialPortfolio);\n  const [data, setData] = useState(null);\n  const [errors, setErrors] = useState(null);\n  const stockData = useSelector((state) => state.stockData);\n  const [liveMode, setLiveMode] = useState(false);\n  const [optionData, setOptionData] = useState();\n  const value = { liveMode, setLiveMode };\n  const dispatch = useDispatch();\n\n  // Update and Validate User Input Data\n  const updateData = () => {\n    console.log(portfolio)\n    // Validate Empty Portfolio\n    if (Object.keys(portfolio).length === 0)\n      return setErrs(\"Add contracts to Visualize\");\n\n    // Validate Stock Price\n    if (+stockData.currentPrice <= 0)\n      return setErrs(\"Please Enter a Valid Stock Price\");\n\n    // Validate Interest\n    if (+stockData.interest <= 0)\n      return setErrs(\"Please Enter a Valid Interest Rate\");\n\n    const strikes = [];\n    let maxStrike = 0;\n    let minStrike = Infinity;\n\n    const values = [];\n\n    // Get the strikes to plot\n    for (let id in portfolio) {\n      const contract = portfolio[id];\n      const strike = +contract.strike;\n      const date = contract.date;\n      const amount = contract.amount;\n\n      // Validate Strike prices\n      if (strike <= 0) return setErrs(\"Please Enter A Valid Strike Price\");\n\n      // Validate Amount\n      if (amount <= 0) return setErrs(\"Please Enter a Valid Amount\");\n\n      // Validate the Date (Check if it is defined and in the future)\n      if (!date || moment().diff(date) > 0)\n        return setErrs(\"Please Enter a Valid Date\");\n\n      // Apply To Fixed\n      strikes.push(strike.toFixed(2));\n\n      // Update the maxStrike\n      if (strike > maxStrike) maxStrike = strike;\n      if (strike < minStrike) minStrike = strike;\n    }\n\n    // Add domain limits\n    strikes.push(Math.floor(maxStrike * 1.2));\n    strikes.push(Math.floor(minStrike * 0.8));\n\n    // Sort the strikes so the graph can be displayed properly\n    strikes.sort((a, b) => a - b);\n\n    const result = [];\n\n    // Helper DS to fetch colors\n    const colors = new ColorPicker();\n\n    // We want our plot to have N lines (N is the number of contracts in portfolio)\n    for (let id in portfolio) {\n      const contract = portfolio[id];\n      const key =\n        contract.direction + \" \" + contract.type + \" \" + contract.strike;\n      result.push({\n        values: [],\n        key,\n        color: colors.getColor(),\n      });\n    }\n\n    // Keey track of min/max for Ydomain\n    let minProfit = Infinity;\n    let maxProfit = -Infinity;\n\n    // For each strike, calculate the payoff and add it to values\n    for (let strike of strikes) {\n      let profitSum = 0;\n      // Keep track of the index we are at\n      let i = 0;\n      for (let id in portfolio) {\n        const contract = portfolio[id];\n\n        // Calculate profit at given Strike\n        const profitAtStrike = +util\n          .evaluatePayoffFunc(contract, strike)\n          .toFixed(2);\n\n        // Update min and max Profits\n        if (profitAtStrike > maxProfit) maxProfit = profitAtStrike;\n\n        if (profitAtStrike < minProfit) minProfit = profitAtStrike;\n\n        // Push the point at the specified strategy\n        result[i].values.push({\n          x: strike,\n          y: profitAtStrike,\n        });\n\n        // Evaluate each contract in portfolio and add it to the y value\n        profitSum += profitAtStrike;\n        i++;\n      }\n\n      // Add the point to the data\n      values.push({ x: strike, y: profitSum });\n    }\n\n    const Ydomain = [Math.floor(minProfit * 1.2), Math.floor(maxProfit * 1.2)];\n\n    // The overall strategy plot data\n    const strategyData = {\n      values,\n      key: \"Strategy\",\n      color: \"green\",\n    };\n\n    // Add the overall strategy data to the end if there are two or more contracts\n    if (result.length >= 2) {\n      result.push(strategyData);\n    }\n\n    console.log(result);\n\n    setData({ data: result, Ydomain });\n  };\n\n  // Reset Portfolio whenever liveMode is Toggled\n  useEffect(() => {\n    setErrors(null);\n    setPortfolio({});\n    setData(null);\n    setOptionData(null);\n  }, [liveMode]);\n\n  // Reset Porfolio whenever we change live stock\n  useEffect(() => {\n    setPortfolio({});\n  }, [optionData]);\n\n  // Update/Validate portfolio whenever changed\n  useEffect(() => {\n    setErrors(null);\n    updateData();\n  }, [portfolio]);\n\n  // Remove Errors\n  const removeErrs = () => {\n    setErrors(null);\n  };\n\n  // Set Error Message as JSX\n  const setErrs = (message) => {\n    setErrors(\n      <div className=\"alert alert-danger \" role=\"alert\">\n        <strong>{message}</strong>\n        <button\n          type=\"button\"\n          className=\"close\"\n          data-dismiss=\"alert\"\n          aria-label=\"Close\"\n          onClick={removeErrs}\n        >\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n    );\n  };\n\n  // Fetch the option Data when Search is Clicked\n  const searchFunc = async (ticker) => {\n    const { data } = await axios.get(\n      `https://finnhub.io/api/v1/stock/option-chain?symbol=${ticker}&token=` +\n        process.env.REACT_APP_API_KEY\n    );\n    setOptionData(data);\n    dispatch(actions.updatePrice(data.lastTradePrice));\n    console.log(data);\n  };\n\n  return (\n    <liveDataContext.Provider value={value}>\n      <Navigation />\n      <div className=\"container\">\n        {liveMode && (\n          <>\n            <Search searchFunc={searchFunc} />\n            <br />\n          </>\n        )}\n        <StockData liveMode={liveMode} />\n        <Panel\n          optionData={optionData}\n          portfolio={portfolio}\n          setPortfolio={setPortfolio}\n          visualize={updateData}\n          currentPrice={100}\n        />\n        {errors}\n        <Payoff data={data} changeData={setData} errors={errors} />\n      </div>\n    </liveDataContext.Provider>\n  );\n};\n\nexport default App;\n","import {\n  UPDATE_PRICE,\n  UPDATE_INTEREST,\n  UPDATE_VOLATILITY,\n} from \"../actions/stockData\";\n\nconst initialState = {\n  currentPrice: \"1300\",\n  volatility: \"0.2\",\n  interest: \"0.05\",\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case UPDATE_PRICE:\n      return { ...state, currentPrice: action.price };\n    case UPDATE_VOLATILITY:\n      return { ...state, volatility: action.volatility };\n    case UPDATE_INTEREST:\n      return { ...state, interest: action.interest };\n    default:\n      // Will be run initially\n      return state;\n  }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport stockDataReducer from \"./store/reducers/stockData\";\nimport { createStore, combineReducers } from \"redux\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst rootReducer = combineReducers({\n  stockData: stockDataReducer,\n});\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n        <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}